{"version":3,"sources":["../../src/schema/fieldToSchemaMap.ts"],"sourcesContent":["import type { GraphQLArgumentConfig, GraphQLFieldConfig, GraphQLOutputType } from 'graphql'\nimport type {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GraphQLInfo,\n  GroupField,\n  JoinField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextAdapter,\n  RichTextField,\n  RowField,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLUnionType,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { combineQueries, createDataloaderCacheKey, MissingEditorProp, toWords } from 'payload'\nimport { tabHasName } from 'payload/shared'\n\nimport type { Context } from '../resolvers/types.js'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { formatOptions } from '../utilities/formatOptions.js'\nimport { buildObjectType, type ObjectTypeConfig } from './buildObjectType.js'\nimport { isFieldNullable } from './isFieldNullable.js'\nimport { withNullableType } from './withNullableType.js'\n\nfunction formattedNameResolver({\n  field,\n  ...rest\n}: { field: Field } & GraphQLFieldConfig<any, any, any>): GraphQLFieldConfig<any, any, any> {\n  if ('name' in field) {\n    if (formatName(field.name) !== field.name) {\n      return {\n        ...rest,\n        resolve: (parent) => parent[field.name],\n      }\n    }\n  }\n  return rest\n}\n\ntype SharedArgs = {\n  config: SanitizedConfig\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  newlyCreatedBlockType: GraphQLObjectType\n  objectTypeConfig: ObjectTypeConfig\n  parentIsLocalized?: boolean\n  parentName: string\n}\n\ntype GenericFieldToSchemaMap = (args: { field: Field } & SharedArgs) => ObjectTypeConfig\n\ntype FieldToSchemaMap = {\n  array: (args: { field: ArrayField } & SharedArgs) => ObjectTypeConfig\n  blocks: (args: { field: BlocksField } & SharedArgs) => ObjectTypeConfig\n  checkbox: (args: { field: CheckboxField } & SharedArgs) => ObjectTypeConfig\n  code: (args: { field: CodeField } & SharedArgs) => ObjectTypeConfig\n  collapsible: (args: { field: CollapsibleField } & SharedArgs) => ObjectTypeConfig\n  date: (args: { field: DateField } & SharedArgs) => ObjectTypeConfig\n  email: (args: { field: EmailField } & SharedArgs) => ObjectTypeConfig\n  group: (args: { field: GroupField } & SharedArgs) => ObjectTypeConfig\n  join: (args: { field: JoinField } & SharedArgs) => ObjectTypeConfig\n  json: (args: { field: JSONField } & SharedArgs) => ObjectTypeConfig\n  number: (args: { field: NumberField } & SharedArgs) => ObjectTypeConfig\n  point: (args: { field: PointField } & SharedArgs) => ObjectTypeConfig\n  radio: (args: { field: RadioField } & SharedArgs) => ObjectTypeConfig\n  relationship: (args: { field: RelationshipField } & SharedArgs) => ObjectTypeConfig\n  richText: (args: { field: RichTextField } & SharedArgs) => ObjectTypeConfig\n  row: (args: { field: RowField } & SharedArgs) => ObjectTypeConfig\n  select: (args: { field: SelectField } & SharedArgs) => ObjectTypeConfig\n  tabs: (args: { field: TabsField } & SharedArgs) => ObjectTypeConfig\n  text: (args: { field: TextField } & SharedArgs) => ObjectTypeConfig\n  textarea: (args: { field: TextareaField } & SharedArgs) => ObjectTypeConfig\n  upload: (args: { field: UploadField } & SharedArgs) => ObjectTypeConfig\n}\n\nexport const fieldToSchemaMap: FieldToSchemaMap = {\n  array: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const interfaceName =\n      field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n    if (!graphqlResult.types.arrayTypes[interfaceName]) {\n      const objectType = buildObjectType({\n        name: interfaceName,\n        config,\n        fields: field.fields,\n        forceNullable: isFieldNullable({ field, forceNullable, parentIsLocalized }),\n        graphqlResult,\n        parentIsLocalized: field.localized || parentIsLocalized,\n        parentName: interfaceName,\n      })\n\n      if (Object.keys(objectType.getFields()).length) {\n        graphqlResult.types.arrayTypes[interfaceName] = objectType\n      }\n    }\n\n    if (!graphqlResult.types.arrayTypes[interfaceName]) {\n      return objectTypeConfig\n    }\n\n    const arrayType = new GraphQLList(\n      new GraphQLNonNull(graphqlResult.types.arrayTypes[interfaceName]),\n    )\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({ type: arrayType, field, parentIsLocalized }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  blocks: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const blockTypes: GraphQLObjectType<any, any>[] = (\n      field.blockReferences ?? field.blocks\n    ).reduce((acc, _block) => {\n      const blockSlug = typeof _block === 'string' ? _block : _block.slug\n      if (!graphqlResult.types.blockTypes[blockSlug]) {\n        // TODO: iterate over blocks mapped to block slug in v4, or pass through payload.blocks\n        const block =\n          typeof _block === 'string' ? config.blocks.find((b) => b.slug === _block) : _block\n\n        const interfaceName =\n          block?.interfaceName || block?.graphQL?.singularName || toWords(block.slug, true)\n\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: [\n            ...block.fields,\n            {\n              name: 'blockType',\n              type: 'text',\n            },\n          ],\n          forceNullable,\n          graphqlResult,\n          parentIsLocalized,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.blockTypes[block.slug] = objectType\n        }\n      }\n\n      if (graphqlResult.types.blockTypes[blockSlug]) {\n        acc.push(graphqlResult.types.blockTypes[blockSlug])\n      }\n\n      return acc\n    }, [])\n\n    if (blockTypes.length === 0) {\n      return objectTypeConfig\n    }\n\n    const fullName = combineParentName(parentName, toWords(field.name, true))\n\n    const type = new GraphQLList(\n      new GraphQLNonNull(\n        new GraphQLUnionType({\n          name: fullName,\n          resolveType: (data) => graphqlResult.types.blockTypes[data.blockType].name,\n          types: blockTypes,\n        }),\n      ),\n    ) as GraphQLOutputType\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({ type, field, parentIsLocalized }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  checkbox: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLBoolean,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  code: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  collapsible: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) =>\n    field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n      const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n      if (addSubField) {\n        return addSubField({\n          config,\n          field: subField,\n          forceNullable,\n          graphqlResult,\n          newlyCreatedBlockType,\n          objectTypeConfig: objectTypeConfigWithCollapsibleFields,\n          parentIsLocalized,\n          parentName,\n        })\n      }\n      return objectTypeConfigWithCollapsibleFields\n    }, objectTypeConfig),\n  date: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: DateTimeResolver,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  email: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: EmailAddressResolver,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  group: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const interfaceName =\n      field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n    if (!graphqlResult.types.groupTypes[interfaceName]) {\n      const objectType = buildObjectType({\n        name: interfaceName,\n        config,\n        fields: field.fields,\n        forceNullable: isFieldNullable({ field, forceNullable, parentIsLocalized }),\n        graphqlResult,\n        parentIsLocalized: field.localized || parentIsLocalized,\n        parentName: interfaceName,\n      })\n\n      if (Object.keys(objectType.getFields()).length) {\n        graphqlResult.types.groupTypes[interfaceName] = objectType\n      }\n    }\n\n    if (!graphqlResult.types.groupTypes[interfaceName]) {\n      return objectTypeConfig\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: {\n        type: graphqlResult.types.groupTypes[interfaceName],\n        resolve: (parent, args, context: Context) => {\n          return {\n            ...parent[field.name],\n            _id: parent._id ?? parent.id,\n          }\n        },\n      },\n    }\n  },\n  join: ({ field, graphqlResult, objectTypeConfig, parentName }) => {\n    const joinName = combineParentName(parentName, toWords(field.name, true))\n\n    const joinType = {\n      type: new GraphQLObjectType({\n        name: joinName,\n        fields: {\n          docs: {\n            type: new GraphQLNonNull(\n              Array.isArray(field.collection)\n                ? GraphQLJSON\n                : new GraphQLList(\n                    new GraphQLNonNull(graphqlResult.collections[field.collection].graphQL.type),\n                  ),\n            ),\n          },\n          hasNextPage: { type: new GraphQLNonNull(GraphQLBoolean) },\n        },\n      }),\n      args: {\n        limit: {\n          type: GraphQLInt,\n        },\n        page: {\n          type: GraphQLInt,\n        },\n        sort: {\n          type: GraphQLString,\n        },\n        where: {\n          type: Array.isArray(field.collection)\n            ? GraphQLJSON\n            : graphqlResult.collections[field.collection].graphQL.whereInputType,\n        },\n      },\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n      },\n      async resolve(parent, args, context: Context) {\n        const { collection } = field\n        const { limit, page, sort, where } = args\n        const { req } = context\n\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n        const fullWhere = combineQueries(where, {\n          [field.on]: { equals: parent._id ?? parent.id },\n        })\n\n        if (Array.isArray(collection)) {\n          throw new Error('GraphQL with array of join.field.collection is not implemented')\n        }\n\n        return await req.payload.find({\n          collection,\n          depth: 0,\n          draft,\n          fallbackLocale: req.fallbackLocale,\n          limit,\n          locale: req.locale,\n          overrideAccess: false,\n          page,\n          req,\n          sort,\n          where: fullWhere,\n        })\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: joinType,\n    }\n  },\n  json: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLJSON,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  number: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => {\n    const type = field?.name === 'id' ? GraphQLInt : GraphQLFloat\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({\n          type: field?.hasMany === true ? new GraphQLList(new GraphQLNonNull(type)) : type,\n          field,\n          forceNullable,\n          parentIsLocalized,\n        }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  point: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  radio: ({ field, forceNullable, objectTypeConfig, parentIsLocalized, parentName }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: new GraphQLEnumType({\n          name: combineParentName(parentName, field.name),\n          values: formatOptions(field),\n        }),\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  relationship: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const { relationTo } = field\n    const isRelatedToManyCollections = Array.isArray(relationTo)\n    const hasManyValues = field.hasMany\n    const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n    let type: GraphQLOutputType\n    let relationToType = null\n\n    const graphQLCollections = config.collections.filter(\n      (collectionConfig) => collectionConfig.graphQL !== false,\n    )\n\n    if (Array.isArray(relationTo)) {\n      relationToType = new GraphQLEnumType({\n        name: `${relationshipName}_RelationTo`,\n        values: relationTo\n          .filter((relation) =>\n            graphQLCollections.some((collection) => collection.slug === relation),\n          )\n          .reduce(\n            (relations, relation) => ({\n              ...relations,\n              [formatName(relation)]: {\n                value: relation,\n              },\n            }),\n            {},\n          ),\n      })\n\n      // Only pass collections that are GraphQL enabled\n      const types = relationTo\n        .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n        .map((relation) => graphqlResult.collections[relation]?.graphQL.type)\n\n      type = new GraphQLObjectType({\n        name: `${relationshipName}_Relationship`,\n        fields: {\n          relationTo: {\n            type: relationToType,\n          },\n          value: {\n            type: new GraphQLUnionType({\n              name: relationshipName,\n              resolveType(data) {\n                return graphqlResult.collections[data.collection].graphQL.type.name\n              },\n              types,\n            }) as GraphQLOutputType,\n          },\n        },\n      }) as GraphQLOutputType\n    } else {\n      ;({ type } = graphqlResult.collections[relationTo].graphQL)\n    }\n\n    // If the relationshipType is undefined at this point,\n    // it can be assumed that this blockType can have a relationship\n    // to itself. Therefore, we set the relationshipType equal to the blockType\n    // that is currently being created.\n\n    type = type || newlyCreatedBlockType\n\n    const relationshipArgs: {\n      draft: GraphQLArgumentConfig\n      fallbackLocale: GraphQLArgumentConfig\n      limit: GraphQLArgumentConfig\n      locale: GraphQLArgumentConfig\n      page: GraphQLArgumentConfig\n      where: GraphQLArgumentConfig\n    } = {} as any\n\n    const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo])\n      .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n      .some((relation) => graphqlResult.collections[relation].config.versions?.drafts)\n\n    if (relationsUseDrafts) {\n      relationshipArgs.draft = {\n        type: GraphQLBoolean,\n      }\n    }\n\n    if (config.localization) {\n      relationshipArgs.locale = {\n        type: graphqlResult.types.localeInputType,\n      }\n\n      relationshipArgs.fallbackLocale = {\n        type: graphqlResult.types.fallbackLocaleInputType,\n      }\n    }\n\n    const relationship: GraphQLFieldConfig<any, any, any> = {\n      type: withNullableType({\n        type: hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: relationshipArgs,\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n      },\n      async resolve(parent, args, context: Context) {\n        const value = parent[field.name]\n        const locale = args.locale || context.req.locale\n        const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n        let relatedCollectionSlug = field.relationTo\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n        if (hasManyValues) {\n          const results = []\n          const resultPromises = []\n\n          const createPopulationPromise = async (relatedDoc, i) => {\n            let id = relatedDoc\n            let collectionSlug = field.relationTo\n            const isValidGraphQLCollection = isRelatedToManyCollections\n              ? graphQLCollections.some((collection) => collectionSlug.includes(collection.slug))\n              : graphQLCollections.some((collection) => collectionSlug === collection.slug)\n\n            if (isValidGraphQLCollection) {\n              if (isRelatedToManyCollections) {\n                collectionSlug = relatedDoc.relationTo\n                id = relatedDoc.value\n              }\n\n              const result = await context.req.payloadDataLoader.load(\n                createDataloaderCacheKey({\n                  collectionSlug: collectionSlug as string,\n                  currentDepth: 0,\n                  depth: 0,\n                  docID: id,\n                  draft,\n                  fallbackLocale,\n                  locale,\n                  overrideAccess: false,\n                  showHiddenFields: false,\n                  transactionID: context.req.transactionID,\n                }),\n              )\n\n              if (result) {\n                if (isRelatedToManyCollections) {\n                  results[i] = {\n                    relationTo: collectionSlug,\n                    value: {\n                      ...result,\n                      collection: collectionSlug,\n                    },\n                  }\n                } else {\n                  results[i] = result\n                }\n              }\n            }\n          }\n\n          if (value) {\n            value.forEach((relatedDoc, i) => {\n              resultPromises.push(createPopulationPromise(relatedDoc, i))\n            })\n          }\n\n          await Promise.all(resultPromises)\n          return results\n        }\n\n        let id = value\n        if (isRelatedToManyCollections && value) {\n          id = value.value\n          relatedCollectionSlug = value.relationTo\n        }\n\n        if (id) {\n          if (graphQLCollections.some((collection) => collection.slug === relatedCollectionSlug)) {\n            const relatedDocument = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug: relatedCollectionSlug as string,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (relatedDocument) {\n              if (isRelatedToManyCollections) {\n                return {\n                  relationTo: relatedCollectionSlug,\n                  value: {\n                    ...relatedDocument,\n                    collection: relatedCollectionSlug,\n                  },\n                }\n              }\n\n              return relatedDocument\n            }\n          }\n\n          return null\n        }\n\n        return null\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: relationship,\n    }\n  },\n  richText: ({ config, field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: {\n      type: withNullableType({\n        type: GraphQLJSON,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: {\n        depth: {\n          type: GraphQLInt,\n        },\n      },\n      async resolve(parent, args, context: Context) {\n        let depth = config.defaultDepth\n        if (typeof args.depth !== 'undefined') {\n          depth = args.depth\n        }\n        if (!field?.editor) {\n          throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n        }\n\n        if (typeof field?.editor === 'function') {\n          throw new Error('Attempted to access unsanitized rich text editor.')\n        }\n\n        const editor: RichTextAdapter = field?.editor\n\n        // RichText fields have their own depth argument in GraphQL.\n        // This is why the populationPromise (which populates richtext fields like uploads and relationships)\n        // is run here again, with the provided depth.\n        // In the graphql find.ts resolver, the depth is then hard-coded to 0.\n        // Effectively, this means that the populationPromise for GraphQL is only run here, and not in the find.ts resolver / normal population promise.\n        if (editor?.graphQLPopulationPromises) {\n          const fieldPromises = []\n          const populationPromises = []\n          const populateDepth =\n            field?.maxDepth !== undefined && field?.maxDepth < depth ? field?.maxDepth : depth\n\n          editor?.graphQLPopulationPromises({\n            context,\n            depth: populateDepth,\n            draft: args.draft,\n            field,\n            fieldPromises,\n            findMany: false,\n            flattenLocales: false,\n            overrideAccess: false,\n            parentIsLocalized,\n            populationPromises,\n            req: context.req,\n            showHiddenFields: false,\n            siblingDoc: parent,\n          })\n          await Promise.all(fieldPromises)\n          await Promise.all(populationPromises)\n        }\n\n        return parent[field.name]\n      },\n    },\n  }),\n  row: ({ field, objectTypeConfig, ...rest }) =>\n    field.fields.reduce((objectTypeConfigWithRowFields, subField) => {\n      const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n      if (addSubField) {\n        return addSubField({\n          field: subField,\n          objectTypeConfig: objectTypeConfigWithRowFields,\n          ...rest,\n        })\n      }\n      return objectTypeConfigWithRowFields\n    }, objectTypeConfig),\n  select: ({ field, forceNullable, objectTypeConfig, parentIsLocalized, parentName }) => {\n    const fullName = combineParentName(parentName, field.name)\n\n    let type: GraphQLOutputType = new GraphQLEnumType({\n      name: fullName,\n      values: formatOptions(field),\n    })\n\n    type = field.hasMany ? new GraphQLList(new GraphQLNonNull(type)) : type\n    type = withNullableType({ type, field, forceNullable, parentIsLocalized }) as GraphQLOutputType\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({ type, field }),\n    }\n  },\n  tabs: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) =>\n    field.tabs.reduce((tabSchema, tab) => {\n      if (tabHasName(tab)) {\n        const interfaceName =\n          tab?.interfaceName || combineParentName(parentName, toWords(tab.name, true))\n\n        if (!graphqlResult.types.groupTypes[interfaceName]) {\n          const objectType = buildObjectType({\n            name: interfaceName,\n            config,\n            fields: tab.fields,\n            forceNullable,\n            graphqlResult,\n            parentIsLocalized: tab.localized || parentIsLocalized,\n            parentName: interfaceName,\n          })\n\n          if (Object.keys(objectType.getFields()).length) {\n            graphqlResult.types.groupTypes[interfaceName] = objectType\n          }\n        }\n\n        if (!graphqlResult.types.groupTypes[interfaceName]) {\n          return tabSchema\n        }\n\n        return {\n          ...tabSchema,\n          [tab.name]: {\n            type: graphqlResult.types.groupTypes[interfaceName],\n            resolve(parent, args, context: Context) {\n              return {\n                ...parent[tab.name],\n                _id: parent._id ?? parent.id,\n              }\n            },\n          },\n        }\n      }\n\n      return {\n        ...tabSchema,\n        ...tab.fields.reduce((subFieldSchema, subField) => {\n          const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n          if (addSubField) {\n            return addSubField({\n              config,\n              field: subField,\n              forceNullable,\n              graphqlResult,\n              newlyCreatedBlockType,\n              objectTypeConfig: subFieldSchema,\n              parentIsLocalized,\n              parentName,\n            })\n          }\n          return subFieldSchema\n        }, tabSchema),\n      }\n    }, objectTypeConfig),\n  text: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type:\n          field.hasMany === true\n            ? new GraphQLList(new GraphQLNonNull(GraphQLString))\n            : GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  textarea: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  upload: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const { relationTo } = field\n    const isRelatedToManyCollections = Array.isArray(relationTo)\n    const hasManyValues = field.hasMany\n    const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n    let type\n    let relationToType = null\n\n    if (Array.isArray(relationTo)) {\n      relationToType = new GraphQLEnumType({\n        name: `${relationshipName}_RelationTo`,\n        values: relationTo.reduce(\n          (relations, relation) => ({\n            ...relations,\n            [formatName(relation)]: {\n              value: relation,\n            },\n          }),\n          {},\n        ),\n      })\n\n      const types = relationTo.map((relation) => graphqlResult.collections[relation].graphQL.type)\n\n      type = new GraphQLObjectType({\n        name: `${relationshipName}_Relationship`,\n        fields: {\n          relationTo: {\n            type: relationToType,\n          },\n          value: {\n            type: new GraphQLUnionType({\n              name: relationshipName,\n              resolveType(data) {\n                return graphqlResult.collections[data.collection].graphQL.type.name\n              },\n              types,\n            }),\n          },\n        },\n      })\n    } else {\n      ;({ type } = graphqlResult.collections[relationTo].graphQL)\n    }\n\n    // If the relationshipType is undefined at this point,\n    // it can be assumed that this blockType can have a relationship\n    // to itself. Therefore, we set the relationshipType equal to the blockType\n    // that is currently being created.\n\n    type = type || newlyCreatedBlockType\n\n    const relationshipArgs: {\n      draft?: GraphQLArgumentConfig\n      fallbackLocale?: GraphQLArgumentConfig\n      limit?: GraphQLArgumentConfig\n      locale?: GraphQLArgumentConfig\n      page?: GraphQLArgumentConfig\n      where?: GraphQLArgumentConfig\n    } = {} as any\n\n    const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo]).some(\n      (relation) => graphqlResult.collections[relation].config.versions?.drafts,\n    )\n\n    if (relationsUseDrafts) {\n      relationshipArgs.draft = {\n        type: GraphQLBoolean,\n      }\n    }\n\n    if (config.localization) {\n      relationshipArgs.locale = {\n        type: graphqlResult.types.localeInputType,\n      }\n\n      relationshipArgs.fallbackLocale = {\n        type: graphqlResult.types.fallbackLocaleInputType,\n      }\n    }\n\n    const relationship = {\n      type: withNullableType({\n        type: hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: relationshipArgs,\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n      },\n      async resolve(parent, args, context: Context) {\n        const value = parent[field.name]\n        const locale = args.locale || context.req.locale\n        const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n        let relatedCollectionSlug = field.relationTo\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n        if (hasManyValues) {\n          const results = []\n          const resultPromises = []\n\n          const createPopulationPromise = async (relatedDoc, i) => {\n            let id = relatedDoc\n            let collectionSlug = field.relationTo\n\n            if (isRelatedToManyCollections) {\n              collectionSlug = relatedDoc.relationTo\n              id = relatedDoc.value\n            }\n\n            const result = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (result) {\n              if (isRelatedToManyCollections) {\n                results[i] = {\n                  relationTo: collectionSlug,\n                  value: {\n                    ...result,\n                    collection: collectionSlug,\n                  },\n                }\n              } else {\n                results[i] = result\n              }\n            }\n          }\n\n          if (value) {\n            value.forEach((relatedDoc, i) => {\n              resultPromises.push(createPopulationPromise(relatedDoc, i))\n            })\n          }\n\n          await Promise.all(resultPromises)\n          return results\n        }\n\n        let id = value\n        if (isRelatedToManyCollections && value) {\n          id = value.value\n          relatedCollectionSlug = value.relationTo\n        }\n\n        if (id) {\n          const relatedDocument = await context.req.payloadDataLoader.load(\n            createDataloaderCacheKey({\n              collectionSlug: relatedCollectionSlug,\n              currentDepth: 0,\n              depth: 0,\n              docID: id,\n              draft,\n              fallbackLocale,\n              locale,\n              overrideAccess: false,\n              showHiddenFields: false,\n              transactionID: context.req.transactionID,\n            }),\n          )\n\n          if (relatedDocument) {\n            if (isRelatedToManyCollections) {\n              return {\n                relationTo: relatedCollectionSlug,\n                value: {\n                  ...relatedDocument,\n                  collection: relatedCollectionSlug,\n                },\n              }\n            }\n\n            return relatedDocument\n          }\n\n          return null\n        }\n\n        return null\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: relationship,\n    }\n  },\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLString","GraphQLUnionType","DateTimeResolver","EmailAddressResolver","combineQueries","createDataloaderCacheKey","MissingEditorProp","toWords","tabHasName","GraphQLJSON","combineParentName","formatName","formatOptions","buildObjectType","isFieldNullable","withNullableType","formattedNameResolver","field","rest","name","resolve","parent","fieldToSchemaMap","array","config","forceNullable","graphqlResult","objectTypeConfig","parentIsLocalized","parentName","interfaceName","types","arrayTypes","objectType","fields","localized","Object","keys","getFields","length","arrayType","type","blocks","blockTypes","blockReferences","reduce","acc","_block","blockSlug","slug","block","find","b","graphQL","singularName","push","fullName","resolveType","data","blockType","checkbox","code","collapsible","newlyCreatedBlockType","objectTypeConfigWithCollapsibleFields","subField","addSubField","date","email","group","groupTypes","args","context","_id","id","join","joinName","joinType","docs","Array","isArray","collection","collections","hasNextPage","limit","page","sort","where","whereInputType","extensions","complexity","req","draft","Boolean","query","fullWhere","on","equals","Error","payload","depth","fallbackLocale","locale","overrideAccess","json","number","hasMany","point","radio","values","relationship","relationTo","isRelatedToManyCollections","hasManyValues","relationshipName","relationToType","graphQLCollections","filter","collectionConfig","relation","some","relations","value","map","relationshipArgs","relationsUseDrafts","versions","drafts","localization","localeInputType","fallbackLocaleInputType","relatedCollectionSlug","results","resultPromises","createPopulationPromise","relatedDoc","i","collectionSlug","isValidGraphQLCollection","includes","result","payloadDataLoader","load","currentDepth","docID","showHiddenFields","transactionID","forEach","Promise","all","relatedDocument","richText","defaultDepth","editor","graphQLPopulationPromises","fieldPromises","populationPromises","populateDepth","maxDepth","undefined","findMany","flattenLocales","siblingDoc","row","objectTypeConfigWithRowFields","select","tabs","tabSchema","tab","subFieldSchema","text","textarea","upload"],"mappings":"AA6BA,SACEA,cAAc,EACdC,eAAe,EACfC,YAAY,EACZC,UAAU,EACVC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,gBAAgB,QACX,UAAS;AAChB,SAASC,gBAAgB,EAAEC,oBAAoB,QAAQ,kBAAiB;AACxE,SAASC,cAAc,EAAEC,wBAAwB,EAAEC,iBAAiB,EAAEC,OAAO,QAAQ,UAAS;AAC9F,SAASC,UAAU,QAAQ,iBAAgB;AAI3C,SAASC,WAAW,QAAQ,yCAAwC;AACpE,SAASC,iBAAiB,QAAQ,oCAAmC;AACrE,SAASC,UAAU,QAAQ,6BAA4B;AACvD,SAASC,aAAa,QAAQ,gCAA+B;AAC7D,SAASC,eAAe,QAA+B,uBAAsB;AAC7E,SAASC,eAAe,QAAQ,uBAAsB;AACtD,SAASC,gBAAgB,QAAQ,wBAAuB;AAExD,SAASC,sBAAsB,EAC7BC,KAAK,EACL,GAAGC,MACkD;IACrD,IAAI,UAAUD,OAAO;QACnB,IAAIN,WAAWM,MAAME,IAAI,MAAMF,MAAME,IAAI,EAAE;YACzC,OAAO;gBACL,GAAGD,IAAI;gBACPE,SAAS,CAACC,SAAWA,MAAM,CAACJ,MAAME,IAAI,CAAC;YACzC;QACF;IACF;IACA,OAAOD;AACT;AAsCA,OAAO,MAAMI,mBAAqC;IAChDC,OAAO,CAAC,EACNC,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX;QACC,MAAMC,gBACJb,OAAOa,iBAAiBpB,kBAAkBmB,YAAYtB,QAAQU,MAAME,IAAI,EAAE;QAE5E,IAAI,CAACO,cAAcK,KAAK,CAACC,UAAU,CAACF,cAAc,EAAE;YAClD,MAAMG,aAAapB,gBAAgB;gBACjCM,MAAMW;gBACNN;gBACAU,QAAQjB,MAAMiB,MAAM;gBACpBT,eAAeX,gBAAgB;oBAAEG;oBAAOQ;oBAAeG;gBAAkB;gBACzEF;gBACAE,mBAAmBX,MAAMkB,SAAS,IAAIP;gBACtCC,YAAYC;YACd;YAEA,IAAIM,OAAOC,IAAI,CAACJ,WAAWK,SAAS,IAAIC,MAAM,EAAE;gBAC9Cb,cAAcK,KAAK,CAACC,UAAU,CAACF,cAAc,GAAGG;YAClD;QACF;QAEA,IAAI,CAACP,cAAcK,KAAK,CAACC,UAAU,CAACF,cAAc,EAAE;YAClD,OAAOH;QACT;QAEA,MAAMa,YAAY,IAAI3C,YACpB,IAAIC,eAAe4B,cAAcK,KAAK,CAACC,UAAU,CAACF,cAAc;QAGlE,OAAO;YACL,GAAGH,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBAAE0B,MAAMD;oBAAWvB;oBAAOW;gBAAkB;gBACnEX;YACF;QACF;IACF;IACAyB,QAAQ,CAAC,EACPlB,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX;QACC,MAAMc,aAA4C,AAChD1B,CAAAA,MAAM2B,eAAe,IAAI3B,MAAMyB,MAAM,AAAD,EACpCG,MAAM,CAAC,CAACC,KAAKC;YACb,MAAMC,YAAY,OAAOD,WAAW,WAAWA,SAASA,OAAOE,IAAI;YACnE,IAAI,CAACvB,cAAcK,KAAK,CAACY,UAAU,CAACK,UAAU,EAAE;gBAC9C,uFAAuF;gBACvF,MAAME,QACJ,OAAOH,WAAW,WAAWvB,OAAOkB,MAAM,CAACS,IAAI,CAAC,CAACC,IAAMA,EAAEH,IAAI,KAAKF,UAAUA;gBAE9E,MAAMjB,gBACJoB,OAAOpB,iBAAiBoB,OAAOG,SAASC,gBAAgB/C,QAAQ2C,MAAMD,IAAI,EAAE;gBAE9E,MAAMhB,aAAapB,gBAAgB;oBACjCM,MAAMW;oBACNN;oBACAU,QAAQ;2BACHgB,MAAMhB,MAAM;wBACf;4BACEf,MAAM;4BACNsB,MAAM;wBACR;qBACD;oBACDhB;oBACAC;oBACAE;oBACAC,YAAYC;gBACd;gBAEA,IAAIM,OAAOC,IAAI,CAACJ,WAAWK,SAAS,IAAIC,MAAM,EAAE;oBAC9Cb,cAAcK,KAAK,CAACY,UAAU,CAACO,MAAMD,IAAI,CAAC,GAAGhB;gBAC/C;YACF;YAEA,IAAIP,cAAcK,KAAK,CAACY,UAAU,CAACK,UAAU,EAAE;gBAC7CF,IAAIS,IAAI,CAAC7B,cAAcK,KAAK,CAACY,UAAU,CAACK,UAAU;YACpD;YAEA,OAAOF;QACT,GAAG,EAAE;QAEL,IAAIH,WAAWJ,MAAM,KAAK,GAAG;YAC3B,OAAOZ;QACT;QAEA,MAAM6B,WAAW9C,kBAAkBmB,YAAYtB,QAAQU,MAAME,IAAI,EAAE;QAEnE,MAAMsB,OAAO,IAAI5C,YACf,IAAIC,eACF,IAAIG,iBAAiB;YACnBkB,MAAMqC;YACNC,aAAa,CAACC,OAAShC,cAAcK,KAAK,CAACY,UAAU,CAACe,KAAKC,SAAS,CAAC,CAACxC,IAAI;YAC1EY,OAAOY;QACT;QAIJ,OAAO;YACL,GAAGhB,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBAAE0B;oBAAMxB;oBAAOW;gBAAkB;gBACxDX;YACF;QACF;IACF;IACA2C,UAAU,CAAC,EAAE3C,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YAC5E,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMhD;oBACNwB;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACA4C,MAAM,CAAC,EAAE5C,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACxE,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMzC;oBACNiB;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACA6C,aAAa,CAAC,EACZtC,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbqC,qBAAqB,EACrBpC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX,GACCZ,MAAMiB,MAAM,CAACW,MAAM,CAAC,CAACmB,uCAAuCC;YAC1D,MAAMC,cAAuC5C,gBAAgB,CAAC2C,SAASxB,IAAI,CAAC;YAC5E,IAAIyB,aAAa;gBACf,OAAOA,YAAY;oBACjB1C;oBACAP,OAAOgD;oBACPxC;oBACAC;oBACAqC;oBACApC,kBAAkBqC;oBAClBpC;oBACAC;gBACF;YACF;YACA,OAAOmC;QACT,GAAGrC;IACLwC,MAAM,CAAC,EAAElD,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACxE,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMvC;oBACNe;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACAmD,OAAO,CAAC,EAAEnD,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACzE,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMtC;oBACNc;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACAoD,OAAO,CAAC,EACN7C,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX;QACC,MAAMC,gBACJb,OAAOa,iBAAiBpB,kBAAkBmB,YAAYtB,QAAQU,MAAME,IAAI,EAAE;QAE5E,IAAI,CAACO,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc,EAAE;YAClD,MAAMG,aAAapB,gBAAgB;gBACjCM,MAAMW;gBACNN;gBACAU,QAAQjB,MAAMiB,MAAM;gBACpBT,eAAeX,gBAAgB;oBAAEG;oBAAOQ;oBAAeG;gBAAkB;gBACzEF;gBACAE,mBAAmBX,MAAMkB,SAAS,IAAIP;gBACtCC,YAAYC;YACd;YAEA,IAAIM,OAAOC,IAAI,CAACJ,WAAWK,SAAS,IAAIC,MAAM,EAAE;gBAC9Cb,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc,GAAGG;YAClD;QACF;QAEA,IAAI,CAACP,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc,EAAE;YAClD,OAAOH;QACT;QAEA,OAAO;YACL,GAAGA,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAE;gBACxBsB,MAAMf,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc;gBACnDV,SAAS,CAACC,QAAQkD,MAAMC;oBACtB,OAAO;wBACL,GAAGnD,MAAM,CAACJ,MAAME,IAAI,CAAC;wBACrBsD,KAAKpD,OAAOoD,GAAG,IAAIpD,OAAOqD,EAAE;oBAC9B;gBACF;YACF;QACF;IACF;IACAC,MAAM,CAAC,EAAE1D,KAAK,EAAES,aAAa,EAAEC,gBAAgB,EAAEE,UAAU,EAAE;QAC3D,MAAM+C,WAAWlE,kBAAkBmB,YAAYtB,QAAQU,MAAME,IAAI,EAAE;QAEnE,MAAM0D,WAAW;YACfpC,MAAM,IAAI1C,kBAAkB;gBAC1BoB,MAAMyD;gBACN1C,QAAQ;oBACN4C,MAAM;wBACJrC,MAAM,IAAI3C,eACRiF,MAAMC,OAAO,CAAC/D,MAAMgE,UAAU,IAC1BxE,cACA,IAAIZ,YACF,IAAIC,eAAe4B,cAAcwD,WAAW,CAACjE,MAAMgE,UAAU,CAAC,CAAC5B,OAAO,CAACZ,IAAI;oBAGrF;oBACA0C,aAAa;wBAAE1C,MAAM,IAAI3C,eAAeL;oBAAgB;gBAC1D;YACF;YACA8E,MAAM;gBACJa,OAAO;oBACL3C,MAAM7C;gBACR;gBACAyF,MAAM;oBACJ5C,MAAM7C;gBACR;gBACA0F,MAAM;oBACJ7C,MAAMzC;gBACR;gBACAuF,OAAO;oBACL9C,MAAMsC,MAAMC,OAAO,CAAC/D,MAAMgE,UAAU,IAChCxE,cACAiB,cAAcwD,WAAW,CAACjE,MAAMgE,UAAU,CAAC,CAAC5B,OAAO,CAACmC,cAAc;gBACxE;YACF;YACAC,YAAY;gBACVC,YAAY,OAAOzE,OAAOoC,SAASqC,eAAe,WAAWzE,MAAMoC,OAAO,CAACqC,UAAU,GAAG;YAC1F;YACA,MAAMtE,SAAQC,MAAM,EAAEkD,IAAI,EAAEC,OAAgB;gBAC1C,MAAM,EAAES,UAAU,EAAE,GAAGhE;gBACvB,MAAM,EAAEmE,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAGhB;gBACrC,MAAM,EAAEoB,GAAG,EAAE,GAAGnB;gBAEhB,MAAMoB,QAAQC,QAAQtB,KAAKqB,KAAK,IAAIpB,QAAQmB,GAAG,CAACG,KAAK,EAAEF;gBAEvD,MAAMG,YAAY3F,eAAemF,OAAO;oBACtC,CAACtE,MAAM+E,EAAE,CAAC,EAAE;wBAAEC,QAAQ5E,OAAOoD,GAAG,IAAIpD,OAAOqD,EAAE;oBAAC;gBAChD;gBAEA,IAAIK,MAAMC,OAAO,CAACC,aAAa;oBAC7B,MAAM,IAAIiB,MAAM;gBAClB;gBAEA,OAAO,MAAMP,IAAIQ,OAAO,CAAChD,IAAI,CAAC;oBAC5B8B;oBACAmB,OAAO;oBACPR;oBACAS,gBAAgBV,IAAIU,cAAc;oBAClCjB;oBACAkB,QAAQX,IAAIW,MAAM;oBAClBC,gBAAgB;oBAChBlB;oBACAM;oBACAL;oBACAC,OAAOQ;gBACT;YACF;QACF;QAEA,OAAO;YACL,GAAGpE,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAE0D;QAC5B;IACF;IACA2B,MAAM,CAAC,EAAEvF,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACxE,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMhC;oBACNQ;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACAwF,QAAQ,CAAC,EAAExF,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE;QACpE,MAAMa,OAAOxB,OAAOE,SAAS,OAAOvB,aAAaD;QACjD,OAAO;YACL,GAAGgC,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMxB,OAAOyF,YAAY,OAAO,IAAI7G,YAAY,IAAIC,eAAe2C,SAASA;oBAC5ExB;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF;IACF;IACA0F,OAAO,CAAC,EAAE1F,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACzE,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAM,IAAI5C,YAAY,IAAIC,eAAeH;oBACzCsB;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACA2F,OAAO,CAAC,EAAE3F,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAEC,UAAU,EAAE,GAAM,CAAA;YACrF,GAAGF,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAM,IAAI/C,gBAAgB;wBACxByB,MAAMT,kBAAkBmB,YAAYZ,MAAME,IAAI;wBAC9C0F,QAAQjG,cAAcK;oBACxB;oBACAA;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACA6F,cAAc,CAAC,EACbtF,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbqC,qBAAqB,EACrBpC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX;QACC,MAAM,EAAEkF,UAAU,EAAE,GAAG9F;QACvB,MAAM+F,6BAA6BjC,MAAMC,OAAO,CAAC+B;QACjD,MAAME,gBAAgBhG,MAAMyF,OAAO;QACnC,MAAMQ,mBAAmBxG,kBAAkBmB,YAAYtB,QAAQU,MAAME,IAAI,EAAE;QAE3E,IAAIsB;QACJ,IAAI0E,iBAAiB;QAErB,MAAMC,qBAAqB5F,OAAO0D,WAAW,CAACmC,MAAM,CAClD,CAACC,mBAAqBA,iBAAiBjE,OAAO,KAAK;QAGrD,IAAI0B,MAAMC,OAAO,CAAC+B,aAAa;YAC7BI,iBAAiB,IAAIzH,gBAAgB;gBACnCyB,MAAM,GAAG+F,iBAAiB,WAAW,CAAC;gBACtCL,QAAQE,WACLM,MAAM,CAAC,CAACE,WACPH,mBAAmBI,IAAI,CAAC,CAACvC,aAAeA,WAAWhC,IAAI,KAAKsE,WAE7D1E,MAAM,CACL,CAAC4E,WAAWF,WAAc,CAAA;wBACxB,GAAGE,SAAS;wBACZ,CAAC9G,WAAW4G,UAAU,EAAE;4BACtBG,OAAOH;wBACT;oBACF,CAAA,GACA,CAAC;YAEP;YAEA,iDAAiD;YACjD,MAAMxF,QAAQgF,WACXM,MAAM,CAAC,CAACE,WAAaH,mBAAmBI,IAAI,CAAC,CAACvC,aAAeA,WAAWhC,IAAI,KAAKsE,WACjFI,GAAG,CAAC,CAACJ,WAAa7F,cAAcwD,WAAW,CAACqC,SAAS,EAAElE,QAAQZ;YAElEA,OAAO,IAAI1C,kBAAkB;gBAC3BoB,MAAM,GAAG+F,iBAAiB,aAAa,CAAC;gBACxChF,QAAQ;oBACN6E,YAAY;wBACVtE,MAAM0E;oBACR;oBACAO,OAAO;wBACLjF,MAAM,IAAIxC,iBAAiB;4BACzBkB,MAAM+F;4BACNzD,aAAYC,IAAI;gCACd,OAAOhC,cAAcwD,WAAW,CAACxB,KAAKuB,UAAU,CAAC,CAAC5B,OAAO,CAACZ,IAAI,CAACtB,IAAI;4BACrE;4BACAY;wBACF;oBACF;gBACF;YACF;QACF,OAAO;;YACH,CAAA,EAAEU,IAAI,EAAE,GAAGf,cAAcwD,WAAW,CAAC6B,WAAW,CAAC1D,OAAO,AAAD;QAC3D;QAEA,sDAAsD;QACtD,gEAAgE;QAChE,2EAA2E;QAC3E,mCAAmC;QAEnCZ,OAAOA,QAAQsB;QAEf,MAAM6D,mBAOF,CAAC;QAEL,MAAMC,qBAAqB,AAAC9C,CAAAA,MAAMC,OAAO,CAAC+B,cAAcA,aAAa;YAACA;SAAW,AAAD,EAC7EM,MAAM,CAAC,CAACE,WAAaH,mBAAmBI,IAAI,CAAC,CAACvC,aAAeA,WAAWhC,IAAI,KAAKsE,WACjFC,IAAI,CAAC,CAACD,WAAa7F,cAAcwD,WAAW,CAACqC,SAAS,CAAC/F,MAAM,CAACsG,QAAQ,EAAEC;QAE3E,IAAIF,oBAAoB;YACtBD,iBAAiBhC,KAAK,GAAG;gBACvBnD,MAAMhD;YACR;QACF;QAEA,IAAI+B,OAAOwG,YAAY,EAAE;YACvBJ,iBAAiBtB,MAAM,GAAG;gBACxB7D,MAAMf,cAAcK,KAAK,CAACkG,eAAe;YAC3C;YAEAL,iBAAiBvB,cAAc,GAAG;gBAChC5D,MAAMf,cAAcK,KAAK,CAACmG,uBAAuB;YACnD;QACF;QAEA,MAAMpB,eAAkD;YACtDrE,MAAM1B,iBAAiB;gBACrB0B,MAAMwE,gBAAgB,IAAIpH,YAAY,IAAIC,eAAe2C,SAASA;gBAClExB;gBACAQ;gBACAG;YACF;YACA2C,MAAMqD;YACNnC,YAAY;gBACVC,YAAY,OAAOzE,OAAOoC,SAASqC,eAAe,WAAWzE,MAAMoC,OAAO,CAACqC,UAAU,GAAG;YAC1F;YACA,MAAMtE,SAAQC,MAAM,EAAEkD,IAAI,EAAEC,OAAgB;gBAC1C,MAAMkD,QAAQrG,MAAM,CAACJ,MAAME,IAAI,CAAC;gBAChC,MAAMmF,SAAS/B,KAAK+B,MAAM,IAAI9B,QAAQmB,GAAG,CAACW,MAAM;gBAChD,MAAMD,iBAAiB9B,KAAK8B,cAAc,IAAI7B,QAAQmB,GAAG,CAACU,cAAc;gBACxE,IAAI8B,wBAAwBlH,MAAM8F,UAAU;gBAC5C,MAAMnB,QAAQC,QAAQtB,KAAKqB,KAAK,IAAIpB,QAAQmB,GAAG,CAACG,KAAK,EAAEF;gBAEvD,IAAIqB,eAAe;oBACjB,MAAMmB,UAAU,EAAE;oBAClB,MAAMC,iBAAiB,EAAE;oBAEzB,MAAMC,0BAA0B,OAAOC,YAAYC;wBACjD,IAAI9D,KAAK6D;wBACT,IAAIE,iBAAiBxH,MAAM8F,UAAU;wBACrC,MAAM2B,2BAA2B1B,6BAC7BI,mBAAmBI,IAAI,CAAC,CAACvC,aAAewD,eAAeE,QAAQ,CAAC1D,WAAWhC,IAAI,KAC/EmE,mBAAmBI,IAAI,CAAC,CAACvC,aAAewD,mBAAmBxD,WAAWhC,IAAI;wBAE9E,IAAIyF,0BAA0B;4BAC5B,IAAI1B,4BAA4B;gCAC9ByB,iBAAiBF,WAAWxB,UAAU;gCACtCrC,KAAK6D,WAAWb,KAAK;4BACvB;4BAEA,MAAMkB,SAAS,MAAMpE,QAAQmB,GAAG,CAACkD,iBAAiB,CAACC,IAAI,CACrDzI,yBAAyB;gCACvBoI,gBAAgBA;gCAChBM,cAAc;gCACd3C,OAAO;gCACP4C,OAAOtE;gCACPkB;gCACAS;gCACAC;gCACAC,gBAAgB;gCAChB0C,kBAAkB;gCAClBC,eAAe1E,QAAQmB,GAAG,CAACuD,aAAa;4BAC1C;4BAGF,IAAIN,QAAQ;gCACV,IAAI5B,4BAA4B;oCAC9BoB,OAAO,CAACI,EAAE,GAAG;wCACXzB,YAAY0B;wCACZf,OAAO;4CACL,GAAGkB,MAAM;4CACT3D,YAAYwD;wCACd;oCACF;gCACF,OAAO;oCACLL,OAAO,CAACI,EAAE,GAAGI;gCACf;4BACF;wBACF;oBACF;oBAEA,IAAIlB,OAAO;wBACTA,MAAMyB,OAAO,CAAC,CAACZ,YAAYC;4BACzBH,eAAe9E,IAAI,CAAC+E,wBAAwBC,YAAYC;wBAC1D;oBACF;oBAEA,MAAMY,QAAQC,GAAG,CAAChB;oBAClB,OAAOD;gBACT;gBAEA,IAAI1D,KAAKgD;gBACT,IAAIV,8BAA8BU,OAAO;oBACvChD,KAAKgD,MAAMA,KAAK;oBAChBS,wBAAwBT,MAAMX,UAAU;gBAC1C;gBAEA,IAAIrC,IAAI;oBACN,IAAI0C,mBAAmBI,IAAI,CAAC,CAACvC,aAAeA,WAAWhC,IAAI,KAAKkF,wBAAwB;wBACtF,MAAMmB,kBAAkB,MAAM9E,QAAQmB,GAAG,CAACkD,iBAAiB,CAACC,IAAI,CAC9DzI,yBAAyB;4BACvBoI,gBAAgBN;4BAChBY,cAAc;4BACd3C,OAAO;4BACP4C,OAAOtE;4BACPkB;4BACAS;4BACAC;4BACAC,gBAAgB;4BAChB0C,kBAAkB;4BAClBC,eAAe1E,QAAQmB,GAAG,CAACuD,aAAa;wBAC1C;wBAGF,IAAII,iBAAiB;4BACnB,IAAItC,4BAA4B;gCAC9B,OAAO;oCACLD,YAAYoB;oCACZT,OAAO;wCACL,GAAG4B,eAAe;wCAClBrE,YAAYkD;oCACd;gCACF;4BACF;4BAEA,OAAOmB;wBACT;oBACF;oBAEA,OAAO;gBACT;gBAEA,OAAO;YACT;QACF;QAEA,OAAO;YACL,GAAG3H,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAE2F;QAC5B;IACF;IACAyC,UAAU,CAAC,EAAE/H,MAAM,EAAEP,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACpF,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAE;gBACxBsB,MAAM1B,iBAAiB;oBACrB0B,MAAMhC;oBACNQ;oBACAQ;oBACAG;gBACF;gBACA2C,MAAM;oBACJ6B,OAAO;wBACL3D,MAAM7C;oBACR;gBACF;gBACA,MAAMwB,SAAQC,MAAM,EAAEkD,IAAI,EAAEC,OAAgB;oBAC1C,IAAI4B,QAAQ5E,OAAOgI,YAAY;oBAC/B,IAAI,OAAOjF,KAAK6B,KAAK,KAAK,aAAa;wBACrCA,QAAQ7B,KAAK6B,KAAK;oBACpB;oBACA,IAAI,CAACnF,OAAOwI,QAAQ;wBAClB,MAAM,IAAInJ,kBAAkBW,OAAO,8HAA8H;;oBACnK;oBAEA,IAAI,OAAOA,OAAOwI,WAAW,YAAY;wBACvC,MAAM,IAAIvD,MAAM;oBAClB;oBAEA,MAAMuD,SAA0BxI,OAAOwI;oBAEvC,4DAA4D;oBAC5D,qGAAqG;oBACrG,8CAA8C;oBAC9C,sEAAsE;oBACtE,gJAAgJ;oBAChJ,IAAIA,QAAQC,2BAA2B;wBACrC,MAAMC,gBAAgB,EAAE;wBACxB,MAAMC,qBAAqB,EAAE;wBAC7B,MAAMC,gBACJ5I,OAAO6I,aAAaC,aAAa9I,OAAO6I,WAAW1D,QAAQnF,OAAO6I,WAAW1D;wBAE/EqD,QAAQC,0BAA0B;4BAChClF;4BACA4B,OAAOyD;4BACPjE,OAAOrB,KAAKqB,KAAK;4BACjB3E;4BACA0I;4BACAK,UAAU;4BACVC,gBAAgB;4BAChB1D,gBAAgB;4BAChB3E;4BACAgI;4BACAjE,KAAKnB,QAAQmB,GAAG;4BAChBsD,kBAAkB;4BAClBiB,YAAY7I;wBACd;wBACA,MAAM+H,QAAQC,GAAG,CAACM;wBAClB,MAAMP,QAAQC,GAAG,CAACO;oBACpB;oBAEA,OAAOvI,MAAM,CAACJ,MAAME,IAAI,CAAC;gBAC3B;YACF;QACF,CAAA;IACAgJ,KAAK,CAAC,EAAElJ,KAAK,EAAEU,gBAAgB,EAAE,GAAGT,MAAM,GACxCD,MAAMiB,MAAM,CAACW,MAAM,CAAC,CAACuH,+BAA+BnG;YAClD,MAAMC,cAAuC5C,gBAAgB,CAAC2C,SAASxB,IAAI,CAAC;YAC5E,IAAIyB,aAAa;gBACf,OAAOA,YAAY;oBACjBjD,OAAOgD;oBACPtC,kBAAkByI;oBAClB,GAAGlJ,IAAI;gBACT;YACF;YACA,OAAOkJ;QACT,GAAGzI;IACL0I,QAAQ,CAAC,EAAEpJ,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAEC,UAAU,EAAE;QAChF,MAAM2B,WAAW9C,kBAAkBmB,YAAYZ,MAAME,IAAI;QAEzD,IAAIsB,OAA0B,IAAI/C,gBAAgB;YAChDyB,MAAMqC;YACNqD,QAAQjG,cAAcK;QACxB;QAEAwB,OAAOxB,MAAMyF,OAAO,GAAG,IAAI7G,YAAY,IAAIC,eAAe2C,SAASA;QACnEA,OAAO1B,iBAAiB;YAAE0B;YAAMxB;YAAOQ;YAAeG;QAAkB;QAExE,OAAO;YACL,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAAEyB;gBAAMxB;YAAM;QAChE;IACF;IACAqJ,MAAM,CAAC,EACL9I,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbqC,qBAAqB,EACrBpC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX,GACCZ,MAAMqJ,IAAI,CAACzH,MAAM,CAAC,CAAC0H,WAAWC;YAC5B,IAAIhK,WAAWgK,MAAM;gBACnB,MAAM1I,gBACJ0I,KAAK1I,iBAAiBpB,kBAAkBmB,YAAYtB,QAAQiK,IAAIrJ,IAAI,EAAE;gBAExE,IAAI,CAACO,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc,EAAE;oBAClD,MAAMG,aAAapB,gBAAgB;wBACjCM,MAAMW;wBACNN;wBACAU,QAAQsI,IAAItI,MAAM;wBAClBT;wBACAC;wBACAE,mBAAmB4I,IAAIrI,SAAS,IAAIP;wBACpCC,YAAYC;oBACd;oBAEA,IAAIM,OAAOC,IAAI,CAACJ,WAAWK,SAAS,IAAIC,MAAM,EAAE;wBAC9Cb,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc,GAAGG;oBAClD;gBACF;gBAEA,IAAI,CAACP,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc,EAAE;oBAClD,OAAOyI;gBACT;gBAEA,OAAO;oBACL,GAAGA,SAAS;oBACZ,CAACC,IAAIrJ,IAAI,CAAC,EAAE;wBACVsB,MAAMf,cAAcK,KAAK,CAACuC,UAAU,CAACxC,cAAc;wBACnDV,SAAQC,MAAM,EAAEkD,IAAI,EAAEC,OAAgB;4BACpC,OAAO;gCACL,GAAGnD,MAAM,CAACmJ,IAAIrJ,IAAI,CAAC;gCACnBsD,KAAKpD,OAAOoD,GAAG,IAAIpD,OAAOqD,EAAE;4BAC9B;wBACF;oBACF;gBACF;YACF;YAEA,OAAO;gBACL,GAAG6F,SAAS;gBACZ,GAAGC,IAAItI,MAAM,CAACW,MAAM,CAAC,CAAC4H,gBAAgBxG;oBACpC,MAAMC,cAAuC5C,gBAAgB,CAAC2C,SAASxB,IAAI,CAAC;oBAC5E,IAAIyB,aAAa;wBACf,OAAOA,YAAY;4BACjB1C;4BACAP,OAAOgD;4BACPxC;4BACAC;4BACAqC;4BACApC,kBAAkB8I;4BAClB7I;4BACAC;wBACF;oBACF;oBACA,OAAO4I;gBACT,GAAGF,UAAU;YACf;QACF,GAAG5I;IACL+I,MAAM,CAAC,EAAEzJ,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YACxE,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MACExB,MAAMyF,OAAO,KAAK,OACd,IAAI7G,YAAY,IAAIC,eAAeE,kBACnCA;oBACNiB;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACA0J,UAAU,CAAC,EAAE1J,KAAK,EAAEQ,aAAa,EAAEE,gBAAgB,EAAEC,iBAAiB,EAAE,GAAM,CAAA;YAC5E,GAAGD,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAEH,sBAAsB;gBAC9CyB,MAAM1B,iBAAiB;oBACrB0B,MAAMzC;oBACNiB;oBACAQ;oBACAG;gBACF;gBACAX;YACF;QACF,CAAA;IACA2J,QAAQ,CAAC,EACPpJ,MAAM,EACNP,KAAK,EACLQ,aAAa,EACbC,aAAa,EACbqC,qBAAqB,EACrBpC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACX;QACC,MAAM,EAAEkF,UAAU,EAAE,GAAG9F;QACvB,MAAM+F,6BAA6BjC,MAAMC,OAAO,CAAC+B;QACjD,MAAME,gBAAgBhG,MAAMyF,OAAO;QACnC,MAAMQ,mBAAmBxG,kBAAkBmB,YAAYtB,QAAQU,MAAME,IAAI,EAAE;QAE3E,IAAIsB;QACJ,IAAI0E,iBAAiB;QAErB,IAAIpC,MAAMC,OAAO,CAAC+B,aAAa;YAC7BI,iBAAiB,IAAIzH,gBAAgB;gBACnCyB,MAAM,GAAG+F,iBAAiB,WAAW,CAAC;gBACtCL,QAAQE,WAAWlE,MAAM,CACvB,CAAC4E,WAAWF,WAAc,CAAA;wBACxB,GAAGE,SAAS;wBACZ,CAAC9G,WAAW4G,UAAU,EAAE;4BACtBG,OAAOH;wBACT;oBACF,CAAA,GACA,CAAC;YAEL;YAEA,MAAMxF,QAAQgF,WAAWY,GAAG,CAAC,CAACJ,WAAa7F,cAAcwD,WAAW,CAACqC,SAAS,CAAClE,OAAO,CAACZ,IAAI;YAE3FA,OAAO,IAAI1C,kBAAkB;gBAC3BoB,MAAM,GAAG+F,iBAAiB,aAAa,CAAC;gBACxChF,QAAQ;oBACN6E,YAAY;wBACVtE,MAAM0E;oBACR;oBACAO,OAAO;wBACLjF,MAAM,IAAIxC,iBAAiB;4BACzBkB,MAAM+F;4BACNzD,aAAYC,IAAI;gCACd,OAAOhC,cAAcwD,WAAW,CAACxB,KAAKuB,UAAU,CAAC,CAAC5B,OAAO,CAACZ,IAAI,CAACtB,IAAI;4BACrE;4BACAY;wBACF;oBACF;gBACF;YACF;QACF,OAAO;;YACH,CAAA,EAAEU,IAAI,EAAE,GAAGf,cAAcwD,WAAW,CAAC6B,WAAW,CAAC1D,OAAO,AAAD;QAC3D;QAEA,sDAAsD;QACtD,gEAAgE;QAChE,2EAA2E;QAC3E,mCAAmC;QAEnCZ,OAAOA,QAAQsB;QAEf,MAAM6D,mBAOF,CAAC;QAEL,MAAMC,qBAAqB,AAAC9C,CAAAA,MAAMC,OAAO,CAAC+B,cAAcA,aAAa;YAACA;SAAW,AAAD,EAAGS,IAAI,CACrF,CAACD,WAAa7F,cAAcwD,WAAW,CAACqC,SAAS,CAAC/F,MAAM,CAACsG,QAAQ,EAAEC;QAGrE,IAAIF,oBAAoB;YACtBD,iBAAiBhC,KAAK,GAAG;gBACvBnD,MAAMhD;YACR;QACF;QAEA,IAAI+B,OAAOwG,YAAY,EAAE;YACvBJ,iBAAiBtB,MAAM,GAAG;gBACxB7D,MAAMf,cAAcK,KAAK,CAACkG,eAAe;YAC3C;YAEAL,iBAAiBvB,cAAc,GAAG;gBAChC5D,MAAMf,cAAcK,KAAK,CAACmG,uBAAuB;YACnD;QACF;QAEA,MAAMpB,eAAe;YACnBrE,MAAM1B,iBAAiB;gBACrB0B,MAAMwE,gBAAgB,IAAIpH,YAAY,IAAIC,eAAe2C,SAASA;gBAClExB;gBACAQ;gBACAG;YACF;YACA2C,MAAMqD;YACNnC,YAAY;gBACVC,YAAY,OAAOzE,OAAOoC,SAASqC,eAAe,WAAWzE,MAAMoC,OAAO,CAACqC,UAAU,GAAG;YAC1F;YACA,MAAMtE,SAAQC,MAAM,EAAEkD,IAAI,EAAEC,OAAgB;gBAC1C,MAAMkD,QAAQrG,MAAM,CAACJ,MAAME,IAAI,CAAC;gBAChC,MAAMmF,SAAS/B,KAAK+B,MAAM,IAAI9B,QAAQmB,GAAG,CAACW,MAAM;gBAChD,MAAMD,iBAAiB9B,KAAK8B,cAAc,IAAI7B,QAAQmB,GAAG,CAACU,cAAc;gBACxE,IAAI8B,wBAAwBlH,MAAM8F,UAAU;gBAC5C,MAAMnB,QAAQC,QAAQtB,KAAKqB,KAAK,IAAIpB,QAAQmB,GAAG,CAACG,KAAK,EAAEF;gBAEvD,IAAIqB,eAAe;oBACjB,MAAMmB,UAAU,EAAE;oBAClB,MAAMC,iBAAiB,EAAE;oBAEzB,MAAMC,0BAA0B,OAAOC,YAAYC;wBACjD,IAAI9D,KAAK6D;wBACT,IAAIE,iBAAiBxH,MAAM8F,UAAU;wBAErC,IAAIC,4BAA4B;4BAC9ByB,iBAAiBF,WAAWxB,UAAU;4BACtCrC,KAAK6D,WAAWb,KAAK;wBACvB;wBAEA,MAAMkB,SAAS,MAAMpE,QAAQmB,GAAG,CAACkD,iBAAiB,CAACC,IAAI,CACrDzI,yBAAyB;4BACvBoI;4BACAM,cAAc;4BACd3C,OAAO;4BACP4C,OAAOtE;4BACPkB;4BACAS;4BACAC;4BACAC,gBAAgB;4BAChB0C,kBAAkB;4BAClBC,eAAe1E,QAAQmB,GAAG,CAACuD,aAAa;wBAC1C;wBAGF,IAAIN,QAAQ;4BACV,IAAI5B,4BAA4B;gCAC9BoB,OAAO,CAACI,EAAE,GAAG;oCACXzB,YAAY0B;oCACZf,OAAO;wCACL,GAAGkB,MAAM;wCACT3D,YAAYwD;oCACd;gCACF;4BACF,OAAO;gCACLL,OAAO,CAACI,EAAE,GAAGI;4BACf;wBACF;oBACF;oBAEA,IAAIlB,OAAO;wBACTA,MAAMyB,OAAO,CAAC,CAACZ,YAAYC;4BACzBH,eAAe9E,IAAI,CAAC+E,wBAAwBC,YAAYC;wBAC1D;oBACF;oBAEA,MAAMY,QAAQC,GAAG,CAAChB;oBAClB,OAAOD;gBACT;gBAEA,IAAI1D,KAAKgD;gBACT,IAAIV,8BAA8BU,OAAO;oBACvChD,KAAKgD,MAAMA,KAAK;oBAChBS,wBAAwBT,MAAMX,UAAU;gBAC1C;gBAEA,IAAIrC,IAAI;oBACN,MAAM4E,kBAAkB,MAAM9E,QAAQmB,GAAG,CAACkD,iBAAiB,CAACC,IAAI,CAC9DzI,yBAAyB;wBACvBoI,gBAAgBN;wBAChBY,cAAc;wBACd3C,OAAO;wBACP4C,OAAOtE;wBACPkB;wBACAS;wBACAC;wBACAC,gBAAgB;wBAChB0C,kBAAkB;wBAClBC,eAAe1E,QAAQmB,GAAG,CAACuD,aAAa;oBAC1C;oBAGF,IAAII,iBAAiB;wBACnB,IAAItC,4BAA4B;4BAC9B,OAAO;gCACLD,YAAYoB;gCACZT,OAAO;oCACL,GAAG4B,eAAe;oCAClBrE,YAAYkD;gCACd;4BACF;wBACF;wBAEA,OAAOmB;oBACT;oBAEA,OAAO;gBACT;gBAEA,OAAO;YACT;QACF;QAEA,OAAO;YACL,GAAG3H,gBAAgB;YACnB,CAAChB,WAAWM,MAAME,IAAI,EAAE,EAAE2F;QAC5B;IACF;AACF,EAAC"}