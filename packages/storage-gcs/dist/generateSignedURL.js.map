{"version":3,"sources":["../src/generateSignedURL.ts"],"sourcesContent":["import type { Storage } from '@google-cloud/storage'\nimport type { ClientUploadsAccess } from '@payloadcms/plugin-cloud-storage/types'\nimport type { PayloadHandler } from 'payload'\n\nimport path from 'path'\nimport { APIError, Forbidden } from 'payload'\n\nimport type { GcsStorageOptions } from './index.js'\n\ninterface Args {\n  access?: ClientUploadsAccess\n  acl?: 'private' | 'public-read'\n  bucket: string\n  collections: GcsStorageOptions['collections']\n  getStorageClient: () => Storage\n}\n\nconst defaultAccess: Args['access'] = ({ req }) => !!req.user\n\nexport const getGenerateSignedURLHandler = ({\n  access = defaultAccess,\n  bucket,\n  collections,\n  getStorageClient,\n}: Args): PayloadHandler => {\n  return async (req) => {\n    if (!req.json) {\n      throw new APIError('Unreachable')\n    }\n\n    const { collectionSlug, filename, mimeType } = await req.json()\n\n    const collectionS3Config = collections[collectionSlug]\n    if (!collectionS3Config) {\n      throw new APIError(`Collection ${collectionSlug} was not found in S3 options`)\n    }\n\n    const prefix = (typeof collectionS3Config === 'object' && collectionS3Config.prefix) || ''\n\n    if (!(await access({ collectionSlug, req }))) {\n      throw new Forbidden()\n    }\n\n    const fileKey = path.posix.join(prefix, filename)\n\n    const [url] = await getStorageClient()\n      .bucket(bucket)\n      .file(fileKey)\n      .getSignedUrl({\n        action: 'write',\n        contentType: mimeType,\n        expires: Date.now() + 60 * 60 * 5,\n        version: 'v4',\n      })\n\n    return Response.json({ url })\n  }\n}\n"],"names":["path","APIError","Forbidden","defaultAccess","req","user","getGenerateSignedURLHandler","access","bucket","collections","getStorageClient","json","collectionSlug","filename","mimeType","collectionS3Config","prefix","fileKey","posix","join","url","file","getSignedUrl","action","contentType","expires","Date","now","version","Response"],"mappings":"AAIA,OAAOA,UAAU,OAAM;AACvB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,UAAS;AAY7C,MAAMC,gBAAgC,CAAC,EAAEC,GAAG,EAAE,GAAK,CAAC,CAACA,IAAIC,IAAI;AAE7D,OAAO,MAAMC,8BAA8B,CAAC,EAC1CC,SAASJ,aAAa,EACtBK,MAAM,EACNC,WAAW,EACXC,gBAAgB,EACX;IACL,OAAO,OAAON;QACZ,IAAI,CAACA,IAAIO,IAAI,EAAE;YACb,MAAM,IAAIV,SAAS;QACrB;QAEA,MAAM,EAAEW,cAAc,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAG,MAAMV,IAAIO,IAAI;QAE7D,MAAMI,qBAAqBN,WAAW,CAACG,eAAe;QACtD,IAAI,CAACG,oBAAoB;YACvB,MAAM,IAAId,SAAS,CAAC,WAAW,EAAEW,eAAe,4BAA4B,CAAC;QAC/E;QAEA,MAAMI,SAAS,AAAC,OAAOD,uBAAuB,YAAYA,mBAAmBC,MAAM,IAAK;QAExF,IAAI,CAAE,MAAMT,OAAO;YAAEK;YAAgBR;QAAI,IAAK;YAC5C,MAAM,IAAIF;QACZ;QAEA,MAAMe,UAAUjB,KAAKkB,KAAK,CAACC,IAAI,CAACH,QAAQH;QAExC,MAAM,CAACO,IAAI,GAAG,MAAMV,mBACjBF,MAAM,CAACA,QACPa,IAAI,CAACJ,SACLK,YAAY,CAAC;YACZC,QAAQ;YACRC,aAAaV;YACbW,SAASC,KAAKC,GAAG,KAAK,KAAK,KAAK;YAChCC,SAAS;QACX;QAEF,OAAOC,SAASlB,IAAI,CAAC;YAAES;QAAI;IAC7B;AACF,EAAC"}