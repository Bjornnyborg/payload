{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { StorageOptions } from '@google-cloud/storage'\nimport type {\n  Adapter,\n  ClientUploadsConfig,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { Config, Plugin, UploadCollectionSlug } from 'payload'\n\nimport { Storage } from '@google-cloud/storage'\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\nimport { initClientUploads } from '@payloadcms/plugin-cloud-storage/utilities'\n\nimport { getGenerateSignedURLHandler } from './generateSignedURL.js'\nimport { getGenerateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\n\nexport interface GcsStorageOptions {\n  acl?: 'Private' | 'Public'\n\n  /**\n   * The name of the bucket to use.\n   */\n  bucket: string\n  /**\n   * Do uploads directly on the client to bypass limits on Vercel. You must allow CORS PUT method for the bucket to your website.\n   */\n  clientUploads?: ClientUploadsConfig\n  /**\n   * Collection options to apply the S3 adapter to.\n   */\n  collections: Partial<Record<UploadCollectionSlug, Omit<CollectionOptions, 'adapter'> | true>>\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n\n  /**\n   * Google Cloud Storage client configuration.\n   *\n   * @see https://github.com/googleapis/nodejs-storage\n   */\n  options: StorageOptions\n}\n\ntype GcsStoragePlugin = (gcsStorageArgs: GcsStorageOptions) => Plugin\n\nexport const gcsStorage: GcsStoragePlugin =\n  (gcsStorageOptions: GcsStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    let storageClient: null | Storage = null\n\n    const getStorageClient = (): Storage => {\n      if (storageClient) {\n        return storageClient\n      }\n      storageClient = new Storage(gcsStorageOptions.options)\n\n      return storageClient\n    }\n\n    const adapter = gcsStorageInternal(getStorageClient, gcsStorageOptions)\n\n    const isPluginDisabled = gcsStorageOptions.enabled === false\n\n    initClientUploads({\n      clientHandler: '@payloadcms/storage-gcs/client#GcsClientUploadHandler',\n      collections: gcsStorageOptions.collections,\n      config: incomingConfig,\n      enabled: !isPluginDisabled && Boolean(gcsStorageOptions.clientUploads),\n      serverHandler: getGenerateSignedURLHandler({\n        access:\n          typeof gcsStorageOptions.clientUploads === 'object'\n            ? gcsStorageOptions.clientUploads.access\n            : undefined,\n        bucket: gcsStorageOptions.bucket,\n        collections: gcsStorageOptions.collections,\n        getStorageClient,\n      }),\n      serverHandlerPath: '/storage-gcs-generate-signed-url',\n    })\n\n    if (isPluginDisabled) {\n      return incomingConfig\n    }\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      gcsStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction gcsStorageInternal(\n  getStorageClient: () => Storage,\n  { acl, bucket, clientUploads }: GcsStorageOptions,\n): Adapter {\n  return ({ collection, prefix }): GeneratedAdapter => {\n    return {\n      name: 'gcs',\n      clientUploads,\n      generateURL: getGenerateURL({ bucket, getStorageClient }),\n      handleDelete: getHandleDelete({ bucket, getStorageClient }),\n      handleUpload: getHandleUpload({\n        acl,\n        bucket,\n        collection,\n        getStorageClient,\n        prefix,\n      }),\n      staticHandler: getHandler({ bucket, collection, getStorageClient }),\n    }\n  }\n}\n"],"names":["Storage","cloudStoragePlugin","initClientUploads","getGenerateSignedURLHandler","getGenerateURL","getHandleDelete","getHandleUpload","getHandler","gcsStorage","gcsStorageOptions","incomingConfig","storageClient","getStorageClient","options","adapter","gcsStorageInternal","isPluginDisabled","enabled","clientHandler","collections","config","Boolean","clientUploads","serverHandler","access","undefined","bucket","serverHandlerPath","collectionsWithAdapter","Object","entries","reduce","acc","slug","collOptions","map","collection","upload","disableLocalStorage","acl","prefix","name","generateURL","handleDelete","handleUpload","staticHandler"],"mappings":"AAUA,SAASA,OAAO,QAAQ,wBAAuB;AAC/C,SAASC,kBAAkB,QAAQ,mCAAkC;AACrE,SAASC,iBAAiB,QAAQ,6CAA4C;AAE9E,SAASC,2BAA2B,QAAQ,yBAAwB;AACpE,SAASC,cAAc,QAAQ,mBAAkB;AACjD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,UAAU,QAAQ,qBAAoB;AAkC/C,OAAO,MAAMC,aACX,CAACC,oBACD,CAACC;QACC,IAAIC,gBAAgC;QAEpC,MAAMC,mBAAmB;YACvB,IAAID,eAAe;gBACjB,OAAOA;YACT;YACAA,gBAAgB,IAAIX,QAAQS,kBAAkBI,OAAO;YAErD,OAAOF;QACT;QAEA,MAAMG,UAAUC,mBAAmBH,kBAAkBH;QAErD,MAAMO,mBAAmBP,kBAAkBQ,OAAO,KAAK;QAEvDf,kBAAkB;YAChBgB,eAAe;YACfC,aAAaV,kBAAkBU,WAAW;YAC1CC,QAAQV;YACRO,SAAS,CAACD,oBAAoBK,QAAQZ,kBAAkBa,aAAa;YACrEC,eAAepB,4BAA4B;gBACzCqB,QACE,OAAOf,kBAAkBa,aAAa,KAAK,WACvCb,kBAAkBa,aAAa,CAACE,MAAM,GACtCC;gBACNC,QAAQjB,kBAAkBiB,MAAM;gBAChCP,aAAaV,kBAAkBU,WAAW;gBAC1CP;YACF;YACAe,mBAAmB;QACrB;QAEA,IAAIX,kBAAkB;YACpB,OAAON;QACT;QAEA,+CAA+C;QAC/C,MAAMkB,yBAAmEC,OAAOC,OAAO,CACrFrB,kBAAkBU,WAAW,EAC7BY,MAAM,CACN,CAACC,KAAK,CAACC,MAAMC,YAAY,GAAM,CAAA;gBAC7B,GAAGF,GAAG;gBACN,CAACC,KAAK,EAAE;oBACN,GAAIC,gBAAgB,OAAO,CAAC,IAAIA,WAAW;oBAC3CpB;gBACF;YACF,CAAA,GACA,CAAC;QAGH,gFAAgF;QAChF,MAAMM,SAAS;YACb,GAAGV,cAAc;YACjBS,aAAa,AAACT,CAAAA,eAAeS,WAAW,IAAI,EAAE,AAAD,EAAGgB,GAAG,CAAC,CAACC;gBACnD,IAAI,CAACR,sBAAsB,CAACQ,WAAWH,IAAI,CAAC,EAAE;oBAC5C,OAAOG;gBACT;gBAEA,OAAO;oBACL,GAAGA,UAAU;oBACbC,QAAQ;wBACN,GAAI,OAAOD,WAAWC,MAAM,KAAK,WAAWD,WAAWC,MAAM,GAAG,CAAC,CAAC;wBAClEC,qBAAqB;oBACvB;gBACF;YACF;QACF;QAEA,OAAOrC,mBAAmB;YACxBkB,aAAaS;QACf,GAAGR;IACL,EAAC;AAEH,SAASL,mBACPH,gBAA+B,EAC/B,EAAE2B,GAAG,EAAEb,MAAM,EAAEJ,aAAa,EAAqB;IAEjD,OAAO,CAAC,EAAEc,UAAU,EAAEI,MAAM,EAAE;QAC5B,OAAO;YACLC,MAAM;YACNnB;YACAoB,aAAatC,eAAe;gBAAEsB;gBAAQd;YAAiB;YACvD+B,cAActC,gBAAgB;gBAAEqB;gBAAQd;YAAiB;YACzDgC,cAActC,gBAAgB;gBAC5BiC;gBACAb;gBACAU;gBACAxB;gBACA4B;YACF;YACAK,eAAetC,WAAW;gBAAEmB;gBAAQU;gBAAYxB;YAAiB;QACnE;IACF;AACF"}