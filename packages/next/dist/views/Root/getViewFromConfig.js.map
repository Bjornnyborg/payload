{"version":3,"file":"getViewFromConfig.js","names":["formatAdminURL","Account","CreateFirstUserView","Dashboard","Document","DocumentView","forgotPasswordBaseClass","ForgotPasswordView","ListView","loginBaseClass","LoginView","LogoutInactivity","LogoutView","ResetPassword","resetPasswordBaseClass","UnauthorizedView","Verify","verifyBaseClass","attachViewActions","getViewActions","getCustomViewByRoute","getDocumentViewInfo","isPathMatchingRoute","baseClasses","account","forgot","login","reset","verify","oneSegmentViews","createFirstUser","inactivity","logout","unauthorized","getViewFromConfig","adminRoute","config","currentRoute","importMap","searchParams","segments","ViewToRender","templateClassName","templateType","documentSubViewType","viewType","initPageOptions","route","segmentOne","segmentTwo","segmentThree","segmentFour","segmentFive","isGlobal","isCollection","matchedCollection","undefined","matchedGlobal","serverProps","viewActions","admin","components","actions","collections","find","slug","collectionConfig","globals","globalConfig","length","Component","viewKey","routes","matchedRoute","Object","entries","exact","path","concat","views","list","editConfig","edit","viewInfo","collectionOrGlobal","viewKeyArg","view","reverse","DefaultView"],"sources":["../../../src/views/Root/getViewFromConfig.ts"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  DocumentSubViewTypes,\n  ImportMap,\n  PayloadComponent,\n  SanitizedConfig,\n  ServerPropsFromView,\n  ViewTypes,\n} from 'payload'\nimport type React from 'react'\n\nimport { formatAdminURL } from 'payload/shared'\n\nimport type { initPage } from '../../utilities/initPage/index.js'\n\nimport { Account } from '../Account/index.js'\nimport { CreateFirstUserView } from '../CreateFirstUser/index.js'\nimport { Dashboard } from '../Dashboard/index.js'\nimport { Document as DocumentView } from '../Document/index.js'\nimport { forgotPasswordBaseClass, ForgotPasswordView } from '../ForgotPassword/index.js'\nimport { ListView } from '../List/index.js'\nimport { loginBaseClass, LoginView } from '../Login/index.js'\nimport { LogoutInactivity, LogoutView } from '../Logout/index.js'\nimport { ResetPassword, resetPasswordBaseClass } from '../ResetPassword/index.js'\nimport { UnauthorizedView } from '../Unauthorized/index.js'\nimport { Verify, verifyBaseClass } from '../Verify/index.js'\nimport { attachViewActions, getViewActions } from './attachViewActions.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\nimport { getDocumentViewInfo } from './getDocumentViewInfo.js'\nimport { isPathMatchingRoute } from './isPathMatchingRoute.js'\n\nconst baseClasses = {\n  account: 'account',\n  forgot: forgotPasswordBaseClass,\n  login: loginBaseClass,\n  reset: resetPasswordBaseClass,\n  verify: verifyBaseClass,\n}\n\ntype OneSegmentViews = {\n  [K in Exclude<keyof SanitizedConfig['admin']['routes'], 'reset'>]: React.FC<AdminViewServerProps>\n}\n\nexport type ViewFromConfig = {\n  Component?: React.FC<AdminViewServerProps>\n  payloadComponent?: PayloadComponent<AdminViewServerProps>\n}\n\nconst oneSegmentViews: OneSegmentViews = {\n  account: Account,\n  createFirstUser: CreateFirstUserView,\n  forgot: ForgotPasswordView,\n  inactivity: LogoutInactivity,\n  login: LoginView,\n  logout: LogoutView,\n  unauthorized: UnauthorizedView,\n}\n\ntype GetViewFromConfigArgs = {\n  adminRoute: string\n  config: SanitizedConfig\n  currentRoute: string\n  importMap: ImportMap\n  searchParams: {\n    [key: string]: string | string[]\n  }\n  segments: string[]\n}\n\ntype GetViewFromConfigResult = {\n  DefaultView: ViewFromConfig\n  documentSubViewType?: DocumentSubViewTypes\n  initPageOptions: Parameters<typeof initPage>[0]\n  serverProps: ServerPropsFromView\n  templateClassName: string\n  templateType: 'default' | 'minimal'\n  viewType?: ViewTypes\n}\n\nexport const getViewFromConfig = ({\n  adminRoute,\n  config,\n  currentRoute,\n  importMap,\n  searchParams,\n  segments,\n}: GetViewFromConfigArgs): GetViewFromConfigResult => {\n  let ViewToRender: ViewFromConfig = null\n  let templateClassName: string\n  let templateType: 'default' | 'minimal' | undefined\n  let documentSubViewType: DocumentSubViewTypes\n  let viewType: ViewTypes\n\n  const initPageOptions: Parameters<typeof initPage>[0] = {\n    config,\n    importMap,\n    route: currentRoute,\n    searchParams,\n  }\n\n  const [segmentOne, segmentTwo, segmentThree, segmentFour, segmentFive] = segments\n\n  const isGlobal = segmentOne === 'globals'\n  const isCollection = segmentOne === 'collections'\n  let matchedCollection: SanitizedConfig['collections'][number] = undefined\n  let matchedGlobal: SanitizedConfig['globals'][number] = undefined\n\n  const serverProps: ServerPropsFromView = {\n    viewActions: config?.admin?.components?.actions || [],\n  }\n\n  if (isCollection) {\n    matchedCollection = config.collections.find(({ slug }) => slug === segmentTwo)\n    serverProps.collectionConfig = matchedCollection\n  }\n\n  if (isGlobal) {\n    matchedGlobal = config.globals.find(({ slug }) => slug === segmentTwo)\n    serverProps.globalConfig = matchedGlobal\n  }\n\n  switch (segments.length) {\n    case 0: {\n      if (currentRoute === adminRoute) {\n        ViewToRender = {\n          Component: Dashboard,\n        }\n        templateClassName = 'dashboard'\n        templateType = 'default'\n        viewType = 'dashboard'\n      }\n      break\n    }\n    case 1: {\n      // users can override the default routes via `admin.routes` config\n      // i.e.{ admin: { routes: { logout: '/sign-out', inactivity: '/idle' }}}\n      let viewKey: keyof typeof oneSegmentViews\n\n      if (config.admin.routes) {\n        const matchedRoute = Object.entries(config.admin.routes).find(([, route]) => {\n          return isPathMatchingRoute({\n            currentRoute,\n            exact: true,\n            path: formatAdminURL({ adminRoute, path: route }),\n          })\n        })\n\n        if (matchedRoute) {\n          viewKey = matchedRoute[0] as keyof typeof oneSegmentViews\n        }\n      }\n\n      if (oneSegmentViews[viewKey]) {\n        // --> /account\n        // --> /create-first-user\n        // --> /forgot\n        // --> /login\n        // --> /logout\n        // --> /logout-inactivity\n        // --> /unauthorized\n\n        ViewToRender = {\n          Component: oneSegmentViews[viewKey],\n        }\n\n        templateClassName = baseClasses[viewKey]\n        templateType = 'minimal'\n\n        if (viewKey === 'account') {\n          templateType = 'default'\n          viewType = 'account'\n        }\n      }\n      break\n    }\n    case 2: {\n      if (`/${segmentOne}` === config.admin.routes.reset) {\n        // --> /reset/:token\n        ViewToRender = {\n          Component: ResetPassword,\n        }\n        templateClassName = baseClasses[segmentTwo]\n        templateType = 'minimal'\n        viewType = 'reset'\n      }\n\n      if (isCollection && matchedCollection) {\n        // --> /collections/:collectionSlug\n\n        ViewToRender = {\n          Component: ListView,\n        }\n\n        templateClassName = `${segmentTwo}-list`\n        templateType = 'default'\n        viewType = 'list'\n        serverProps.viewActions = serverProps.viewActions.concat(\n          matchedCollection.admin.components?.views?.list?.actions,\n        )\n      } else if (isGlobal && matchedGlobal) {\n        // --> /globals/:globalSlug\n\n        ViewToRender = {\n          Component: DocumentView,\n        }\n\n        templateClassName = 'global-edit'\n        templateType = 'default'\n        viewType = 'document'\n\n        // add default view actions\n        serverProps.viewActions = serverProps.viewActions.concat(\n          getViewActions({\n            editConfig: matchedGlobal.admin?.components?.views?.edit,\n            viewKey: 'default',\n          }),\n        )\n      }\n      break\n    }\n    default:\n      if (segmentTwo === 'verify') {\n        // --> /:collectionSlug/verify/:token\n        ViewToRender = {\n          Component: Verify,\n        }\n\n        templateClassName = 'verify'\n        templateType = 'minimal'\n        viewType = 'verify'\n      } else if (isCollection && matchedCollection) {\n        // Custom Views\n        // --> /collections/:collectionSlug/:id\n        // --> /collections/:collectionSlug/:id/api\n        // --> /collections/:collectionSlug/:id/preview\n        // --> /collections/:collectionSlug/:id/versions\n        // --> /collections/:collectionSlug/:id/versions/:versionID\n\n        ViewToRender = {\n          Component: DocumentView,\n        }\n\n        templateClassName = `collection-default-edit`\n        templateType = 'default'\n\n        const viewInfo = getDocumentViewInfo([segmentFour, segmentFive])\n        viewType = viewInfo.viewType\n        documentSubViewType = viewInfo.documentSubViewType\n\n        attachViewActions({\n          collectionOrGlobal: matchedCollection,\n          serverProps,\n          viewKeyArg: documentSubViewType,\n        })\n      } else if (isGlobal && matchedGlobal) {\n        // Custom Views\n        // --> /globals/:globalSlug/versions\n        // --> /globals/:globalSlug/preview\n        // --> /globals/:globalSlug/versions/:versionID\n        // --> /globals/:globalSlug/api\n\n        ViewToRender = {\n          Component: DocumentView,\n        }\n\n        templateClassName = `global-edit`\n        templateType = 'default'\n\n        const viewInfo = getDocumentViewInfo([segmentThree, segmentFour])\n        viewType = viewInfo.viewType\n        documentSubViewType = viewInfo.documentSubViewType\n\n        attachViewActions({\n          collectionOrGlobal: matchedGlobal,\n          serverProps,\n          viewKeyArg: documentSubViewType,\n        })\n      }\n      break\n  }\n\n  if (!ViewToRender) {\n    ViewToRender = getCustomViewByRoute({ config, currentRoute })?.view\n  }\n\n  serverProps.viewActions.reverse()\n\n  return {\n    DefaultView: ViewToRender,\n    documentSubViewType,\n    initPageOptions,\n    serverProps,\n    templateClassName,\n    templateType,\n    viewType,\n  }\n}\n"],"mappings":"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","ignoreList":[]}