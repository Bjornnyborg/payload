{"version":3,"file":"getViewsFromConfig.js","names":["APIView","DefaultAPIView","EditView","DefaultEditView","LivePreviewView","DefaultLivePreviewView","UnauthorizedView","VersionView","DefaultVersionView","VersionsView","DefaultVersionsView","getCustomViewByKey","getCustomViewByRoute","getViewsFromConfig","collectionConfig","config","docPermissions","globalConfig","overrideDocPermissions","routeSegments","DefaultView","CustomView","ErrorView","viewKey","routes","admin","adminRoute","views","components","livePreviewEnabled","livePreview","collections","includes","slug","globals","collectionEntity","collectionSlug","segment3","segment4","segment5","remainingSegments","read","Error","length","create","ComponentConfig","Component","baseRoute","filter","Boolean","join","currentRoute","CustomViewComponent","customViewKey","hideAPIURL","readVersions","globalEntity","globalSlug"],"sources":["../../../src/views/Document/getViewsFromConfig.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  DocumentViewServerProps,\n  PayloadComponent,\n  SanitizedCollectionConfig,\n  SanitizedCollectionPermission,\n  SanitizedConfig,\n  SanitizedGlobalConfig,\n  SanitizedGlobalPermission,\n} from 'payload'\nimport type React from 'react'\n\nimport { APIView as DefaultAPIView } from '../API/index.js'\nimport { EditView as DefaultEditView } from '../Edit/index.js'\nimport { LivePreviewView as DefaultLivePreviewView } from '../LivePreview/index.js'\nimport { UnauthorizedView } from '../Unauthorized/index.js'\nimport { VersionView as DefaultVersionView } from '../Version/index.js'\nimport { VersionsView as DefaultVersionsView } from '../Versions/index.js'\nimport { getCustomViewByKey } from './getCustomViewByKey.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\n\nexport type ViewFromConfig<TProps extends object> = {\n  Component?: React.FC<TProps>\n  ComponentConfig?: PayloadComponent<TProps>\n}\n\nexport const getViewsFromConfig = ({\n  collectionConfig,\n  config,\n  docPermissions,\n  globalConfig,\n  overrideDocPermissions,\n  routeSegments,\n}: {\n  collectionConfig?: SanitizedCollectionConfig\n  config: SanitizedConfig\n  globalConfig?: SanitizedGlobalConfig\n  routeSegments: string[]\n} & (\n  | {\n      docPermissions: SanitizedCollectionPermission | SanitizedGlobalPermission\n      overrideDocPermissions?: false | undefined\n    }\n  | {\n      docPermissions?: never\n      overrideDocPermissions: true\n    }\n)): {\n  CustomView: ViewFromConfig<DocumentViewServerProps>\n  DefaultView: ViewFromConfig<DocumentViewServerProps>\n  /**\n   * The error view to display if CustomView or DefaultView do not exist (could be either due to not found, or unauthorized). Can be null\n   */\n  ErrorView: ViewFromConfig<AdminViewServerProps>\n  viewKey: string\n} | null => {\n  // Conditionally import and lazy load the default view\n  let DefaultView: ViewFromConfig<DocumentViewServerProps> = null\n  let CustomView: ViewFromConfig<DocumentViewServerProps> = null\n  let ErrorView: ViewFromConfig<AdminViewServerProps> = null\n  let viewKey: string\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  const views =\n    (collectionConfig && collectionConfig?.admin?.components?.views) ||\n    (globalConfig && globalConfig?.admin?.components?.views)\n\n  const livePreviewEnabled =\n    (collectionConfig && collectionConfig?.admin?.livePreview) ||\n    config?.admin?.livePreview?.collections?.includes(collectionConfig?.slug) ||\n    (globalConfig && globalConfig?.admin?.livePreview) ||\n    config?.admin?.livePreview?.globals?.includes(globalConfig?.slug)\n\n  if (collectionConfig) {\n    const [collectionEntity, collectionSlug, segment3, segment4, segment5, ...remainingSegments] =\n      routeSegments\n\n    if (!overrideDocPermissions && !docPermissions?.read) {\n      throw new Error('not-found')\n    } else {\n      // `../:id`, or `../create`\n      switch (routeSegments.length) {\n        case 3: {\n          switch (segment3) {\n            case 'create': {\n              if (!overrideDocPermissions && 'create' in docPermissions && docPermissions.create) {\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'default'),\n                }\n                DefaultView = {\n                  Component: DefaultEditView,\n                }\n              } else {\n                ErrorView = {\n                  Component: UnauthorizedView,\n                }\n              }\n              break\n            }\n\n            default: {\n              const baseRoute = [\n                adminRoute !== '/' && adminRoute,\n                'collections',\n                collectionSlug,\n                segment3,\n              ]\n                .filter(Boolean)\n                .join('/')\n\n              const currentRoute = [baseRoute, segment4, segment5, ...remainingSegments]\n                .filter(Boolean)\n                .join('/')\n\n              const { Component: CustomViewComponent, viewKey: customViewKey } =\n                getCustomViewByRoute({\n                  baseRoute,\n                  currentRoute,\n                  views,\n                })\n\n              if (customViewKey) {\n                viewKey = customViewKey\n\n                CustomView = {\n                  ComponentConfig: CustomViewComponent,\n                }\n              } else {\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'default'),\n                }\n\n                DefaultView = {\n                  Component: DefaultEditView,\n                }\n              }\n\n              break\n            }\n          }\n          break\n        }\n\n        // `../:id/api`, `../:id/preview`, `../:id/versions`, etc\n        case 4: {\n          switch (segment4) {\n            case 'api': {\n              if (collectionConfig?.admin?.hideAPIURL !== true) {\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'api'),\n                }\n                DefaultView = {\n                  Component: DefaultAPIView,\n                }\n              }\n              break\n            }\n\n            case 'preview': {\n              if (livePreviewEnabled) {\n                DefaultView = {\n                  Component: DefaultLivePreviewView,\n                }\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'livePreview'),\n                }\n              }\n              break\n            }\n\n            case 'versions': {\n              if (!overrideDocPermissions && docPermissions?.readVersions) {\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'versions'),\n                }\n                DefaultView = {\n                  Component: DefaultVersionsView,\n                }\n              } else {\n                ErrorView = {\n                  Component: UnauthorizedView,\n                }\n              }\n              break\n            }\n\n            default: {\n              const baseRoute = [\n                adminRoute !== '/' && adminRoute,\n                'collections',\n                collectionSlug,\n                segment3,\n              ]\n                .filter(Boolean)\n                .join('/')\n\n              const currentRoute = [baseRoute, segment4, segment5, ...remainingSegments]\n                .filter(Boolean)\n                .join('/')\n\n              const { Component: CustomViewComponent, viewKey: customViewKey } =\n                getCustomViewByRoute({\n                  baseRoute,\n                  currentRoute,\n                  views,\n                })\n\n              if (customViewKey) {\n                viewKey = customViewKey\n\n                CustomView = {\n                  ComponentConfig: CustomViewComponent,\n                }\n              }\n\n              break\n            }\n          }\n          break\n        }\n\n        // `../:id/versions/:version`, etc\n        default: {\n          if (segment4 === 'versions') {\n            if (!overrideDocPermissions && docPermissions?.readVersions) {\n              CustomView = {\n                ComponentConfig: getCustomViewByKey(views, 'version'),\n              }\n              DefaultView = {\n                Component: DefaultVersionView,\n              }\n            } else {\n              ErrorView = {\n                Component: UnauthorizedView,\n              }\n            }\n          } else {\n            const baseRoute = [\n              adminRoute !== '/' && adminRoute,\n              collectionEntity,\n              collectionSlug,\n              segment3,\n            ]\n              .filter(Boolean)\n              .join('/')\n\n            const currentRoute = [baseRoute, segment4, segment5, ...remainingSegments]\n              .filter(Boolean)\n              .join('/')\n\n            const { Component: CustomViewComponent, viewKey: customViewKey } = getCustomViewByRoute(\n              {\n                baseRoute,\n                currentRoute,\n                views,\n              },\n            )\n\n            if (customViewKey) {\n              viewKey = customViewKey\n\n              CustomView = {\n                ComponentConfig: CustomViewComponent,\n              }\n            }\n          }\n\n          break\n        }\n      }\n    }\n  }\n\n  if (globalConfig) {\n    const [globalEntity, globalSlug, segment3, ...remainingSegments] = routeSegments\n\n    if (!overrideDocPermissions && !docPermissions?.read) {\n      throw new Error('not-found')\n    } else {\n      switch (routeSegments.length) {\n        case 2: {\n          CustomView = {\n            ComponentConfig: getCustomViewByKey(views, 'default'),\n          }\n          DefaultView = {\n            Component: DefaultEditView,\n          }\n          break\n        }\n\n        case 3: {\n          // `../:slug/api`, `../:slug/preview`, `../:slug/versions`, etc\n          switch (segment3) {\n            case 'api': {\n              if (globalConfig?.admin?.hideAPIURL !== true) {\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'api'),\n                }\n                DefaultView = {\n                  Component: DefaultAPIView,\n                }\n              }\n              break\n            }\n\n            case 'preview': {\n              if (livePreviewEnabled) {\n                DefaultView = {\n                  Component: DefaultLivePreviewView,\n                }\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'livePreview'),\n                }\n              }\n              break\n            }\n\n            case 'versions': {\n              if (!overrideDocPermissions && docPermissions?.readVersions) {\n                CustomView = {\n                  ComponentConfig: getCustomViewByKey(views, 'versions'),\n                }\n\n                DefaultView = {\n                  Component: DefaultVersionsView,\n                }\n              } else {\n                ErrorView = {\n                  Component: UnauthorizedView,\n                }\n              }\n              break\n            }\n\n            default: {\n              if (!overrideDocPermissions && docPermissions?.read) {\n                const baseRoute = [adminRoute, globalEntity, globalSlug, segment3]\n                  .filter(Boolean)\n                  .join('/')\n\n                const currentRoute = [baseRoute, segment3, ...remainingSegments]\n                  .filter(Boolean)\n                  .join('/')\n\n                const { Component: CustomViewComponent, viewKey: customViewKey } =\n                  getCustomViewByRoute({\n                    baseRoute,\n                    currentRoute,\n                    views,\n                  })\n\n                if (customViewKey) {\n                  viewKey = customViewKey\n\n                  CustomView = {\n                    ComponentConfig: CustomViewComponent,\n                  }\n                } else {\n                  DefaultView = {\n                    Component: DefaultEditView,\n                  }\n                }\n              } else {\n                ErrorView = {\n                  Component: UnauthorizedView,\n                }\n              }\n              break\n            }\n          }\n          break\n        }\n\n        default: {\n          // `../:slug/versions/:version`, etc\n          if (segment3 === 'versions') {\n            if (!overrideDocPermissions && docPermissions?.readVersions) {\n              CustomView = {\n                ComponentConfig: getCustomViewByKey(views, 'version'),\n              }\n              DefaultView = {\n                Component: DefaultVersionView,\n              }\n            } else {\n              ErrorView = {\n                Component: UnauthorizedView,\n              }\n            }\n          } else {\n            const baseRoute = [adminRoute !== '/' && adminRoute, 'globals', globalSlug]\n              .filter(Boolean)\n              .join('/')\n\n            const currentRoute = [baseRoute, segment3, ...remainingSegments]\n              .filter(Boolean)\n              .join('/')\n\n            const { Component: CustomViewComponent, viewKey: customViewKey } = getCustomViewByRoute(\n              {\n                baseRoute,\n                currentRoute,\n                views,\n              },\n            )\n\n            if (customViewKey) {\n              viewKey = customViewKey\n\n              CustomView = {\n                ComponentConfig: CustomViewComponent,\n              }\n            }\n          }\n\n          break\n        }\n      }\n    }\n  }\n\n  return {\n    CustomView,\n    DefaultView,\n    ErrorView,\n    viewKey,\n  }\n}\n"],"mappings":"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","ignoreList":[]}