{"version":3,"file":"index.js","names":["c","_c","getTranslation","FieldDiffLabel","useTranslation","React","diffStyles","DiffViewer","baseClass","getOptionsToRender","value","options","hasMany","Array","isArray","map","val","find","option","String","getTranslatedOptions","i18n","translatedLabel","label","join","Select","t0","$","comparisonValue","diffMethod","field","locale","versionValue","placeholder","t","t1","comparisonToRender","JSON","stringify","versionToRender","t2","_jsx","className","children","_jsxs"],"sources":["../../../../../../src/views/Version/RenderFieldsToDiff/fields/Select/index.tsx"],"sourcesContent":["'use client'\nimport type { I18nClient } from '@payloadcms/translations'\nimport type { Option, SelectField, SelectFieldDiffClientComponent } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { FieldDiffLabel, useTranslation } from '@payloadcms/ui'\nimport React from 'react'\n\nimport './index.scss'\nimport { diffStyles } from '../styles.js'\nimport { DiffViewer } from './DiffViewer/index.js'\n\nconst baseClass = 'select-diff'\n\nconst getOptionsToRender = (\n  value: string,\n  options: SelectField['options'],\n  hasMany: boolean,\n): Option | Option[] => {\n  if (hasMany && Array.isArray(value)) {\n    return value.map(\n      (val) =>\n        options.find((option) => (typeof option === 'string' ? option : option.value) === val) ||\n        String(val),\n    )\n  }\n  return (\n    options.find((option) => (typeof option === 'string' ? option : option.value) === value) ||\n    String(value)\n  )\n}\n\n/**\n * Translates option labels while ensuring they are strings.\n * If `options.label` is a JSX element, it falls back to `options.value` because `DiffViewer`\n * expects all values to be strings.\n */\nconst getTranslatedOptions = (options: Option | Option[], i18n: I18nClient): string => {\n  if (Array.isArray(options)) {\n    return options\n      .map((option) => {\n        if (typeof option === 'string') {\n          return option\n        }\n        const translatedLabel = getTranslation(option.label, i18n)\n\n        // Ensure the result is a string, otherwise use option.value\n        return typeof translatedLabel === 'string' ? translatedLabel : option.value\n      })\n      .join(', ')\n  }\n\n  if (typeof options === 'string') {\n    return options\n  }\n\n  const translatedLabel = getTranslation(options.label, i18n)\n\n  return typeof translatedLabel === 'string' ? translatedLabel : options.value\n}\n\nexport const Select: SelectFieldDiffClientComponent = ({\n  comparisonValue,\n  diffMethod,\n  field,\n  locale,\n  versionValue,\n}) => {\n  const { i18n } = useTranslation()\n\n  let placeholder = ''\n\n  if (versionValue == comparisonValue) {\n    placeholder = `[${i18n.t('general:noValue')}]`\n  }\n\n  const options = 'options' in field && field.options\n\n  const comparisonToRender =\n    typeof comparisonValue !== 'undefined'\n      ? getTranslatedOptions(\n          getOptionsToRender(\n            typeof comparisonValue === 'string' ? comparisonValue : JSON.stringify(comparisonValue),\n            options,\n            field.hasMany,\n          ),\n          i18n,\n        )\n      : placeholder\n\n  const versionToRender =\n    typeof versionValue !== 'undefined'\n      ? getTranslatedOptions(\n          getOptionsToRender(\n            typeof versionValue === 'string' ? versionValue : JSON.stringify(versionValue),\n            options,\n            field.hasMany,\n          ),\n          i18n,\n        )\n      : placeholder\n\n  return (\n    <div className={baseClass}>\n      <FieldDiffLabel>\n        {locale && <span className={`${baseClass}__locale-label`}>{locale}</span>}\n        {'label' in field && getTranslation(field.label || '', i18n)}\n      </FieldDiffLabel>\n      <DiffViewer\n        comparisonToRender={comparisonToRender}\n        diffMethod={diffMethod}\n        diffStyles={diffStyles}\n        placeholder={placeholder}\n        versionToRender={versionToRender}\n      />\n    </div>\n  )\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AAIA,SAASC,cAAc,QAAQ;AAC/B,SAASC,cAAc,EAAEC,cAAc,QAAQ;AAC/C,OAAOC,KAAA,MAAW;AAGlB,SAASC,UAAU,QAAQ;AAC3B,SAASC,UAAU,QAAQ;AAE3B,MAAMC,SAAA,GAAY;AAElB,MAAMC,kBAAA,GAAqBA,CACzBC,KAAA,EACAC,OAAA,EACAC,OAAA;EAEA,IAAIA,OAAA,IAAWC,KAAA,CAAMC,OAAO,CAACJ,KAAA,GAAQ;IACnC,OAAOA,KAAA,CAAMK,GAAG,CACbC,GAAA,IACCL,OAAA,CAAQM,IAAI,CAAEC,MAAA,IAAW,CAAC,OAAOA,MAAA,KAAW,WAAWA,MAAA,GAASA,MAAA,CAAOR,KAAK,MAAMM,GAAA,KAClFG,MAAA,CAAOH,GAAA;EAEb;EACA,OACEL,OAAA,CAAQM,IAAI,CAAEC,MAAA,IAAW,CAAC,OAAOA,MAAA,KAAW,WAAWA,MAAA,GAASA,MAAA,CAAOR,KAAK,MAAMA,KAAA,KAClFS,MAAA,CAAOT,KAAA;AAEX;AAEA;;;;;AAKA,MAAMU,oBAAA,GAAuBA,CAACT,OAAA,EAA4BU,IAAA;EACxD,IAAIR,KAAA,CAAMC,OAAO,CAACH,OAAA,GAAU;IAC1B,OAAOA,OAAA,CACJI,GAAG,CAAEG,MAAA;MACJ,IAAI,OAAOA,MAAA,KAAW,UAAU;QAC9B,OAAOA,MAAA;MACT;MACA,MAAMI,eAAA,GAAkBpB,cAAA,CAAegB,MAAA,CAAOK,KAAK,EAAEF,IAAA;MAErD;MACA,OAAO,OAAOC,eAAA,KAAoB,WAAWA,eAAA,GAAkBJ,MAAA,CAAOR,KAAK;IAC7E,GACCc,IAAI,CAAC;EACV;EAEA,IAAI,OAAOb,OAAA,KAAY,UAAU;IAC/B,OAAOA,OAAA;EACT;EAEA,MAAMW,eAAA,GAAkBpB,cAAA,CAAeS,OAAA,CAAQY,KAAK,EAAEF,IAAA;EAEtD,OAAO,OAAOC,eAAA,KAAoB,WAAWA,eAAA,GAAkBX,OAAA,CAAQD,KAAK;AAC9E;AAEA,OAAO,MAAMe,MAAA,GAAyCC,EAAA;EAAA,MAAAC,CAAA,GAAA1B,EAAA;EAAC;IAAA2B,eAAA;IAAAC,UAAA;IAAAC,KAAA;IAAAC,MAAA;IAAAC;EAAA,IAAAN,EAMtD;EACC;IAAAL;EAAA,IAAiBjB,cAAA;EAEjB,IAAA6B,WAAA,GAAkB;EAAA,IAEdD,YAAA,IAAgBJ,eAAA;IAClBK,WAAA,CAAAA,CAAA,CAAcA,IAAIZ,IAAA,CAAAa,CAAA,CAAO,qBAAqB;EAA9C;EAGF,MAAAvB,OAAA,GAAgB,aAAamB,KAAA,IAASA,KAAA,CAAAnB,OAAa;EAAA,IAAAwB,EAAA;EAAA,IAAAR,CAAA,QAAAC,eAAA,IAAAD,CAAA,QAAAE,UAAA,IAAAF,CAAA,QAAAG,KAAA,IAAAH,CAAA,QAAAN,IAAA,IAAAM,CAAA,QAAAI,MAAA,IAAAJ,CAAA,QAAAhB,OAAA,IAAAgB,CAAA,QAAAM,WAAA,IAAAN,CAAA,QAAAK,YAAA;IAEnD,MAAAI,kBAAA,GACE,OAAOR,eAAA,KAAoB,cACvBR,oBAAA,CACEX,kBAAA,CACE,OAAOmB,eAAA,KAAoB,WAAWA,eAAA,GAAkBS,IAAA,CAAAC,SAAA,CAAeV,eAAA,GACvEjB,OAAA,EACAmB,KAAA,CAAAlB,OAAa,GAEfS,IAAA,IAEFY,WAAA;IAEN,MAAAM,eAAA,GACE,OAAOP,YAAA,KAAiB,cACpBZ,oBAAA,CACEX,kBAAA,CACE,OAAOuB,YAAA,KAAiB,WAAWA,YAAA,GAAeK,IAAA,CAAAC,SAAA,CAAeN,YAAA,GACjErB,OAAA,EACAmB,KAAA,CAAAlB,OAAa,GAEfS,IAAA,IAEFY,WAAA;IAAA,IAAAO,EAAA;IAAA,IAAAb,CAAA,QAAAI,MAAA;MAKCS,EAAA,GAAAT,MAAA,IAAUU,IAAA,CAAC;QAAAC,SAAA,EAAgB,GAAAlC,SAAA,gBAA4B;QAAAmC,QAAA,EAAGZ;MAAA,C;;;;;;IAF/DI,EAAA,GAAAS,KAAA,CAAC;MAAAF,SAAA,EAAAlC,SAAA;MAAAmC,QAAA,GACCC,KAAA,CAAAzC,cAAA;QAAAwC,QAAA,GACGH,E,EACA,WAAWV,KAAA,IAAS5B,cAAA,CAAe4B,KAAA,CAAAP,KAAA,IAAe,IAAIF,IAAA;MAAA,C,GAEzDoB,IAAA,CAAAlC,UAAA;QAAA6B,kBAAA;QAAAP,UAAA;QAAAvB,UAAA;QAAA2B,WAAA;QAAAM;MAAA,C;;;;;;;;;;;;;;SALFJ,E;CAcJ","ignoreList":[]}