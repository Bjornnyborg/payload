{"version":3,"file":"buildVersionFields.js","names":["RenderServerComponent","dequal","MissingEditorProp","fieldIsID","fieldShouldBeLocalized","getUniqueListBy","tabHasName","diffMethods","diffComponents","getFieldPathsModified","buildVersionFields","clientSchemaMap","comparisonSiblingData","customDiffComponents","entitySlug","fieldPermissions","fields","i18n","modifiedOnly","parentIndexPath","parentIsLocalized","parentPath","parentSchemaPath","req","selectedLocales","versionSiblingData","versionFields","fieldIndex","field","indexPath","path","schemaPath","index","clientField","get","payload","logger","error","clientFieldKey","clientSchemaMapKeys","Array","from","keys","msg","Error","versionField","isLocalized","fieldName","name","versionValue","comparisonValue","fieldByLocale","locale","localizedVersionField","buildVersionField","baseVersionField","localized","push","diffMethod","type","hasPermission","read","subFieldPermissions","CustomComponent","editor","CellComponent","DiffComponent","admin","components","Diff","DefaultComponent","tabs","tabIndex","tab","isNamedTab","tabAsField","tabIndexPath","tabPath","tabSchemaPath","label","arrayValue","isArray","rows","i","length","comparisonRow","versionRow","blocksValue","blockSlugToMatch","blockType","versionBlock","blocks","blockReferences","find","block","slug","comparisonBlockSlugToMatch","comparisonBlock","clientCellProps","undefined","serverCellProps","clientProps","Component","Fallback","importMap","key","serverProps"],"sources":["../../../../src/views/Version/RenderFieldsToDiff/buildVersionFields.tsx"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type { DiffMethod } from 'react-diff-viewer-continued'\n\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { dequal } from 'dequal/lite'\nimport {\n  type BaseVersionField,\n  type ClientField,\n  type ClientFieldSchemaMap,\n  type Field,\n  type FieldDiffClientProps,\n  type FieldDiffServerProps,\n  type FieldTypes,\n  type FlattenedBlock,\n  MissingEditorProp,\n  type PayloadComponent,\n  type PayloadRequest,\n  type SanitizedFieldPermissions,\n  type VersionField,\n} from 'payload'\nimport { fieldIsID, fieldShouldBeLocalized, getUniqueListBy, tabHasName } from 'payload/shared'\n\nimport { diffMethods } from './fields/diffMethods.js'\nimport { diffComponents } from './fields/index.js'\nimport { getFieldPathsModified } from './utilities/getFieldPathsModified.js'\n\nexport type BuildVersionFieldsArgs = {\n  clientSchemaMap: ClientFieldSchemaMap\n  comparisonSiblingData: object\n  customDiffComponents: Partial<\n    Record<FieldTypes, PayloadComponent<FieldDiffServerProps, FieldDiffClientProps>>\n  >\n  entitySlug: string\n  fieldPermissions:\n    | {\n        [key: string]: SanitizedFieldPermissions\n      }\n    | true\n  fields: Field[]\n  i18n: I18nClient\n  modifiedOnly: boolean\n  parentIndexPath: string\n  parentIsLocalized: boolean\n  parentPath: string\n  parentSchemaPath: string\n  req: PayloadRequest\n  selectedLocales: string[]\n  versionSiblingData: object\n}\n\n/**\n * Build up an object that contains rendered diff components for each field.\n * This is then sent to the client to be rendered.\n *\n * Here, the server is responsible for traversing through the document data and building up this\n * version state object.\n */\nexport const buildVersionFields = ({\n  clientSchemaMap,\n  comparisonSiblingData,\n  customDiffComponents,\n  entitySlug,\n  fieldPermissions,\n  fields,\n  i18n,\n  modifiedOnly,\n  parentIndexPath,\n  parentIsLocalized,\n  parentPath,\n  parentSchemaPath,\n  req,\n  selectedLocales,\n  versionSiblingData,\n}: BuildVersionFieldsArgs): {\n  versionFields: VersionField[]\n} => {\n  const versionFields: VersionField[] = []\n  let fieldIndex = -1\n\n  for (const field of fields) {\n    fieldIndex++\n\n    if (fieldIsID(field)) {\n      continue\n    }\n\n    const { indexPath, path, schemaPath } = getFieldPathsModified({\n      field,\n      index: fieldIndex,\n      parentIndexPath,\n      parentPath,\n      parentSchemaPath,\n    })\n\n    const clientField = clientSchemaMap.get(entitySlug + '.' + schemaPath)\n\n    if (!clientField) {\n      req.payload.logger.error({\n        clientFieldKey: entitySlug + '.' + schemaPath,\n        clientSchemaMapKeys: Array.from(clientSchemaMap.keys()),\n        msg: 'No client field found for ' + entitySlug + '.' + schemaPath,\n        parentPath,\n        parentSchemaPath,\n        path,\n        schemaPath,\n      })\n      throw new Error('No client field found for ' + entitySlug + '.' + schemaPath)\n    }\n\n    const versionField: VersionField = {}\n    const isLocalized = fieldShouldBeLocalized({ field, parentIsLocalized })\n\n    const fieldName: null | string = 'name' in field ? field.name : null\n\n    const versionValue = fieldName ? versionSiblingData?.[fieldName] : versionSiblingData\n\n    const comparisonValue = fieldName ? comparisonSiblingData?.[fieldName] : comparisonSiblingData\n\n    if (isLocalized) {\n      versionField.fieldByLocale = {}\n\n      for (const locale of selectedLocales) {\n        const localizedVersionField = buildVersionField({\n          clientField: clientField as ClientField,\n          clientSchemaMap,\n          comparisonValue: comparisonValue?.[locale],\n          customDiffComponents,\n          entitySlug,\n          field,\n          fieldPermissions,\n          i18n,\n          indexPath,\n          locale,\n          modifiedOnly,\n          parentIsLocalized: true,\n          parentPath,\n          parentSchemaPath,\n          path,\n          req,\n          schemaPath,\n          selectedLocales,\n          versionValue: versionValue?.[locale],\n        })\n        if (localizedVersionField) {\n          versionField.fieldByLocale[locale] = localizedVersionField\n        }\n      }\n    } else {\n      const baseVersionField = buildVersionField({\n        clientField: clientField as ClientField,\n        clientSchemaMap,\n        comparisonValue,\n        customDiffComponents,\n        entitySlug,\n        field,\n        fieldPermissions,\n        i18n,\n        indexPath,\n        modifiedOnly,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n        parentPath,\n        parentSchemaPath,\n        path,\n        req,\n        schemaPath,\n        selectedLocales,\n        versionValue,\n      })\n\n      if (baseVersionField) {\n        versionField.field = baseVersionField\n      }\n    }\n\n    versionFields.push(versionField)\n  }\n\n  return {\n    versionFields,\n  }\n}\n\nconst buildVersionField = ({\n  clientField,\n  clientSchemaMap,\n  comparisonValue,\n  customDiffComponents,\n  entitySlug,\n  field,\n  fieldPermissions,\n  i18n,\n  indexPath,\n  locale,\n  modifiedOnly,\n  parentIsLocalized,\n  parentPath,\n  parentSchemaPath,\n  path,\n  req,\n  schemaPath,\n  selectedLocales,\n  versionValue,\n}: {\n  clientField: ClientField\n  comparisonValue: unknown\n  field: Field\n  indexPath: string\n  locale?: string\n  modifiedOnly?: boolean\n  parentIsLocalized: boolean\n  path: string\n  schemaPath: string\n  versionValue: unknown\n} & Omit<\n  BuildVersionFieldsArgs,\n  'comparisonSiblingData' | 'fields' | 'parentIndexPath' | 'versionSiblingData'\n>): BaseVersionField | null => {\n  const fieldName: null | string = 'name' in field ? field.name : null\n\n  const diffMethod: DiffMethod = diffMethods[field.type] || 'CHARS'\n\n  const hasPermission =\n    fieldPermissions === true ||\n    !fieldName ||\n    fieldPermissions?.[fieldName] === true ||\n    fieldPermissions?.[fieldName]?.read\n\n  const subFieldPermissions =\n    fieldPermissions === true ||\n    !fieldName ||\n    fieldPermissions?.[fieldName] === true ||\n    fieldPermissions?.[fieldName]?.fields\n\n  if (!hasPermission) {\n    return null\n  }\n\n  if (modifiedOnly && dequal(versionValue, comparisonValue)) {\n    return null\n  }\n\n  let CustomComponent = customDiffComponents?.[field.type]\n  if (field?.type === 'richText') {\n    if (!field?.editor) {\n      throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n    }\n\n    if (typeof field?.editor === 'function') {\n      throw new Error('Attempted to access unsanitized rich text editor.')\n    }\n\n    if (field.editor.CellComponent) {\n      CustomComponent = field.editor.DiffComponent\n    }\n  }\n  if (field?.admin?.components?.Diff) {\n    CustomComponent = field.admin.components.Diff\n  }\n\n  const DefaultComponent = diffComponents?.[field.type]\n\n  const baseVersionField: BaseVersionField = {\n    type: field.type,\n    fields: [],\n    path,\n    schemaPath,\n  }\n\n  if (field.type === 'tabs' && 'tabs' in field) {\n    baseVersionField.tabs = []\n    let tabIndex = -1\n    for (const tab of field.tabs) {\n      tabIndex++\n      const isNamedTab = tabHasName(tab)\n\n      const tabAsField = { ...tab, type: 'tab' }\n\n      const {\n        indexPath: tabIndexPath,\n        path: tabPath,\n        schemaPath: tabSchemaPath,\n      } = getFieldPathsModified({\n        field: tabAsField,\n        index: tabIndex,\n        parentIndexPath: indexPath,\n        parentPath,\n        parentSchemaPath,\n      })\n      baseVersionField.tabs.push({\n        name: 'name' in tab ? tab.name : null,\n        fields: buildVersionFields({\n          clientSchemaMap,\n          comparisonSiblingData: 'name' in tab ? comparisonValue?.[tab.name] : comparisonValue,\n          customDiffComponents,\n          entitySlug,\n          fieldPermissions,\n          fields: tab.fields,\n          i18n,\n          modifiedOnly,\n          parentIndexPath: isNamedTab ? '' : tabIndexPath,\n          parentIsLocalized: parentIsLocalized || tab.localized,\n          parentPath: isNamedTab ? tabPath : path,\n          parentSchemaPath: isNamedTab ? tabSchemaPath : parentSchemaPath,\n          req,\n          selectedLocales,\n          versionSiblingData: 'name' in tab ? versionValue?.[tab.name] : versionValue,\n        }).versionFields,\n        label: tab.label,\n      })\n    }\n  } // At this point, we are dealing with a `row`, `collapsible`, etc\n  else if ('fields' in field) {\n    if (field.type === 'array' && versionValue) {\n      const arrayValue = Array.isArray(versionValue) ? versionValue : []\n      baseVersionField.rows = []\n\n      for (let i = 0; i < arrayValue.length; i++) {\n        const comparisonRow = comparisonValue?.[i] || {}\n        const versionRow = arrayValue?.[i] || {}\n        baseVersionField.rows[i] = buildVersionFields({\n          clientSchemaMap,\n          comparisonSiblingData: comparisonRow,\n          customDiffComponents,\n          entitySlug,\n          fieldPermissions,\n          fields: field.fields,\n          i18n,\n          modifiedOnly,\n          parentIndexPath: 'name' in field ? '' : indexPath,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          parentPath: path + '.' + i,\n          parentSchemaPath: schemaPath,\n          req,\n          selectedLocales,\n          versionSiblingData: versionRow,\n        }).versionFields\n      }\n    } else {\n      baseVersionField.fields = buildVersionFields({\n        clientSchemaMap,\n        comparisonSiblingData: comparisonValue as object,\n        customDiffComponents,\n        entitySlug,\n        fieldPermissions,\n        fields: field.fields,\n        i18n,\n        modifiedOnly,\n        parentIndexPath: 'name' in field ? '' : indexPath,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n        parentPath: 'name' in field ? path : parentPath,\n        parentSchemaPath: 'name' in field ? schemaPath : parentSchemaPath,\n        req,\n        selectedLocales,\n        versionSiblingData: versionValue as object,\n      }).versionFields\n    }\n  } else if (field.type === 'blocks') {\n    baseVersionField.rows = []\n\n    const blocksValue = Array.isArray(versionValue) ? versionValue : []\n\n    for (let i = 0; i < blocksValue.length; i++) {\n      const comparisonRow = comparisonValue?.[i] || {}\n      const versionRow = blocksValue[i] || {}\n\n      const blockSlugToMatch: string = versionRow.blockType\n      const versionBlock =\n        req.payload.blocks[blockSlugToMatch] ??\n        ((field.blockReferences ?? field.blocks).find(\n          (block) => typeof block !== 'string' && block.slug === blockSlugToMatch,\n        ) as FlattenedBlock | undefined)\n\n      let fields = []\n\n      if (versionRow.blockType === comparisonRow.blockType) {\n        fields = versionBlock.fields\n      } else {\n        const comparisonBlockSlugToMatch: string = versionRow.blockType\n\n        const comparisonBlock =\n          req.payload.blocks[comparisonBlockSlugToMatch] ??\n          ((field.blockReferences ?? field.blocks).find(\n            (block) => typeof block !== 'string' && block.slug === comparisonBlockSlugToMatch,\n          ) as FlattenedBlock | undefined)\n\n        if (comparisonBlock) {\n          fields = getUniqueListBy<Field>(\n            [...versionBlock.fields, ...comparisonBlock.fields],\n            'name',\n          )\n        } else {\n          fields = versionBlock.fields\n        }\n      }\n\n      baseVersionField.rows[i] = buildVersionFields({\n        clientSchemaMap,\n        comparisonSiblingData: comparisonRow,\n        customDiffComponents,\n        entitySlug,\n        fieldPermissions,\n        fields,\n        i18n,\n        modifiedOnly,\n        parentIndexPath: 'name' in field ? '' : indexPath,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n        parentPath: path + '.' + i,\n        parentSchemaPath: schemaPath + '.' + versionBlock.slug,\n        req,\n        selectedLocales,\n        versionSiblingData: versionRow,\n      }).versionFields\n    }\n  }\n\n  const clientCellProps: FieldDiffClientProps = {\n    baseVersionField: {\n      ...baseVersionField,\n      CustomComponent: undefined,\n    },\n    comparisonValue,\n    diffMethod,\n    field: clientField,\n    fieldPermissions: subFieldPermissions,\n    parentIsLocalized,\n    versionValue,\n  }\n\n  const serverCellProps: FieldDiffServerProps = {\n    ...clientCellProps,\n    clientField,\n    field,\n    i18n,\n    req,\n    selectedLocales,\n  }\n\n  baseVersionField.CustomComponent = RenderServerComponent({\n    clientProps: locale\n      ? ({\n          ...clientCellProps,\n          locale,\n        } as FieldDiffClientProps)\n      : clientCellProps,\n    Component: CustomComponent,\n    Fallback: DefaultComponent,\n    importMap: req.payload.importMap,\n    key: 'diff component',\n    serverProps: locale\n      ? ({\n          ...serverCellProps,\n          locale,\n        } as FieldDiffServerProps)\n      : serverCellProps,\n  })\n\n  return baseVersionField\n}\n"],"mappings":"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","ignoreList":[]}