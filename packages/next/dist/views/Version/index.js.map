{"version":3,"file":"index.js","names":["getClientConfig","getClientSchemaMap","getSchemaMap","notFound","React","getLatestVersion","DefaultVersionView","RenderDiff","VersionView","props","i18n","initPageResult","routeSegments","searchParams","collectionConfig","docID","id","globalConfig","permissions","req","payload","config","user","versionID","length","collectionSlug","slug","globalSlug","localeCodesFromParams","localeCodes","JSON","parse","comparisonVersionIDFromParams","compareValue","modifiedOnly","localization","docPermissions","doc","latestPublishedVersion","latestDraftVersion","collections","findVersionByID","collection","depth","locale","overrideAccess","versions","drafts","type","parentID","status","_err","globals","findGlobalVersionByID","publishedNewerThanDraft","updatedAt","selectedLocales","locales","code","find","push","filterAvailableLocales","map","label","value","latestVersion","comparisonDoc","schemaMap","clientSchemaMap","importMap","RenderedDiff","comparisonSiblingData","version","customDiffComponents","entitySlug","fieldPermissions","fields","parentIndexPath","parentIsLocalized","parentPath","parentSchemaPath","versionSiblingData","createdAt","_jsx","canUpdate","update"],"sources":["../../../src/views/Version/index.tsx"],"sourcesContent":["import type {\n  Document,\n  DocumentViewServerProps,\n  Locale,\n  OptionObject,\n  SanitizedCollectionPermission,\n  SanitizedGlobalPermission,\n} from 'payload'\n\nimport { getClientConfig } from '@payloadcms/ui/utilities/getClientConfig'\nimport { getClientSchemaMap } from '@payloadcms/ui/utilities/getClientSchemaMap'\nimport { getSchemaMap } from '@payloadcms/ui/utilities/getSchemaMap'\nimport { notFound } from 'next/navigation.js'\nimport React from 'react'\n\nimport { getLatestVersion } from '../Versions/getLatestVersion.js'\nimport { DefaultVersionView } from './Default/index.js'\nimport { RenderDiff } from './RenderFieldsToDiff/index.js'\n\nexport async function VersionView(props: DocumentViewServerProps) {\n  const { i18n, initPageResult, routeSegments, searchParams } = props\n\n  const {\n    collectionConfig,\n    docID: id,\n    globalConfig,\n    permissions,\n    req,\n    req: { payload, payload: { config } = {}, user } = {},\n  } = initPageResult\n\n  const versionID = routeSegments[routeSegments.length - 1]\n\n  const collectionSlug = collectionConfig?.slug\n  const globalSlug = globalConfig?.slug\n\n  const localeCodesFromParams = searchParams.localeCodes\n    ? JSON.parse(searchParams.localeCodes as string)\n    : null\n\n  const comparisonVersionIDFromParams: string = searchParams.compareValue as string\n\n  const modifiedOnly: boolean = searchParams.modifiedOnly === 'false' ? false : true\n\n  const { localization } = config\n\n  let docPermissions: SanitizedCollectionPermission | SanitizedGlobalPermission\n  let slug: string\n\n  let doc: Document\n  let latestPublishedVersion = null\n  let latestDraftVersion = null\n\n  if (collectionSlug) {\n    // /collections/:slug/:id/versions/:versionID\n    slug = collectionSlug\n    docPermissions = permissions.collections[collectionSlug]\n\n    try {\n      doc = await payload.findVersionByID({\n        id: versionID,\n        collection: slug,\n        depth: 0,\n        locale: 'all',\n        overrideAccess: false,\n        req,\n        user,\n      })\n\n      if (collectionConfig?.versions?.drafts) {\n        latestDraftVersion = await getLatestVersion({\n          slug,\n          type: 'collection',\n          locale: 'all',\n          overrideAccess: false,\n          parentID: id,\n          payload,\n          req,\n          status: 'draft',\n        })\n        latestPublishedVersion = await getLatestVersion({\n          slug,\n          type: 'collection',\n          locale: 'all',\n          overrideAccess: false,\n          parentID: id,\n          payload,\n          req,\n          status: 'published',\n        })\n      }\n    } catch (_err) {\n      return notFound()\n    }\n  }\n\n  if (globalSlug) {\n    // /globals/:slug/versions/:versionID\n    slug = globalSlug\n    docPermissions = permissions.globals[globalSlug]\n\n    try {\n      doc = await payload.findGlobalVersionByID({\n        id: versionID,\n        slug,\n        depth: 0,\n        locale: 'all',\n        overrideAccess: false,\n        req,\n        user,\n      })\n\n      if (globalConfig?.versions?.drafts) {\n        latestDraftVersion = await getLatestVersion({\n          slug,\n          type: 'global',\n          locale: 'all',\n          overrideAccess: false,\n          payload,\n          req,\n          status: 'draft',\n        })\n        latestPublishedVersion = await getLatestVersion({\n          slug,\n          type: 'global',\n          locale: 'all',\n          overrideAccess: false,\n          payload,\n          req,\n          status: 'published',\n        })\n      }\n    } catch (_err) {\n      return notFound()\n    }\n  }\n\n  const publishedNewerThanDraft = latestPublishedVersion?.updatedAt > latestDraftVersion?.updatedAt\n\n  if (publishedNewerThanDraft) {\n    latestDraftVersion = {\n      id: '',\n      updatedAt: '',\n    }\n  }\n\n  let selectedLocales: OptionObject[] = []\n  if (localization) {\n    let locales: Locale[] = []\n    if (localeCodesFromParams) {\n      for (const code of localeCodesFromParams) {\n        const locale = localization.locales.find((locale) => locale.code === code)\n        if (!locale) {\n          continue\n        }\n        locales.push(locale)\n      }\n    } else {\n      locales = localization.locales\n    }\n\n    if (localization.filterAvailableLocales) {\n      locales = (await localization.filterAvailableLocales({ locales, req })) || []\n    }\n\n    selectedLocales = locales.map((locale) => ({\n      label: locale.label,\n      value: locale.code,\n    }))\n  }\n\n  const latestVersion =\n    latestPublishedVersion?.updatedAt > latestDraftVersion?.updatedAt\n      ? latestPublishedVersion\n      : latestDraftVersion\n\n  if (!doc) {\n    return notFound()\n  }\n\n  /**\n   * The doc to compare this version to is either the latest version, or a specific version if specified in the URL.\n   * This specific version is added to the URL when a user selects a version to compare to.\n   */\n  let comparisonDoc = null\n  if (comparisonVersionIDFromParams) {\n    if (collectionSlug) {\n      comparisonDoc = await payload.findVersionByID({\n        id: comparisonVersionIDFromParams,\n        collection: collectionSlug,\n        depth: 0,\n        locale: 'all',\n        overrideAccess: false,\n        req,\n      })\n    } else {\n      comparisonDoc = await payload.findGlobalVersionByID({\n        id: comparisonVersionIDFromParams,\n        slug: globalSlug,\n        depth: 0,\n        locale: 'all',\n        overrideAccess: false,\n        req,\n      })\n    }\n  } else {\n    comparisonDoc = latestVersion\n  }\n\n  const schemaMap = getSchemaMap({\n    collectionSlug,\n    config,\n    globalSlug,\n    i18n,\n  })\n\n  const clientSchemaMap = getClientSchemaMap({\n    collectionSlug,\n    config: getClientConfig({ config: payload.config, i18n, importMap: payload.importMap }),\n    globalSlug,\n    i18n,\n    payload,\n    schemaMap,\n  })\n\n  const RenderedDiff = RenderDiff({\n    clientSchemaMap,\n    comparisonSiblingData: comparisonDoc?.version,\n    customDiffComponents: {},\n    entitySlug: collectionSlug || globalSlug,\n    fieldPermissions: docPermissions?.fields,\n    fields: (collectionConfig || globalConfig)?.fields,\n    i18n,\n    modifiedOnly,\n    parentIndexPath: '',\n    parentIsLocalized: false,\n    parentPath: '',\n    parentSchemaPath: '',\n    req,\n    selectedLocales: selectedLocales && selectedLocales.map((locale) => locale.value),\n    versionSiblingData: globalConfig\n      ? {\n          ...doc?.version,\n          createdAt: doc?.version?.createdAt || doc.createdAt,\n          updatedAt: doc?.version?.updatedAt || doc.updatedAt,\n        }\n      : doc?.version,\n  })\n\n  return (\n    <DefaultVersionView\n      canUpdate={docPermissions?.update}\n      doc={doc}\n      latestDraftVersion={latestDraftVersion?.id}\n      latestPublishedVersion={latestPublishedVersion?.id}\n      modifiedOnly={modifiedOnly}\n      RenderedDiff={RenderedDiff}\n      selectedLocales={selectedLocales}\n      versionID={versionID}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}