{"version":3,"sources":["../../src/lib/manage-env-files.ts"],"sourcesContent":["import fs from 'fs-extra'\nimport path from 'path'\n\nimport type { CliArgs, DbType, ProjectTemplate } from '../types.js'\n\nimport { debug, error } from '../utils/log.js'\nimport { dbChoiceRecord } from './select-db.js'\n\nconst updateEnvExampleVariables = (contents: string, databaseType: DbType | undefined): string => {\n  return contents\n    .split('\\n')\n    .map((line) => {\n      if (line.startsWith('#') || !line.includes('=')) {\n        return line // Preserve comments and unrelated lines\n      }\n\n      const [key] = line.split('=')\n\n      if (key === 'DATABASE_URI' || key === 'POSTGRES_URL' || key === 'MONGODB_URI') {\n        const dbChoice = databaseType ? dbChoiceRecord[databaseType] : null\n\n        if (dbChoice) {\n          const placeholderUri = `${dbChoice.dbConnectionPrefix}your-database-name${\n            dbChoice.dbConnectionSuffix || ''\n          }`\n          return databaseType === 'vercel-postgres'\n            ? `POSTGRES_URL=${placeholderUri}`\n            : `DATABASE_URI=${placeholderUri}`\n        }\n\n        return `DATABASE_URI=your-database-connection-here` // Fallback\n      }\n\n      if (key === 'PAYLOAD_SECRET' || key === 'PAYLOAD_SECRET_KEY') {\n        return `PAYLOAD_SECRET=YOUR_SECRET_HERE`\n      }\n\n      return line\n    })\n    .join('\\n')\n}\n\nconst generateEnvContent = (\n  existingEnv: string,\n  databaseType: DbType | undefined,\n  databaseUri: string,\n  payloadSecret: string,\n): string => {\n  const dbKey = databaseType === 'vercel-postgres' ? 'POSTGRES_URL' : 'DATABASE_URI'\n\n  const envVars: Record<string, string> = {}\n  existingEnv\n    .split('\\n')\n    .filter((line) => line.includes('=') && !line.startsWith('#'))\n    .forEach((line) => {\n      const [key, value] = line.split('=')\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      envVars[key] = value\n    })\n\n  // Override specific keys\n  envVars[dbKey] = databaseUri\n  envVars['PAYLOAD_SECRET'] = payloadSecret\n\n  // Rebuild content\n  return Object.entries(envVars)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('\\n')\n}\n\n/** Parse and swap .env.example values and write .env */\nexport async function manageEnvFiles(args: {\n  cliArgs: CliArgs\n  databaseType?: DbType\n  databaseUri: string\n  payloadSecret: string\n  projectDir: string\n  template?: ProjectTemplate\n}): Promise<void> {\n  const { cliArgs, databaseType, databaseUri, payloadSecret, projectDir, template } = args\n\n  const debugFlag = cliArgs['--debug']\n\n  if (cliArgs['--dry-run']) {\n    debug(`DRY RUN: Environment files managed`)\n    return\n  }\n\n  const envExamplePath = path.join(projectDir, '.env.example')\n  const envPath = path.join(projectDir, '.env')\n\n  try {\n    let updatedExampleContents: string\n\n    // Update .env.example\n    if (template?.type === 'starter') {\n      if (!fs.existsSync(envExamplePath)) {\n        error(`.env.example file not found at ${envExamplePath}`)\n        process.exit(1)\n      }\n\n      const envExampleContents = await fs.readFile(envExamplePath, 'utf8')\n      updatedExampleContents = updateEnvExampleVariables(envExampleContents, databaseType)\n\n      await fs.writeFile(envExamplePath, updatedExampleContents.trimEnd() + '\\n')\n\n      if (debugFlag) {\n        debug(`.env.example file successfully updated`)\n      }\n    } else {\n      updatedExampleContents = `# Added by Payload\\nDATABASE_URI=your-connection-string-here\\nPAYLOAD_SECRET=YOUR_SECRET_HERE\\n`\n      await fs.writeFile(envExamplePath, updatedExampleContents.trimEnd() + '\\n')\n    }\n\n    // Merge existing variables and create or update .env\n    const envExampleContents = await fs.readFile(envExamplePath, 'utf8')\n    const envContent = generateEnvContent(\n      envExampleContents,\n      databaseType,\n      databaseUri,\n      payloadSecret,\n    )\n    await fs.writeFile(envPath, `# Added by Payload\\n${envContent.trimEnd()}\\n`)\n\n    if (debugFlag) {\n      debug(`.env file successfully created or updated`)\n    }\n  } catch (err: unknown) {\n    error('Unable to manage environment files')\n    if (err instanceof Error) {\n      error(err.message)\n    }\n    process.exit(1)\n  }\n}\n"],"names":["fs","path","debug","error","dbChoiceRecord","updateEnvExampleVariables","contents","databaseType","split","map","line","startsWith","includes","key","dbChoice","placeholderUri","dbConnectionPrefix","dbConnectionSuffix","join","generateEnvContent","existingEnv","databaseUri","payloadSecret","dbKey","envVars","filter","forEach","value","Object","entries","manageEnvFiles","args","cliArgs","projectDir","template","debugFlag","envExamplePath","envPath","updatedExampleContents","type","existsSync","process","exit","envExampleContents","readFile","writeFile","trimEnd","envContent","err","Error","message"],"mappings":"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"}