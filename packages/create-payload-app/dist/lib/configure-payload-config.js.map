{"version":3,"sources":["../../src/lib/configure-payload-config.ts"],"sourcesContent":["import fse from 'fs-extra'\nimport globby from 'globby'\nimport path from 'path'\n\nimport type { DbType, StorageAdapterType } from '../types.js'\n\nimport { warning } from '../utils/log.js'\nimport { dbReplacements, storageReplacements } from './replacements.js'\n\n/** Update payload config with necessary imports and adapters */\nexport async function configurePayloadConfig(args: {\n  dbType?: DbType\n  envNames?: {\n    dbUri: string\n  }\n  packageJsonName?: string\n  projectDirOrConfigPath: { payloadConfigPath: string } | { projectDir: string }\n  sharp?: boolean\n  storageAdapter?: StorageAdapterType\n}): Promise<void> {\n  if (!args.dbType) {\n    return\n  }\n\n  // Update package.json\n  const packageJsonPath =\n    'projectDir' in args.projectDirOrConfigPath &&\n    path.resolve(args.projectDirOrConfigPath.projectDir, 'package.json')\n\n  if (packageJsonPath && fse.existsSync(packageJsonPath)) {\n    try {\n      const packageObj = await fse.readJson(packageJsonPath)\n\n      const dbPackage = dbReplacements[args.dbType]\n\n      // Delete all other db adapters\n      Object.values(dbReplacements).forEach((p) => {\n        if (p.packageName !== dbPackage.packageName) {\n          delete packageObj.dependencies[p.packageName]\n        }\n      })\n\n      // Set version of db adapter to match payload version\n      packageObj.dependencies[dbPackage.packageName] = packageObj.dependencies['payload']\n\n      if (args.storageAdapter) {\n        const storagePackage = storageReplacements[args.storageAdapter]\n\n        if (storagePackage?.packageName) {\n          // Set version of storage adapter to match payload version\n          packageObj.dependencies[storagePackage.packageName] = packageObj.dependencies['payload']\n        }\n      }\n\n      // Sharp provided by default, only remove if explicitly set to false\n      if (args.sharp === false) {\n        delete packageObj.dependencies['sharp']\n      }\n\n      if (args.packageJsonName) {\n        packageObj.name = args.packageJsonName\n      }\n\n      await fse.writeJson(packageJsonPath, packageObj, { spaces: 2 })\n    } catch (err: unknown) {\n      warning(`Unable to configure Payload in package.json`)\n      warning(err instanceof Error ? err.message : '')\n    }\n  }\n\n  try {\n    let payloadConfigPath: string | undefined\n    if (!('payloadConfigPath' in args.projectDirOrConfigPath)) {\n      payloadConfigPath = (\n        await globby('**/payload.config.ts', {\n          absolute: true,\n          cwd: args.projectDirOrConfigPath.projectDir,\n        })\n      )?.[0]\n    } else {\n      payloadConfigPath = args.projectDirOrConfigPath.payloadConfigPath\n    }\n\n    if (!payloadConfigPath) {\n      warning('Unable to update payload.config.ts with plugins. Could not find payload.config.ts.')\n      return\n    }\n\n    const configContent = fse.readFileSync(payloadConfigPath, 'utf-8')\n    let configLines = configContent.split('\\n')\n\n    // DB Replacement\n    const dbReplacement = dbReplacements[args.dbType]\n\n    configLines = replaceInConfigLines({\n      endMatch: `// database-adapter-config-end`,\n      lines: configLines,\n      replacement: dbReplacement.configReplacement(args.envNames?.dbUri),\n      startMatch: `// database-adapter-config-start`,\n    })\n\n    configLines = replaceInConfigLines({\n      lines: configLines,\n      replacement: [dbReplacement.importReplacement],\n      startMatch: '// database-adapter-import',\n    })\n\n    // Storage Adapter Replacement\n    if (args.storageAdapter) {\n      const replacement = storageReplacements[args.storageAdapter]\n      configLines = replaceInConfigLines({\n        lines: configLines,\n        replacement: replacement.configReplacement,\n        startMatch: '// storage-adapter-placeholder',\n      })\n\n      if (replacement?.importReplacement !== undefined) {\n        configLines = replaceInConfigLines({\n          lines: configLines,\n          replacement: [replacement.importReplacement],\n          startMatch: '// storage-adapter-import-placeholder',\n        })\n      }\n    }\n\n    // Sharp Replacement (provided by default, only remove if explicitly set to false)\n    if (args.sharp === false) {\n      configLines = replaceInConfigLines({\n        lines: configLines,\n        replacement: [],\n        startMatch: 'sharp,',\n      })\n      configLines = replaceInConfigLines({\n        lines: configLines,\n        replacement: [],\n        startMatch: \"import sharp from 'sharp'\",\n      })\n    }\n\n    fse.writeFileSync(payloadConfigPath, configLines.join('\\n'))\n  } catch (err: unknown) {\n    warning(\n      `Unable to update payload.config.ts with plugins: ${err instanceof Error ? err.message : ''}`,\n    )\n  }\n}\n\nfunction replaceInConfigLines({\n  endMatch,\n  lines,\n  replacement,\n  startMatch,\n}: {\n  /** Optional endMatch to replace multiple lines */\n  endMatch?: string\n  lines: string[]\n  replacement: string[]\n  startMatch: string\n}) {\n  if (!replacement) {\n    return lines\n  }\n\n  const startIndex = lines.findIndex((l) => l.includes(startMatch))\n  const endIndex = endMatch ? lines.findIndex((l) => l.includes(endMatch)) : startIndex\n\n  if (startIndex === -1 || endIndex === -1) {\n    return lines\n  }\n\n  lines.splice(startIndex, endIndex - startIndex + 1, ...replacement)\n  return lines\n}\n"],"names":["fse","globby","path","warning","dbReplacements","storageReplacements","configurePayloadConfig","args","dbType","packageJsonPath","projectDirOrConfigPath","resolve","projectDir","existsSync","packageObj","readJson","dbPackage","Object","values","forEach","p","packageName","dependencies","storageAdapter","storagePackage","sharp","packageJsonName","name","writeJson","spaces","err","Error","message","payloadConfigPath","absolute","cwd","configContent","readFileSync","configLines","split","dbReplacement","replaceInConfigLines","endMatch","lines","replacement","configReplacement","envNames","dbUri","startMatch","importReplacement","undefined","writeFileSync","join","startIndex","findIndex","l","includes","endIndex","splice"],"mappings":"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"}