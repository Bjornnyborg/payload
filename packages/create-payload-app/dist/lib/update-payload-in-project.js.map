{"version":3,"sources":["../../src/lib/update-payload-in-project.ts"],"sourcesContent":["import execa from 'execa'\nimport fse from 'fs-extra'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\nimport type { NextAppDetails } from '../types.js'\n\nimport { copyRecursiveSync } from '../utils/copy-recursive-sync.js'\nimport { info } from '../utils/log.js'\nimport { getPackageManager } from './get-package-manager.js'\nimport { installPackages } from './install-packages.js'\n\nexport async function updatePayloadInProject(\n  appDetails: NextAppDetails,\n): Promise<{ message: string; success: boolean }> {\n  if (!appDetails.nextConfigPath) {\n    return { message: 'No Next.js config found', success: false }\n  }\n\n  const projectDir = path.dirname(appDetails.nextConfigPath)\n\n  const packageObj = (await fse.readJson(path.resolve(projectDir, 'package.json'))) as {\n    dependencies?: Record<string, string>\n  }\n  if (!packageObj?.dependencies) {\n    throw new Error('No package.json found in this project')\n  }\n\n  const payloadVersion = packageObj.dependencies?.payload\n  if (!payloadVersion) {\n    throw new Error('Payload is not installed in this project')\n  }\n\n  const packageManager = await getPackageManager({ projectDir })\n\n  // Fetch latest Payload version from npm\n  const { exitCode: getLatestVersionExitCode, stdout: latestPayloadVersion } = await execa('npm', [\n    'show',\n    'payload',\n    'version',\n  ])\n  if (getLatestVersionExitCode !== 0) {\n    throw new Error('Failed to fetch latest Payload version')\n  }\n\n  if (payloadVersion === latestPayloadVersion) {\n    return { message: `Payload v${payloadVersion} is already up to date.`, success: true }\n  }\n\n  // Update all existing Payload packages\n  const payloadPackages = Object.keys(packageObj.dependencies).filter((dep) =>\n    dep.startsWith('@payloadcms/'),\n  )\n\n  const packageNames = ['payload', ...payloadPackages]\n\n  const packagesToUpdate = packageNames.map((pkg) => `${pkg}@${latestPayloadVersion}`)\n\n  info(`Using ${packageManager}.\\n`)\n  info(\n    `Updating ${packagesToUpdate.length} Payload packages to v${latestPayloadVersion}...\\n\\n${packageNames.map((p) => `  - ${p}`).join('\\n')}`,\n  )\n\n  const { success: updateSuccess } = await installPackages({\n    packageManager,\n    packagesToInstall: packagesToUpdate,\n    projectDir,\n  })\n\n  if (!updateSuccess) {\n    throw new Error('Failed to update Payload packages')\n  }\n  info('Payload packages updated successfully.')\n\n  info(`Updating Payload Next.js files...`)\n\n  const templateFilesPath =\n    process.env.JEST_WORKER_ID !== undefined\n      ? path.resolve(dirname, '../../../../templates/blank')\n      : path.resolve(dirname, '../..', 'dist/template')\n\n  const templateSrcDir = path.resolve(templateFilesPath, 'src/app/(payload)')\n\n  copyRecursiveSync(\n    templateSrcDir,\n    path.resolve(projectDir, appDetails.isSrcDir ? 'src/app' : 'app', '(payload)'),\n    ['custom.scss$'], // Do not overwrite user's custom.scss\n  )\n\n  return { message: 'Payload updated successfully.', success: true }\n}\n"],"names":["execa","fse","fileURLToPath","path","filename","url","dirname","copyRecursiveSync","info","getPackageManager","installPackages","updatePayloadInProject","appDetails","nextConfigPath","message","success","projectDir","packageObj","readJson","resolve","dependencies","Error","payloadVersion","payload","packageManager","exitCode","getLatestVersionExitCode","stdout","latestPayloadVersion","payloadPackages","Object","keys","filter","dep","startsWith","packageNames","packagesToUpdate","map","pkg","length","p","join","updateSuccess","packagesToInstall","templateFilesPath","process","env","JEST_WORKER_ID","undefined","templateSrcDir","isSrcDir"],"mappings":"AAAA,OAAOA,WAAW,QAAO;AACzB,OAAOC,SAAS,WAAU;AAC1B,SAASC,aAAa,QAAQ,WAAU;AACxC,OAAOC,UAAU,OAAM;AAEvB,MAAMC,WAAWF,cAAc,YAAYG,GAAG;AAC9C,MAAMC,UAAUH,KAAKG,OAAO,CAACF;AAI7B,SAASG,iBAAiB,QAAQ,kCAAiC;AACnE,SAASC,IAAI,QAAQ,kBAAiB;AACtC,SAASC,iBAAiB,QAAQ,2BAA0B;AAC5D,SAASC,eAAe,QAAQ,wBAAuB;AAEvD,OAAO,eAAeC,uBACpBC,UAA0B;IAE1B,IAAI,CAACA,WAAWC,cAAc,EAAE;QAC9B,OAAO;YAAEC,SAAS;YAA2BC,SAAS;QAAM;IAC9D;IAEA,MAAMC,aAAab,KAAKG,OAAO,CAACM,WAAWC,cAAc;IAEzD,MAAMI,aAAc,MAAMhB,IAAIiB,QAAQ,CAACf,KAAKgB,OAAO,CAACH,YAAY;IAGhE,IAAI,CAACC,YAAYG,cAAc;QAC7B,MAAM,IAAIC,MAAM;IAClB;IAEA,MAAMC,iBAAiBL,WAAWG,YAAY,EAAEG;IAChD,IAAI,CAACD,gBAAgB;QACnB,MAAM,IAAID,MAAM;IAClB;IAEA,MAAMG,iBAAiB,MAAMf,kBAAkB;QAAEO;IAAW;IAE5D,wCAAwC;IACxC,MAAM,EAAES,UAAUC,wBAAwB,EAAEC,QAAQC,oBAAoB,EAAE,GAAG,MAAM5B,MAAM,OAAO;QAC9F;QACA;QACA;KACD;IACD,IAAI0B,6BAA6B,GAAG;QAClC,MAAM,IAAIL,MAAM;IAClB;IAEA,IAAIC,mBAAmBM,sBAAsB;QAC3C,OAAO;YAAEd,SAAS,CAAC,SAAS,EAAEQ,eAAe,uBAAuB,CAAC;YAAEP,SAAS;QAAK;IACvF;IAEA,uCAAuC;IACvC,MAAMc,kBAAkBC,OAAOC,IAAI,CAACd,WAAWG,YAAY,EAAEY,MAAM,CAAC,CAACC,MACnEA,IAAIC,UAAU,CAAC;IAGjB,MAAMC,eAAe;QAAC;WAAcN;KAAgB;IAEpD,MAAMO,mBAAmBD,aAAaE,GAAG,CAAC,CAACC,MAAQ,GAAGA,IAAI,CAAC,EAAEV,sBAAsB;IAEnFpB,KAAK,CAAC,MAAM,EAAEgB,eAAe,GAAG,CAAC;IACjChB,KACE,CAAC,SAAS,EAAE4B,iBAAiBG,MAAM,CAAC,sBAAsB,EAAEX,qBAAqB,OAAO,EAAEO,aAAaE,GAAG,CAAC,CAACG,IAAM,CAAC,IAAI,EAAEA,GAAG,EAAEC,IAAI,CAAC,OAAO;IAG5I,MAAM,EAAE1B,SAAS2B,aAAa,EAAE,GAAG,MAAMhC,gBAAgB;QACvDc;QACAmB,mBAAmBP;QACnBpB;IACF;IAEA,IAAI,CAAC0B,eAAe;QAClB,MAAM,IAAIrB,MAAM;IAClB;IACAb,KAAK;IAELA,KAAK,CAAC,iCAAiC,CAAC;IAExC,MAAMoC,oBACJC,QAAQC,GAAG,CAACC,cAAc,KAAKC,YAC3B7C,KAAKgB,OAAO,CAACb,SAAS,iCACtBH,KAAKgB,OAAO,CAACb,SAAS,SAAS;IAErC,MAAM2C,iBAAiB9C,KAAKgB,OAAO,CAACyB,mBAAmB;IAEvDrC,kBACE0C,gBACA9C,KAAKgB,OAAO,CAACH,YAAYJ,WAAWsC,QAAQ,GAAG,YAAY,OAAO,cAClE;QAAC;KAAe;IAGlB,OAAO;QAAEpC,SAAS;QAAiCC,SAAS;IAAK;AACnE"}