{"version":3,"sources":["../../src/lib/select-db.ts"],"sourcesContent":["import * as p from '@clack/prompts'\nimport slugify from '@sindresorhus/slugify'\n\nimport type { CliArgs, DbDetails, DbType } from '../types.js'\n\ntype DbChoice = {\n  dbConnectionPrefix: `${string}/`\n  dbConnectionSuffix?: string\n  title: string\n  value: DbType\n}\n\nexport const dbChoiceRecord: Record<DbType, DbChoice> = {\n  mongodb: {\n    dbConnectionPrefix: 'mongodb://127.0.0.1/',\n    title: 'MongoDB',\n    value: 'mongodb',\n  },\n  postgres: {\n    dbConnectionPrefix: 'postgres://postgres:<password>@127.0.0.1:5432/',\n    title: 'PostgreSQL',\n    value: 'postgres',\n  },\n  sqlite: {\n    dbConnectionPrefix: 'file:./',\n    dbConnectionSuffix: '.db',\n    title: 'SQLite',\n    value: 'sqlite',\n  },\n  'vercel-postgres': {\n    dbConnectionPrefix: 'postgres://postgres:<password>@127.0.0.1:5432/',\n    title: 'Vercel Postgres',\n    value: 'vercel-postgres',\n  },\n}\n\nexport async function selectDb(args: CliArgs, projectName: string): Promise<DbDetails> {\n  let dbType: DbType | symbol | undefined = undefined\n  if (args['--db']) {\n    if (!Object.values(dbChoiceRecord).some((dbChoice) => dbChoice.value === args['--db'])) {\n      throw new Error(\n        `Invalid database type given. Valid types are: ${Object.values(dbChoiceRecord)\n          .map((dbChoice) => dbChoice.value)\n          .join(', ')}`,\n      )\n    }\n    dbType = args['--db'] as DbType\n  } else {\n    dbType = await p.select<{ label: string; value: DbType }[], DbType>({\n      initialValue: 'mongodb',\n      message: `Select a database`,\n      options: Object.values(dbChoiceRecord).map((dbChoice) => ({\n        label: dbChoice.title,\n        value: dbChoice.value,\n      })),\n    })\n    if (p.isCancel(dbType)) {\n      process.exit(0)\n    }\n  }\n\n  const dbChoice = dbChoiceRecord[dbType]\n\n  let dbUri: string | symbol | undefined = undefined\n  const initialDbUri = `${dbChoice.dbConnectionPrefix}${\n    projectName === '.' ? `payload-${getRandomDigitSuffix()}` : slugify(projectName)\n  }${dbChoice.dbConnectionSuffix || ''}`\n\n  if (args['--db-accept-recommended']) {\n    dbUri = initialDbUri\n  } else if (args['--db-connection-string']) {\n    dbUri = args['--db-connection-string']\n  } else {\n    dbUri = await p.text({\n      initialValue: initialDbUri,\n      message: `Enter ${dbChoice.title.split(' ')[0]} connection string`, // strip beta from title\n    })\n    if (p.isCancel(dbUri)) {\n      process.exit(0)\n    }\n  }\n\n  return {\n    type: dbChoice.value,\n    dbUri,\n  }\n}\n\nfunction getRandomDigitSuffix(): string {\n  return (Math.random() * Math.pow(10, 6)).toFixed(0)\n}\n"],"names":["p","slugify","dbChoiceRecord","mongodb","dbConnectionPrefix","title","value","postgres","sqlite","dbConnectionSuffix","selectDb","args","projectName","dbType","undefined","Object","values","some","dbChoice","Error","map","join","select","initialValue","message","options","label","isCancel","process","exit","dbUri","initialDbUri","getRandomDigitSuffix","text","split","type","Math","random","pow","toFixed"],"mappings":"AAAA,YAAYA,OAAO,iBAAgB;AACnC,OAAOC,aAAa,wBAAuB;AAW3C,OAAO,MAAMC,iBAA2C;IACtDC,SAAS;QACPC,oBAAoB;QACpBC,OAAO;QACPC,OAAO;IACT;IACAC,UAAU;QACRH,oBAAoB;QACpBC,OAAO;QACPC,OAAO;IACT;IACAE,QAAQ;QACNJ,oBAAoB;QACpBK,oBAAoB;QACpBJ,OAAO;QACPC,OAAO;IACT;IACA,mBAAmB;QACjBF,oBAAoB;QACpBC,OAAO;QACPC,OAAO;IACT;AACF,EAAC;AAED,OAAO,eAAeI,SAASC,IAAa,EAAEC,WAAmB;IAC/D,IAAIC,SAAsCC;IAC1C,IAAIH,IAAI,CAAC,OAAO,EAAE;QAChB,IAAI,CAACI,OAAOC,MAAM,CAACd,gBAAgBe,IAAI,CAAC,CAACC,WAAaA,SAASZ,KAAK,KAAKK,IAAI,CAAC,OAAO,GAAG;YACtF,MAAM,IAAIQ,MACR,CAAC,8CAA8C,EAAEJ,OAAOC,MAAM,CAACd,gBAC5DkB,GAAG,CAAC,CAACF,WAAaA,SAASZ,KAAK,EAChCe,IAAI,CAAC,OAAO;QAEnB;QACAR,SAASF,IAAI,CAAC,OAAO;IACvB,OAAO;QACLE,SAAS,MAAMb,EAAEsB,MAAM,CAA6C;YAClEC,cAAc;YACdC,SAAS,CAAC,iBAAiB,CAAC;YAC5BC,SAASV,OAAOC,MAAM,CAACd,gBAAgBkB,GAAG,CAAC,CAACF,WAAc,CAAA;oBACxDQ,OAAOR,SAASb,KAAK;oBACrBC,OAAOY,SAASZ,KAAK;gBACvB,CAAA;QACF;QACA,IAAIN,EAAE2B,QAAQ,CAACd,SAAS;YACtBe,QAAQC,IAAI,CAAC;QACf;IACF;IAEA,MAAMX,WAAWhB,cAAc,CAACW,OAAO;IAEvC,IAAIiB,QAAqChB;IACzC,MAAMiB,eAAe,GAAGb,SAASd,kBAAkB,GACjDQ,gBAAgB,MAAM,CAAC,QAAQ,EAAEoB,wBAAwB,GAAG/B,QAAQW,eACnEM,SAAST,kBAAkB,IAAI,IAAI;IAEtC,IAAIE,IAAI,CAAC,0BAA0B,EAAE;QACnCmB,QAAQC;IACV,OAAO,IAAIpB,IAAI,CAAC,yBAAyB,EAAE;QACzCmB,QAAQnB,IAAI,CAAC,yBAAyB;IACxC,OAAO;QACLmB,QAAQ,MAAM9B,EAAEiC,IAAI,CAAC;YACnBV,cAAcQ;YACdP,SAAS,CAAC,MAAM,EAAEN,SAASb,KAAK,CAAC6B,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC;QACpE;QACA,IAAIlC,EAAE2B,QAAQ,CAACG,QAAQ;YACrBF,QAAQC,IAAI,CAAC;QACf;IACF;IAEA,OAAO;QACLM,MAAMjB,SAASZ,KAAK;QACpBwB;IACF;AACF;AAEA,SAASE;IACP,OAAO,AAACI,CAAAA,KAAKC,MAAM,KAAKD,KAAKE,GAAG,CAAC,IAAI,EAAC,EAAGC,OAAO,CAAC;AACnD"}