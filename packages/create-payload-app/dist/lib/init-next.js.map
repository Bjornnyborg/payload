{"version":3,"sources":["../../src/lib/init-next.ts"],"sourcesContent":["import type { CompilerOptions } from 'typescript'\n\nimport * as p from '@clack/prompts'\nimport { parse, stringify } from 'comment-json'\nimport fs from 'fs'\nimport fse from 'fs-extra'\nimport globby from 'globby'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\nimport { promisify } from 'util'\n\nimport type { CliArgs, DbType, NextAppDetails, NextConfigType, PackageManager } from '../types.js'\n\nimport { copyRecursiveSync } from '../utils/copy-recursive-sync.js'\nimport { debug as origDebug, warning } from '../utils/log.js'\nimport { moveMessage } from '../utils/messages.js'\nimport { installPackages } from './install-packages.js'\nimport { wrapNextConfig } from './wrap-next-config.js'\n\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\ntype InitNextArgs = {\n  dbType: DbType\n  nextAppDetails?: NextAppDetails\n  packageManager: PackageManager\n  projectDir: string\n  useDistFiles?: boolean\n} & Pick<CliArgs, '--debug'>\n\ntype InitNextResult =\n  | { isSrcDir: boolean; nextAppDir?: string; reason: string; success: false }\n  | {\n      isSrcDir: boolean\n      nextAppDir: string\n      payloadConfigPath: string\n      success: true\n    }\n\nexport async function initNext(args: InitNextArgs): Promise<InitNextResult> {\n  const { dbType: dbType, packageManager, projectDir } = args\n\n  const nextAppDetails = args.nextAppDetails || (await getNextAppDetails(projectDir))\n\n  if (!nextAppDetails.nextAppDir) {\n    warning(`Could not find app directory in ${projectDir}, creating...`)\n    const createdAppDir = path.resolve(projectDir, nextAppDetails.isSrcDir ? 'src/app' : 'app')\n    fse.mkdirSync(createdAppDir, { recursive: true })\n    nextAppDetails.nextAppDir = createdAppDir\n  }\n\n  const { hasTopLevelLayout, isSrcDir, nextAppDir, nextConfigType } = nextAppDetails\n\n  if (!nextConfigType) {\n    return {\n      isSrcDir,\n      nextAppDir,\n      reason: `Could not determine Next Config type in ${projectDir}. Possibly try renaming next.config.js to next.config.cjs or next.config.mjs.`,\n      success: false,\n    }\n  }\n\n  if (hasTopLevelLayout) {\n    // Output directions for user to move all files from app to top-level directory named `(app)`\n    p.log.warn(moveMessage({ nextAppDir, projectDir }))\n    return {\n      isSrcDir,\n      nextAppDir,\n      reason: 'Found existing layout.tsx in app directory',\n      success: false,\n    }\n  }\n\n  const installSpinner = p.spinner()\n  installSpinner.start('Installing Payload and dependencies...')\n\n  const configurationResult = await installAndConfigurePayload({\n    ...args,\n    nextAppDetails,\n    nextConfigType,\n    useDistFiles: true, // Requires running 'pnpm pack-template-files' in cpa\n  })\n\n  if (configurationResult.success === false) {\n    installSpinner.stop(configurationResult.reason, 1)\n    return { ...configurationResult, isSrcDir, success: false }\n  }\n\n  const { success: installSuccess } = await installDeps(projectDir, packageManager, dbType)\n  if (!installSuccess) {\n    installSpinner.stop('Failed to install dependencies', 1)\n    return {\n      ...configurationResult,\n      isSrcDir,\n      reason: 'Failed to install dependencies',\n      success: false,\n    }\n  }\n\n  // Add `@payload-config` to tsconfig.json `paths`\n  await addPayloadConfigToTsConfig(projectDir, isSrcDir)\n  installSpinner.stop('Successfully installed Payload and dependencies')\n  return { ...configurationResult, isSrcDir, nextAppDir, success: true }\n}\n\nasync function addPayloadConfigToTsConfig(projectDir: string, isSrcDir: boolean) {\n  const tsConfigPath = path.resolve(projectDir, 'tsconfig.json')\n\n  // Check if tsconfig.json exists\n  if (!fs.existsSync(tsConfigPath)) {\n    warning(`Could not find tsconfig.json to add @payload-config path.`)\n    return\n  }\n  const userTsConfigContent = await readFile(tsConfigPath, {\n    encoding: 'utf8',\n  })\n  const userTsConfig = parse(userTsConfigContent) as {\n    compilerOptions?: CompilerOptions\n  }\n\n  const hasBaseUrl =\n    userTsConfig?.compilerOptions?.baseUrl && userTsConfig?.compilerOptions?.baseUrl !== '.'\n  const baseUrl = hasBaseUrl ? userTsConfig?.compilerOptions?.baseUrl : './'\n\n  if (!userTsConfig.compilerOptions && !('extends' in userTsConfig)) {\n    userTsConfig.compilerOptions = {}\n  }\n\n  if (\n    !userTsConfig.compilerOptions?.paths?.['@payload-config'] &&\n    userTsConfig.compilerOptions?.paths\n  ) {\n    userTsConfig.compilerOptions.paths = {\n      ...(userTsConfig.compilerOptions.paths || {}),\n      '@payload-config': [`${baseUrl}${isSrcDir ? 'src/' : ''}payload.config.ts`],\n    }\n    await writeFile(tsConfigPath, stringify(userTsConfig, null, 2), { encoding: 'utf8' })\n  }\n}\n\nasync function installAndConfigurePayload(\n  args: {\n    nextAppDetails: NextAppDetails\n    nextConfigType: NextConfigType\n    useDistFiles?: boolean\n  } & InitNextArgs,\n): Promise<\n  | { payloadConfigPath: string; success: true }\n  | { payloadConfigPath?: string; reason: string; success: false }\n> {\n  const {\n    '--debug': debug,\n    nextAppDetails: { isSrcDir, nextAppDir, nextConfigPath } = {},\n    nextConfigType,\n    projectDir,\n    useDistFiles,\n  } = args\n\n  if (!nextAppDir || !nextConfigPath) {\n    return {\n      reason: 'Could not find app directory or next.config.js',\n      success: false,\n    }\n  }\n\n  const logDebug = (message: string) => {\n    if (debug) {\n      origDebug(message)\n    }\n  }\n\n  if (!fs.existsSync(projectDir)) {\n    return {\n      reason: `Could not find specified project directory at ${projectDir}`,\n      success: false,\n    }\n  }\n\n  const templateFilesPath =\n    dirname.endsWith('dist') || useDistFiles\n      ? path.resolve(dirname, '../..', 'dist/template')\n      : path.resolve(dirname, '../../../../templates/blank')\n\n  logDebug(`Using template files from: ${templateFilesPath}`)\n\n  if (!fs.existsSync(templateFilesPath)) {\n    return {\n      reason: `Could not find template source files from ${templateFilesPath}`,\n      success: false,\n    }\n  } else {\n    logDebug('Found template source files')\n  }\n\n  logDebug(`Copying template files from ${templateFilesPath} to ${nextAppDir}`)\n\n  const templateSrcDir = path.resolve(templateFilesPath, isSrcDir ? '' : 'src')\n\n  logDebug(`templateSrcDir: ${templateSrcDir}`)\n  logDebug(`nextAppDir: ${nextAppDir}`)\n  logDebug(`projectDir: ${projectDir}`)\n  logDebug(`nextConfigPath: ${nextConfigPath}`)\n  logDebug(`payloadConfigPath: ${path.resolve(projectDir, 'payload.config.ts')}`)\n\n  logDebug(\n    `isSrcDir: ${isSrcDir}. source: ${templateSrcDir}. dest: ${path.dirname(nextConfigPath)}`,\n  )\n\n  // This is a little clunky and needs to account for isSrcDir\n  copyRecursiveSync(templateSrcDir, path.dirname(nextConfigPath))\n\n  // Wrap next.config.js with withPayload\n  await wrapNextConfig({ nextConfigPath, nextConfigType })\n\n  return {\n    payloadConfigPath: path.resolve(nextAppDir, '../payload.config.ts'),\n    success: true,\n  }\n}\n\nasync function installDeps(projectDir: string, packageManager: PackageManager, dbType: DbType) {\n  const packagesToInstall = [\n    'payload',\n    '@payloadcms/next',\n    '@payloadcms/richtext-lexical',\n    '@payloadcms/payload-cloud',\n  ].map((pkg) => `${pkg}@latest`)\n\n  packagesToInstall.push(`@payloadcms/db-${dbType}@latest`)\n\n  // Match graphql version of @payloadcms/next\n  packagesToInstall.push('graphql@^16.8.1')\n\n  return await installPackages({ packageManager, packagesToInstall, projectDir })\n}\n\nexport async function getNextAppDetails(projectDir: string): Promise<NextAppDetails> {\n  const isSrcDir = fs.existsSync(path.resolve(projectDir, 'src'))\n\n  // Match next.config.js, next.config.ts, next.config.mjs, next.config.cjs\n  const nextConfigPath: string | undefined = (\n    await globby('next.config.(\\\\w)?(t|j)s', { absolute: true, cwd: projectDir })\n  )?.[0]\n\n  if (!nextConfigPath || nextConfigPath.length === 0) {\n    return {\n      hasTopLevelLayout: false,\n      isSrcDir,\n      isSupportedNextVersion: false,\n      nextConfigPath: undefined,\n      nextVersion: null,\n    }\n  }\n\n  const packageObj = await fse.readJson(path.resolve(projectDir, 'package.json'))\n  // Check if Next.js version is new enough\n  let nextVersion = null\n  if (packageObj.dependencies?.next) {\n    nextVersion = packageObj.dependencies.next\n    // Match versions using regex matching groups\n    const versionMatch = /(?<major>\\d+)/.exec(nextVersion)\n    if (!versionMatch) {\n      p.log.warn(`Could not determine Next.js version from ${nextVersion}`)\n      return {\n        hasTopLevelLayout: false,\n        isSrcDir,\n        isSupportedNextVersion: false,\n        nextConfigPath,\n        nextVersion,\n      }\n    }\n\n    const { major } = versionMatch.groups as { major: string }\n    const majorVersion = parseInt(major)\n    if (majorVersion < 15) {\n      return {\n        hasTopLevelLayout: false,\n        isSrcDir,\n        isSupportedNextVersion: false,\n        nextConfigPath,\n        nextVersion,\n      }\n    }\n  }\n\n  const isSupportedNextVersion = true\n\n  // Check if Payload already installed\n  if (packageObj.dependencies?.payload) {\n    return {\n      hasTopLevelLayout: false,\n      isPayloadInstalled: true,\n      isSrcDir,\n      isSupportedNextVersion,\n      nextConfigPath,\n      nextVersion,\n    }\n  }\n\n  let nextAppDir: string | undefined = (\n    await globby(['**/app'], {\n      absolute: true,\n      cwd: projectDir,\n      ignore: ['**/node_modules/**'],\n      onlyDirectories: true,\n    })\n  )?.[0]\n\n  if (!nextAppDir || nextAppDir.length === 0) {\n    nextAppDir = undefined\n  }\n\n  const configType = getProjectType({ nextConfigPath, packageObj })\n\n  const hasTopLevelLayout = nextAppDir\n    ? fs.existsSync(path.resolve(nextAppDir, 'layout.tsx'))\n    : false\n\n  return {\n    hasTopLevelLayout,\n    isSrcDir,\n    isSupportedNextVersion,\n    nextAppDir,\n    nextConfigPath,\n    nextConfigType: configType,\n    nextVersion,\n  }\n}\n\nfunction getProjectType(args: {\n  nextConfigPath: string\n  packageObj: Record<string, unknown>\n}): NextConfigType {\n  const { nextConfigPath, packageObj } = args\n\n  if (nextConfigPath.endsWith('.ts')) {\n    return 'ts'\n  }\n\n  if (nextConfigPath.endsWith('.mjs')) {\n    return 'esm'\n  }\n  if (nextConfigPath.endsWith('.cjs')) {\n    return 'cjs'\n  }\n\n  const packageJsonType = packageObj.type\n  if (packageJsonType === 'module') {\n    return 'esm'\n  }\n  if (packageJsonType === 'commonjs') {\n    return 'cjs'\n  }\n\n  return 'cjs'\n}\n"],"names":["p","parse","stringify","fs","fse","globby","fileURLToPath","path","promisify","copyRecursiveSync","debug","origDebug","warning","moveMessage","installPackages","wrapNextConfig","readFile","writeFile","filename","url","dirname","initNext","args","dbType","packageManager","projectDir","nextAppDetails","getNextAppDetails","nextAppDir","createdAppDir","resolve","isSrcDir","mkdirSync","recursive","hasTopLevelLayout","nextConfigType","reason","success","log","warn","installSpinner","spinner","start","configurationResult","installAndConfigurePayload","useDistFiles","stop","installSuccess","installDeps","addPayloadConfigToTsConfig","tsConfigPath","existsSync","userTsConfigContent","encoding","userTsConfig","hasBaseUrl","compilerOptions","baseUrl","paths","nextConfigPath","logDebug","message","templateFilesPath","endsWith","templateSrcDir","payloadConfigPath","packagesToInstall","map","pkg","push","absolute","cwd","length","isSupportedNextVersion","undefined","nextVersion","packageObj","readJson","dependencies","next","versionMatch","exec","major","groups","majorVersion","parseInt","payload","isPayloadInstalled","ignore","onlyDirectories","configType","getProjectType","packageJsonType","type"],"mappings":"AAEA,YAAYA,OAAO,iBAAgB;AACnC,SAASC,KAAK,EAAEC,SAAS,QAAQ,eAAc;AAC/C,OAAOC,QAAQ,KAAI;AACnB,OAAOC,SAAS,WAAU;AAC1B,OAAOC,YAAY,SAAQ;AAC3B,SAASC,aAAa,QAAQ,WAAU;AACxC,OAAOC,UAAU,OAAM;AACvB,SAASC,SAAS,QAAQ,OAAM;AAIhC,SAASC,iBAAiB,QAAQ,kCAAiC;AACnE,SAASC,SAASC,SAAS,EAAEC,OAAO,QAAQ,kBAAiB;AAC7D,SAASC,WAAW,QAAQ,uBAAsB;AAClD,SAASC,eAAe,QAAQ,wBAAuB;AACvD,SAASC,cAAc,QAAQ,wBAAuB;AAEtD,MAAMC,WAAWR,UAAUL,GAAGa,QAAQ;AACtC,MAAMC,YAAYT,UAAUL,GAAGc,SAAS;AAExC,MAAMC,WAAWZ,cAAc,YAAYa,GAAG;AAC9C,MAAMC,UAAUb,KAAKa,OAAO,CAACF;AAmB7B,OAAO,eAAeG,SAASC,IAAkB;IAC/C,MAAM,EAAEC,QAAQA,MAAM,EAAEC,cAAc,EAAEC,UAAU,EAAE,GAAGH;IAEvD,MAAMI,iBAAiBJ,KAAKI,cAAc,IAAK,MAAMC,kBAAkBF;IAEvE,IAAI,CAACC,eAAeE,UAAU,EAAE;QAC9BhB,QAAQ,CAAC,gCAAgC,EAAEa,WAAW,aAAa,CAAC;QACpE,MAAMI,gBAAgBtB,KAAKuB,OAAO,CAACL,YAAYC,eAAeK,QAAQ,GAAG,YAAY;QACrF3B,IAAI4B,SAAS,CAACH,eAAe;YAAEI,WAAW;QAAK;QAC/CP,eAAeE,UAAU,GAAGC;IAC9B;IAEA,MAAM,EAAEK,iBAAiB,EAAEH,QAAQ,EAAEH,UAAU,EAAEO,cAAc,EAAE,GAAGT;IAEpE,IAAI,CAACS,gBAAgB;QACnB,OAAO;YACLJ;YACAH;YACAQ,QAAQ,CAAC,wCAAwC,EAAEX,WAAW,6EAA6E,CAAC;YAC5IY,SAAS;QACX;IACF;IAEA,IAAIH,mBAAmB;QACrB,6FAA6F;QAC7FlC,EAAEsC,GAAG,CAACC,IAAI,CAAC1B,YAAY;YAAEe;YAAYH;QAAW;QAChD,OAAO;YACLM;YACAH;YACAQ,QAAQ;YACRC,SAAS;QACX;IACF;IAEA,MAAMG,iBAAiBxC,EAAEyC,OAAO;IAChCD,eAAeE,KAAK,CAAC;IAErB,MAAMC,sBAAsB,MAAMC,2BAA2B;QAC3D,GAAGtB,IAAI;QACPI;QACAS;QACAU,cAAc;IAChB;IAEA,IAAIF,oBAAoBN,OAAO,KAAK,OAAO;QACzCG,eAAeM,IAAI,CAACH,oBAAoBP,MAAM,EAAE;QAChD,OAAO;YAAE,GAAGO,mBAAmB;YAAEZ;YAAUM,SAAS;QAAM;IAC5D;IAEA,MAAM,EAAEA,SAASU,cAAc,EAAE,GAAG,MAAMC,YAAYvB,YAAYD,gBAAgBD;IAClF,IAAI,CAACwB,gBAAgB;QACnBP,eAAeM,IAAI,CAAC,kCAAkC;QACtD,OAAO;YACL,GAAGH,mBAAmB;YACtBZ;YACAK,QAAQ;YACRC,SAAS;QACX;IACF;IAEA,iDAAiD;IACjD,MAAMY,2BAA2BxB,YAAYM;IAC7CS,eAAeM,IAAI,CAAC;IACpB,OAAO;QAAE,GAAGH,mBAAmB;QAAEZ;QAAUH;QAAYS,SAAS;IAAK;AACvE;AAEA,eAAeY,2BAA2BxB,UAAkB,EAAEM,QAAiB;IAC7E,MAAMmB,eAAe3C,KAAKuB,OAAO,CAACL,YAAY;IAE9C,gCAAgC;IAChC,IAAI,CAACtB,GAAGgD,UAAU,CAACD,eAAe;QAChCtC,QAAQ,CAAC,yDAAyD,CAAC;QACnE;IACF;IACA,MAAMwC,sBAAsB,MAAMpC,SAASkC,cAAc;QACvDG,UAAU;IACZ;IACA,MAAMC,eAAerD,MAAMmD;IAI3B,MAAMG,aACJD,cAAcE,iBAAiBC,WAAWH,cAAcE,iBAAiBC,YAAY;IACvF,MAAMA,UAAUF,aAAaD,cAAcE,iBAAiBC,UAAU;IAEtE,IAAI,CAACH,aAAaE,eAAe,IAAI,CAAE,CAAA,aAAaF,YAAW,GAAI;QACjEA,aAAaE,eAAe,GAAG,CAAC;IAClC;IAEA,IACE,CAACF,aAAaE,eAAe,EAAEE,OAAO,CAAC,kBAAkB,IACzDJ,aAAaE,eAAe,EAAEE,OAC9B;QACAJ,aAAaE,eAAe,CAACE,KAAK,GAAG;YACnC,GAAIJ,aAAaE,eAAe,CAACE,KAAK,IAAI,CAAC,CAAC;YAC5C,mBAAmB;gBAAC,GAAGD,UAAU1B,WAAW,SAAS,GAAG,iBAAiB,CAAC;aAAC;QAC7E;QACA,MAAMd,UAAUiC,cAAchD,UAAUoD,cAAc,MAAM,IAAI;YAAED,UAAU;QAAO;IACrF;AACF;AAEA,eAAeT,2BACbtB,IAIgB;IAKhB,MAAM,EACJ,WAAWZ,KAAK,EAChBgB,gBAAgB,EAAEK,QAAQ,EAAEH,UAAU,EAAE+B,cAAc,EAAE,GAAG,CAAC,CAAC,EAC7DxB,cAAc,EACdV,UAAU,EACVoB,YAAY,EACb,GAAGvB;IAEJ,IAAI,CAACM,cAAc,CAAC+B,gBAAgB;QAClC,OAAO;YACLvB,QAAQ;YACRC,SAAS;QACX;IACF;IAEA,MAAMuB,WAAW,CAACC;QAChB,IAAInD,OAAO;YACTC,UAAUkD;QACZ;IACF;IAEA,IAAI,CAAC1D,GAAGgD,UAAU,CAAC1B,aAAa;QAC9B,OAAO;YACLW,QAAQ,CAAC,8CAA8C,EAAEX,YAAY;YACrEY,SAAS;QACX;IACF;IAEA,MAAMyB,oBACJ1C,QAAQ2C,QAAQ,CAAC,WAAWlB,eACxBtC,KAAKuB,OAAO,CAACV,SAAS,SAAS,mBAC/Bb,KAAKuB,OAAO,CAACV,SAAS;IAE5BwC,SAAS,CAAC,2BAA2B,EAAEE,mBAAmB;IAE1D,IAAI,CAAC3D,GAAGgD,UAAU,CAACW,oBAAoB;QACrC,OAAO;YACL1B,QAAQ,CAAC,0CAA0C,EAAE0B,mBAAmB;YACxEzB,SAAS;QACX;IACF,OAAO;QACLuB,SAAS;IACX;IAEAA,SAAS,CAAC,4BAA4B,EAAEE,kBAAkB,IAAI,EAAElC,YAAY;IAE5E,MAAMoC,iBAAiBzD,KAAKuB,OAAO,CAACgC,mBAAmB/B,WAAW,KAAK;IAEvE6B,SAAS,CAAC,gBAAgB,EAAEI,gBAAgB;IAC5CJ,SAAS,CAAC,YAAY,EAAEhC,YAAY;IACpCgC,SAAS,CAAC,YAAY,EAAEnC,YAAY;IACpCmC,SAAS,CAAC,gBAAgB,EAAED,gBAAgB;IAC5CC,SAAS,CAAC,mBAAmB,EAAErD,KAAKuB,OAAO,CAACL,YAAY,sBAAsB;IAE9EmC,SACE,CAAC,UAAU,EAAE7B,SAAS,UAAU,EAAEiC,eAAe,QAAQ,EAAEzD,KAAKa,OAAO,CAACuC,iBAAiB;IAG3F,4DAA4D;IAC5DlD,kBAAkBuD,gBAAgBzD,KAAKa,OAAO,CAACuC;IAE/C,uCAAuC;IACvC,MAAM5C,eAAe;QAAE4C;QAAgBxB;IAAe;IAEtD,OAAO;QACL8B,mBAAmB1D,KAAKuB,OAAO,CAACF,YAAY;QAC5CS,SAAS;IACX;AACF;AAEA,eAAeW,YAAYvB,UAAkB,EAAED,cAA8B,EAAED,MAAc;IAC3F,MAAM2C,oBAAoB;QACxB;QACA;QACA;QACA;KACD,CAACC,GAAG,CAAC,CAACC,MAAQ,GAAGA,IAAI,OAAO,CAAC;IAE9BF,kBAAkBG,IAAI,CAAC,CAAC,eAAe,EAAE9C,OAAO,OAAO,CAAC;IAExD,4CAA4C;IAC5C2C,kBAAkBG,IAAI,CAAC;IAEvB,OAAO,MAAMvD,gBAAgB;QAAEU;QAAgB0C;QAAmBzC;IAAW;AAC/E;AAEA,OAAO,eAAeE,kBAAkBF,UAAkB;IACxD,MAAMM,WAAW5B,GAAGgD,UAAU,CAAC5C,KAAKuB,OAAO,CAACL,YAAY;IAExD,yEAAyE;IACzE,MAAMkC,iBACJ,CAAA,MAAMtD,OAAO,4BAA4B;QAAEiE,UAAU;QAAMC,KAAK9C;IAAW,EAAC,GAC3E,CAAC,EAAE;IAEN,IAAI,CAACkC,kBAAkBA,eAAea,MAAM,KAAK,GAAG;QAClD,OAAO;YACLtC,mBAAmB;YACnBH;YACA0C,wBAAwB;YACxBd,gBAAgBe;YAChBC,aAAa;QACf;IACF;IAEA,MAAMC,aAAa,MAAMxE,IAAIyE,QAAQ,CAACtE,KAAKuB,OAAO,CAACL,YAAY;IAC/D,yCAAyC;IACzC,IAAIkD,cAAc;IAClB,IAAIC,WAAWE,YAAY,EAAEC,MAAM;QACjCJ,cAAcC,WAAWE,YAAY,CAACC,IAAI;QAC1C,6CAA6C;QAC7C,MAAMC,eAAe,gBAAgBC,IAAI,CAACN;QAC1C,IAAI,CAACK,cAAc;YACjBhF,EAAEsC,GAAG,CAACC,IAAI,CAAC,CAAC,yCAAyC,EAAEoC,aAAa;YACpE,OAAO;gBACLzC,mBAAmB;gBACnBH;gBACA0C,wBAAwB;gBACxBd;gBACAgB;YACF;QACF;QAEA,MAAM,EAAEO,KAAK,EAAE,GAAGF,aAAaG,MAAM;QACrC,MAAMC,eAAeC,SAASH;QAC9B,IAAIE,eAAe,IAAI;YACrB,OAAO;gBACLlD,mBAAmB;gBACnBH;gBACA0C,wBAAwB;gBACxBd;gBACAgB;YACF;QACF;IACF;IAEA,MAAMF,yBAAyB;IAE/B,qCAAqC;IACrC,IAAIG,WAAWE,YAAY,EAAEQ,SAAS;QACpC,OAAO;YACLpD,mBAAmB;YACnBqD,oBAAoB;YACpBxD;YACA0C;YACAd;YACAgB;QACF;IACF;IAEA,IAAI/C,aACF,CAAA,MAAMvB,OAAO;QAAC;KAAS,EAAE;QACvBiE,UAAU;QACVC,KAAK9C;QACL+D,QAAQ;YAAC;SAAqB;QAC9BC,iBAAiB;IACnB,EAAC,GACA,CAAC,EAAE;IAEN,IAAI,CAAC7D,cAAcA,WAAW4C,MAAM,KAAK,GAAG;QAC1C5C,aAAa8C;IACf;IAEA,MAAMgB,aAAaC,eAAe;QAAEhC;QAAgBiB;IAAW;IAE/D,MAAM1C,oBAAoBN,aACtBzB,GAAGgD,UAAU,CAAC5C,KAAKuB,OAAO,CAACF,YAAY,iBACvC;IAEJ,OAAO;QACLM;QACAH;QACA0C;QACA7C;QACA+B;QACAxB,gBAAgBuD;QAChBf;IACF;AACF;AAEA,SAASgB,eAAerE,IAGvB;IACC,MAAM,EAAEqC,cAAc,EAAEiB,UAAU,EAAE,GAAGtD;IAEvC,IAAIqC,eAAeI,QAAQ,CAAC,QAAQ;QAClC,OAAO;IACT;IAEA,IAAIJ,eAAeI,QAAQ,CAAC,SAAS;QACnC,OAAO;IACT;IACA,IAAIJ,eAAeI,QAAQ,CAAC,SAAS;QACnC,OAAO;IACT;IAEA,MAAM6B,kBAAkBhB,WAAWiB,IAAI;IACvC,IAAID,oBAAoB,UAAU;QAChC,OAAO;IACT;IACA,IAAIA,oBAAoB,YAAY;QAClC,OAAO;IACT;IAEA,OAAO;AACT"}