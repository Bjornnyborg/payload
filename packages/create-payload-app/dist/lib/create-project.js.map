{"version":3,"sources":["../../src/lib/create-project.ts"],"sourcesContent":["import * as p from '@clack/prompts'\nimport chalk from 'chalk'\nimport execa from 'execa'\nimport fse from 'fs-extra'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\n\nimport type {\n  CliArgs,\n  DbDetails,\n  PackageManager,\n  ProjectExample,\n  ProjectTemplate,\n} from '../types.js'\n\nimport { tryInitRepoAndCommit } from '../utils/git.js'\nimport { debug, error, info, warning } from '../utils/log.js'\nimport { configurePayloadConfig } from './configure-payload-config.js'\nimport { configurePluginProject } from './configure-plugin-project.js'\nimport { downloadExample } from './download-example.js'\nimport { downloadTemplate } from './download-template.js'\nimport { generateSecret } from './generate-secret.js'\nimport { manageEnvFiles } from './manage-env-files.js'\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\nasync function createOrFindProjectDir(projectDir: string): Promise<void> {\n  const pathExists = await fse.pathExists(projectDir)\n  if (!pathExists) {\n    await fse.mkdir(projectDir)\n  }\n}\n\nasync function installDeps(args: {\n  cliArgs: CliArgs\n  packageManager: PackageManager\n  projectDir: string\n}): Promise<boolean> {\n  const { cliArgs, packageManager, projectDir } = args\n  if (cliArgs['--no-deps']) {\n    return true\n  }\n  let installCmd = 'npm install --legacy-peer-deps'\n\n  if (packageManager === 'yarn') {\n    installCmd = 'yarn'\n  } else if (packageManager === 'pnpm') {\n    installCmd = 'pnpm install'\n  } else if (packageManager === 'bun') {\n    installCmd = 'bun install'\n  }\n\n  try {\n    await execa.command(installCmd, {\n      cwd: path.resolve(projectDir),\n    })\n    return true\n  } catch (err: unknown) {\n    error(`Error installing dependencies${err instanceof Error ? `: ${err.message}` : ''}.`)\n    return false\n  }\n}\n\ntype TemplateOrExample =\n  | {\n      example: ProjectExample\n    }\n  | {\n      template: ProjectTemplate\n    }\n\nexport async function createProject(\n  args: {\n    cliArgs: CliArgs\n    dbDetails?: DbDetails\n    packageManager: PackageManager\n    projectDir: string\n    projectName: string\n  } & TemplateOrExample,\n): Promise<void> {\n  const { cliArgs, dbDetails, packageManager, projectDir, projectName } = args\n\n  if (cliArgs['--dry-run']) {\n    debug(`Dry run: Creating project in ${chalk.green(projectDir)}`)\n    return\n  }\n\n  await createOrFindProjectDir(projectDir)\n\n  if (cliArgs['--local-example']) {\n    // Copy example from local path. For development purposes.\n    const localExample = path.resolve(dirname, '../../../../examples/', cliArgs['--local-example'])\n    await fse.copy(localExample, projectDir)\n  }\n\n  if (cliArgs['--local-template']) {\n    // Copy template from local path. For development purposes.\n    const localTemplate = path.resolve(\n      dirname,\n      '../../../../templates/',\n      cliArgs['--local-template'],\n    )\n    await fse.copy(localTemplate, projectDir)\n  } else if ('template' in args && 'url' in args.template) {\n    const { template } = args\n    if (cliArgs['--branch']) {\n      template.url = `${template.url.split('#')?.[0]}#${cliArgs['--branch']}`\n    }\n\n    await downloadTemplate({\n      debug: cliArgs['--debug'],\n      projectDir,\n      template,\n    })\n  } else if ('example' in args && 'url' in args.example) {\n    const { example } = args\n    if (cliArgs['--branch']) {\n      example.url = `${example.url.split('#')?.[0]}#${cliArgs['--branch']}`\n    }\n\n    await downloadExample({\n      debug: cliArgs['--debug'],\n      example,\n      projectDir,\n    })\n  }\n\n  const spinner = p.spinner()\n  spinner.start('Checking latest Payload version...')\n\n  await updatePackageJSON({ projectDir, projectName })\n\n  if ('template' in args) {\n    if (args.template.type === 'plugin') {\n      spinner.message('Configuring Plugin...')\n      configurePluginProject({ projectDirPath: projectDir, projectName })\n    } else {\n      spinner.message('Configuring Payload...')\n      await configurePayloadConfig({\n        dbType: dbDetails?.type,\n        projectDirOrConfigPath: { projectDir },\n      })\n    }\n  }\n\n  // Call manageEnvFiles before initializing Git\n  if (dbDetails) {\n    await manageEnvFiles({\n      cliArgs,\n      databaseType: dbDetails.type,\n      databaseUri: dbDetails.dbUri,\n      payloadSecret: generateSecret(),\n      projectDir,\n      template: 'template' in args ? args.template : undefined,\n    })\n  }\n\n  // Remove yarn.lock file. This is only desired in Payload Cloud.\n  const lockPath = path.resolve(projectDir, 'pnpm-lock.yaml')\n  if (fse.existsSync(lockPath)) {\n    await fse.remove(lockPath)\n  }\n\n  if (!cliArgs['--no-deps']) {\n    info(`Using ${packageManager}.\\n`)\n    spinner.message('Installing dependencies...')\n    const result = await installDeps({ cliArgs, packageManager, projectDir })\n    if (result) {\n      spinner.stop('Successfully installed Payload and dependencies')\n    } else {\n      spinner.stop('Error installing dependencies', 1)\n    }\n  } else {\n    spinner.stop('Dependency installation skipped')\n  }\n\n  if (!cliArgs['--no-git']) {\n    tryInitRepoAndCommit({ cwd: projectDir })\n  }\n}\n\nexport async function updatePackageJSON(args: {\n  projectDir: string\n  projectName: string\n}): Promise<void> {\n  const { projectDir, projectName } = args\n  const packageJsonPath = path.resolve(projectDir, 'package.json')\n  try {\n    const packageObj = await fse.readJson(packageJsonPath)\n    packageObj.name = projectName\n    await fse.writeJson(packageJsonPath, packageObj, { spaces: 2 })\n  } catch (err: unknown) {\n    warning(`Unable to update name in package.json. ${err instanceof Error ? err.message : ''}`)\n  }\n}\n"],"names":["p","chalk","execa","fse","fileURLToPath","path","tryInitRepoAndCommit","debug","error","info","warning","configurePayloadConfig","configurePluginProject","downloadExample","downloadTemplate","generateSecret","manageEnvFiles","filename","url","dirname","createOrFindProjectDir","projectDir","pathExists","mkdir","installDeps","args","cliArgs","packageManager","installCmd","command","cwd","resolve","err","Error","message","createProject","dbDetails","projectName","green","localExample","copy","localTemplate","template","split","example","spinner","start","updatePackageJSON","type","projectDirPath","dbType","projectDirOrConfigPath","databaseType","databaseUri","dbUri","payloadSecret","undefined","lockPath","existsSync","remove","result","stop","packageJsonPath","packageObj","readJson","name","writeJson","spaces"],"mappings":"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"}