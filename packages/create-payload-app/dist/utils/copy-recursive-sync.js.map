{"version":3,"sources":["../../src/utils/copy-recursive-sync.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\n/**\n * Recursively copy files from src to dest\n *\n * @internal\n */\nexport function copyRecursiveSync(src: string, dest: string, ignoreRegex?: string[]): void {\n  const exists = fs.existsSync(src)\n  const stats = exists && fs.statSync(src)\n  const isDirectory = exists && stats !== false && stats.isDirectory()\n  if (isDirectory) {\n    fs.mkdirSync(dest, { recursive: true })\n    fs.readdirSync(src).forEach((childItemName) => {\n      if (\n        ignoreRegex &&\n        ignoreRegex.some((regex) => {\n          return new RegExp(regex).test(childItemName)\n        })\n      ) {\n        console.log(`Ignoring ${childItemName} due to regex: ${ignoreRegex}`)\n        return\n      }\n      copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName), ignoreRegex)\n    })\n  } else {\n    fs.copyFileSync(src, dest)\n  }\n}\n"],"names":["fs","path","copyRecursiveSync","src","dest","ignoreRegex","exists","existsSync","stats","statSync","isDirectory","mkdirSync","recursive","readdirSync","forEach","childItemName","some","regex","RegExp","test","console","log","join","copyFileSync"],"mappings":"AAAA,OAAOA,QAAQ,KAAI;AACnB,OAAOC,UAAU,OAAM;AAEvB;;;;CAIC,GACD,OAAO,SAASC,kBAAkBC,GAAW,EAAEC,IAAY,EAAEC,WAAsB;IACjF,MAAMC,SAASN,GAAGO,UAAU,CAACJ;IAC7B,MAAMK,QAAQF,UAAUN,GAAGS,QAAQ,CAACN;IACpC,MAAMO,cAAcJ,UAAUE,UAAU,SAASA,MAAME,WAAW;IAClE,IAAIA,aAAa;QACfV,GAAGW,SAAS,CAACP,MAAM;YAAEQ,WAAW;QAAK;QACrCZ,GAAGa,WAAW,CAACV,KAAKW,OAAO,CAAC,CAACC;YAC3B,IACEV,eACAA,YAAYW,IAAI,CAAC,CAACC;gBAChB,OAAO,IAAIC,OAAOD,OAAOE,IAAI,CAACJ;YAChC,IACA;gBACAK,QAAQC,GAAG,CAAC,CAAC,SAAS,EAAEN,cAAc,eAAe,EAAEV,aAAa;gBACpE;YACF;YACAH,kBAAkBD,KAAKqB,IAAI,CAACnB,KAAKY,gBAAgBd,KAAKqB,IAAI,CAAClB,MAAMW,gBAAgBV;QACnF;IACF,OAAO;QACLL,GAAGuB,YAAY,CAACpB,KAAKC;IACvB;AACF"}