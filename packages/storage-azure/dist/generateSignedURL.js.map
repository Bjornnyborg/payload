{"version":3,"sources":["../src/generateSignedURL.ts"],"sourcesContent":["import type { ContainerClient, StorageSharedKeyCredential } from '@azure/storage-blob'\nimport type { ClientUploadsAccess } from '@payloadcms/plugin-cloud-storage/types'\nimport type { PayloadHandler } from 'payload'\n\nimport { BlobSASPermissions, generateBlobSASQueryParameters } from '@azure/storage-blob'\nimport path from 'path'\nimport { APIError, Forbidden } from 'payload'\n\nimport type { AzureStorageOptions } from './index.js'\n\ninterface Args {\n  access?: ClientUploadsAccess\n  collections: AzureStorageOptions['collections']\n  containerName: string\n  getStorageClient: () => ContainerClient\n}\n\nconst defaultAccess: Args['access'] = ({ req }) => !!req.user\n\nexport const getGenerateSignedURLHandler = ({\n  access = defaultAccess,\n  collections,\n  containerName,\n  getStorageClient,\n}: Args): PayloadHandler => {\n  return async (req) => {\n    if (!req.json) {\n      throw new APIError('Unreachable')\n    }\n\n    const { collectionSlug, filename, mimeType } = await req.json()\n\n    const collectionS3Config = collections[collectionSlug]\n    if (!collectionS3Config) {\n      throw new APIError(`Collection ${collectionSlug} was not found in S3 options`)\n    }\n\n    const prefix = (typeof collectionS3Config === 'object' && collectionS3Config.prefix) || ''\n\n    if (!(await access({ collectionSlug, req }))) {\n      throw new Forbidden()\n    }\n\n    const fileKey = path.posix.join(prefix, filename)\n\n    const blobClient = getStorageClient().getBlobClient(fileKey)\n\n    const sasToken = generateBlobSASQueryParameters(\n      {\n        blobName: fileKey,\n        containerName,\n        contentType: mimeType,\n        expiresOn: new Date(Date.now() + 30 * 60 * 1000),\n        permissions: BlobSASPermissions.parse('w'),\n        startsOn: new Date(),\n      },\n      getStorageClient().credential as StorageSharedKeyCredential,\n    )\n\n    return Response.json({ url: `${blobClient.url}?${sasToken.toString()}` })\n  }\n}\n"],"names":["BlobSASPermissions","generateBlobSASQueryParameters","path","APIError","Forbidden","defaultAccess","req","user","getGenerateSignedURLHandler","access","collections","containerName","getStorageClient","json","collectionSlug","filename","mimeType","collectionS3Config","prefix","fileKey","posix","join","blobClient","getBlobClient","sasToken","blobName","contentType","expiresOn","Date","now","permissions","parse","startsOn","credential","Response","url","toString"],"mappings":"AAIA,SAASA,kBAAkB,EAAEC,8BAA8B,QAAQ,sBAAqB;AACxF,OAAOC,UAAU,OAAM;AACvB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,UAAS;AAW7C,MAAMC,gBAAgC,CAAC,EAAEC,GAAG,EAAE,GAAK,CAAC,CAACA,IAAIC,IAAI;AAE7D,OAAO,MAAMC,8BAA8B,CAAC,EAC1CC,SAASJ,aAAa,EACtBK,WAAW,EACXC,aAAa,EACbC,gBAAgB,EACX;IACL,OAAO,OAAON;QACZ,IAAI,CAACA,IAAIO,IAAI,EAAE;YACb,MAAM,IAAIV,SAAS;QACrB;QAEA,MAAM,EAAEW,cAAc,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAG,MAAMV,IAAIO,IAAI;QAE7D,MAAMI,qBAAqBP,WAAW,CAACI,eAAe;QACtD,IAAI,CAACG,oBAAoB;YACvB,MAAM,IAAId,SAAS,CAAC,WAAW,EAAEW,eAAe,4BAA4B,CAAC;QAC/E;QAEA,MAAMI,SAAS,AAAC,OAAOD,uBAAuB,YAAYA,mBAAmBC,MAAM,IAAK;QAExF,IAAI,CAAE,MAAMT,OAAO;YAAEK;YAAgBR;QAAI,IAAK;YAC5C,MAAM,IAAIF;QACZ;QAEA,MAAMe,UAAUjB,KAAKkB,KAAK,CAACC,IAAI,CAACH,QAAQH;QAExC,MAAMO,aAAaV,mBAAmBW,aAAa,CAACJ;QAEpD,MAAMK,WAAWvB,+BACf;YACEwB,UAAUN;YACVR;YACAe,aAAaV;YACbW,WAAW,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK;YAC3CC,aAAa9B,mBAAmB+B,KAAK,CAAC;YACtCC,UAAU,IAAIJ;QAChB,GACAhB,mBAAmBqB,UAAU;QAG/B,OAAOC,SAASrB,IAAI,CAAC;YAAEsB,KAAK,GAAGb,WAAWa,GAAG,CAAC,CAAC,EAAEX,SAASY,QAAQ,IAAI;QAAC;IACzE;AACF,EAAC"}