{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { ContainerClient } from '@azure/storage-blob'\nimport type {\n  Adapter,\n  ClientUploadsConfig,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { Config, Plugin, UploadCollectionSlug } from 'payload'\n\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\nimport { initClientUploads } from '@payloadcms/plugin-cloud-storage/utilities'\n\nimport { getGenerateSignedURLHandler } from './generateSignedURL.js'\nimport { getGenerateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\nimport { getStorageClient as getStorageClientFunc } from './utils/getStorageClient.js'\n\nexport type AzureStorageOptions = {\n  /**\n   * Whether or not to allow the container to be created if it does not exist\n   *\n   * @default false\n   */\n  allowContainerCreate: boolean\n\n  /**\n   * Base URL for the Azure Blob storage account\n   */\n  baseURL: string\n\n  /**\n   * Do uploads directly on the client to bypass limits on Vercel. You must allow CORS PUT method to your website.\n   */\n  clientUploads?: ClientUploadsConfig\n\n  /**\n   * Collection options to apply the Azure Blob adapter to.\n   */\n  collections: Partial<Record<UploadCollectionSlug, Omit<CollectionOptions, 'adapter'> | true>>\n\n  /**\n   * Azure Blob storage connection string\n   */\n  connectionString: string\n\n  /**\n   * Azure Blob storage container name\n   */\n  containerName: string\n\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n}\n\ntype AzureStoragePlugin = (azureStorageArgs: AzureStorageOptions) => Plugin\n\nexport const azureStorage: AzureStoragePlugin =\n  (azureStorageOptions: AzureStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    const getStorageClient = () =>\n      getStorageClientFunc({\n        connectionString: azureStorageOptions.connectionString,\n        containerName: azureStorageOptions.containerName,\n      })\n\n    const isPluginDisabled = azureStorageOptions.enabled === false\n\n    initClientUploads({\n      clientHandler: '@payloadcms/storage-azure/client#AzureClientUploadHandler',\n      collections: azureStorageOptions.collections,\n      config: incomingConfig,\n      enabled: !isPluginDisabled && Boolean(azureStorageOptions.clientUploads),\n      serverHandler: getGenerateSignedURLHandler({\n        access:\n          typeof azureStorageOptions.clientUploads === 'object'\n            ? azureStorageOptions.clientUploads.access\n            : undefined,\n        collections: azureStorageOptions.collections,\n        containerName: azureStorageOptions.containerName,\n        getStorageClient,\n      }),\n      serverHandlerPath: '/storage-azure-generate-signed-url',\n    })\n\n    if (isPluginDisabled) {\n      return incomingConfig\n    }\n\n    const adapter = azureStorageInternal(getStorageClient, azureStorageOptions)\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      azureStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction azureStorageInternal(\n  getStorageClient: () => ContainerClient,\n  {\n    allowContainerCreate,\n    baseURL,\n    clientUploads,\n    connectionString,\n    containerName,\n  }: AzureStorageOptions,\n): Adapter {\n  const createContainerIfNotExists = () => {\n    void getStorageClientFunc({ connectionString, containerName }).createIfNotExists({\n      access: 'blob',\n    })\n  }\n\n  return ({ collection, prefix }): GeneratedAdapter => {\n    return {\n      name: 'azure',\n      clientUploads,\n      generateURL: getGenerateURL({ baseURL, containerName }),\n      handleDelete: getHandleDelete({ collection, getStorageClient }),\n      handleUpload: getHandleUpload({\n        collection,\n        getStorageClient,\n        prefix,\n      }),\n      staticHandler: getHandler({ collection, getStorageClient }),\n      ...(allowContainerCreate && { onInit: createContainerIfNotExists }),\n    }\n  }\n}\n\nexport { getStorageClientFunc as getStorageClient }\n"],"names":["cloudStoragePlugin","initClientUploads","getGenerateSignedURLHandler","getGenerateURL","getHandleDelete","getHandleUpload","getHandler","getStorageClient","getStorageClientFunc","azureStorage","azureStorageOptions","incomingConfig","connectionString","containerName","isPluginDisabled","enabled","clientHandler","collections","config","Boolean","clientUploads","serverHandler","access","undefined","serverHandlerPath","adapter","azureStorageInternal","collectionsWithAdapter","Object","entries","reduce","acc","slug","collOptions","map","collection","upload","disableLocalStorage","allowContainerCreate","baseURL","createContainerIfNotExists","createIfNotExists","prefix","name","generateURL","handleDelete","handleUpload","staticHandler","onInit"],"mappings":"AAUA,SAASA,kBAAkB,QAAQ,mCAAkC;AACrE,SAASC,iBAAiB,QAAQ,6CAA4C;AAE9E,SAASC,2BAA2B,QAAQ,yBAAwB;AACpE,SAASC,cAAc,QAAQ,mBAAkB;AACjD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,UAAU,QAAQ,qBAAoB;AAC/C,SAASC,oBAAoBC,oBAAoB,QAAQ,8BAA6B;AA6CtF,OAAO,MAAMC,eACX,CAACC,sBACD,CAACC;QACC,MAAMJ,mBAAmB,IACvBC,qBAAqB;gBACnBI,kBAAkBF,oBAAoBE,gBAAgB;gBACtDC,eAAeH,oBAAoBG,aAAa;YAClD;QAEF,MAAMC,mBAAmBJ,oBAAoBK,OAAO,KAAK;QAEzDd,kBAAkB;YAChBe,eAAe;YACfC,aAAaP,oBAAoBO,WAAW;YAC5CC,QAAQP;YACRI,SAAS,CAACD,oBAAoBK,QAAQT,oBAAoBU,aAAa;YACvEC,eAAenB,4BAA4B;gBACzCoB,QACE,OAAOZ,oBAAoBU,aAAa,KAAK,WACzCV,oBAAoBU,aAAa,CAACE,MAAM,GACxCC;gBACNN,aAAaP,oBAAoBO,WAAW;gBAC5CJ,eAAeH,oBAAoBG,aAAa;gBAChDN;YACF;YACAiB,mBAAmB;QACrB;QAEA,IAAIV,kBAAkB;YACpB,OAAOH;QACT;QAEA,MAAMc,UAAUC,qBAAqBnB,kBAAkBG;QAEvD,+CAA+C;QAC/C,MAAMiB,yBAAmEC,OAAOC,OAAO,CACrFnB,oBAAoBO,WAAW,EAC/Ba,MAAM,CACN,CAACC,KAAK,CAACC,MAAMC,YAAY,GAAM,CAAA;gBAC7B,GAAGF,GAAG;gBACN,CAACC,KAAK,EAAE;oBACN,GAAIC,gBAAgB,OAAO,CAAC,IAAIA,WAAW;oBAC3CR;gBACF;YACF,CAAA,GACA,CAAC;QAGH,gFAAgF;QAChF,MAAMP,SAAS;YACb,GAAGP,cAAc;YACjBM,aAAa,AAACN,CAAAA,eAAeM,WAAW,IAAI,EAAE,AAAD,EAAGiB,GAAG,CAAC,CAACC;gBACnD,IAAI,CAACR,sBAAsB,CAACQ,WAAWH,IAAI,CAAC,EAAE;oBAC5C,OAAOG;gBACT;gBAEA,OAAO;oBACL,GAAGA,UAAU;oBACbC,QAAQ;wBACN,GAAI,OAAOD,WAAWC,MAAM,KAAK,WAAWD,WAAWC,MAAM,GAAG,CAAC,CAAC;wBAClEC,qBAAqB;oBACvB;gBACF;YACF;QACF;QAEA,OAAOrC,mBAAmB;YACxBiB,aAAaU;QACf,GAAGT;IACL,EAAC;AAEH,SAASQ,qBACPnB,gBAAuC,EACvC,EACE+B,oBAAoB,EACpBC,OAAO,EACPnB,aAAa,EACbR,gBAAgB,EAChBC,aAAa,EACO;IAEtB,MAAM2B,6BAA6B;QACjC,KAAKhC,qBAAqB;YAAEI;YAAkBC;QAAc,GAAG4B,iBAAiB,CAAC;YAC/EnB,QAAQ;QACV;IACF;IAEA,OAAO,CAAC,EAAEa,UAAU,EAAEO,MAAM,EAAE;QAC5B,OAAO;YACLC,MAAM;YACNvB;YACAwB,aAAazC,eAAe;gBAAEoC;gBAAS1B;YAAc;YACrDgC,cAAczC,gBAAgB;gBAAE+B;gBAAY5B;YAAiB;YAC7DuC,cAAczC,gBAAgB;gBAC5B8B;gBACA5B;gBACAmC;YACF;YACAK,eAAezC,WAAW;gBAAE6B;gBAAY5B;YAAiB;YACzD,GAAI+B,wBAAwB;gBAAEU,QAAQR;YAA2B,CAAC;QACpE;IACF;AACF;AAEA,SAAShC,wBAAwBD,gBAAgB,GAAE"}