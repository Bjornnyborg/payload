{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { EmailAdapter, SendEmailOptions } from 'payload'\n\nimport { APIError } from 'payload'\n\nexport type ResendAdapterArgs = {\n  apiKey: string\n  defaultFromAddress: string\n  defaultFromName: string\n}\n\ntype ResendAdapter = EmailAdapter<ResendResponse>\n\ntype ResendError = {\n  message: string\n  name: string\n  statusCode: number\n}\n\ntype ResendResponse = { id: string } | ResendError\n\n/**\n * Email adapter for [Resend](https://resend.com) REST API\n */\nexport const resendAdapter = (args: ResendAdapterArgs): ResendAdapter => {\n  const { apiKey, defaultFromAddress, defaultFromName } = args\n\n  const adapter: ResendAdapter = () => ({\n    name: 'resend-rest',\n    defaultFromAddress,\n    defaultFromName,\n    sendEmail: async (message) => {\n      // Map the Payload email options to Resend email options\n      const sendEmailOptions = mapPayloadEmailToResendEmail(\n        message,\n        defaultFromAddress,\n        defaultFromName,\n      )\n\n      const res = await fetch('https://api.resend.com/emails', {\n        body: JSON.stringify(sendEmailOptions),\n        headers: {\n          Authorization: `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n      })\n\n      const data = (await res.json()) as ResendResponse\n\n      if ('id' in data) {\n        return data\n      } else {\n        const statusCode = data.statusCode || res.status\n        let formattedError = `Error sending email: ${statusCode}`\n        if (data.name && data.message) {\n          formattedError += ` ${data.name} - ${data.message}`\n        }\n\n        throw new APIError(formattedError, statusCode)\n      }\n    },\n  })\n\n  return adapter\n}\n\nfunction mapPayloadEmailToResendEmail(\n  message: SendEmailOptions,\n  defaultFromAddress: string,\n  defaultFromName: string,\n): ResendSendEmailOptions {\n  return {\n    // Required\n    from: mapFromAddress(message.from, defaultFromName, defaultFromAddress),\n    subject: message.subject ?? '',\n    to: mapAddresses(message.to),\n\n    // Other To fields\n    bcc: mapAddresses(message.bcc),\n    cc: mapAddresses(message.cc),\n    reply_to: mapAddresses(message.replyTo),\n\n    // Optional\n    attachments: mapAttachments(message.attachments),\n    html: message.html?.toString() || '',\n    text: message.text?.toString() || '',\n  } as ResendSendEmailOptions\n}\n\nfunction mapFromAddress(\n  address: SendEmailOptions['from'],\n  defaultFromName: string,\n  defaultFromAddress: string,\n): ResendSendEmailOptions['from'] {\n  if (!address) {\n    return `${defaultFromName} <${defaultFromAddress}>`\n  }\n\n  if (typeof address === 'string') {\n    return address\n  }\n\n  return `${address.name} <${address.address}>`\n}\n\nfunction mapAddresses(addresses: SendEmailOptions['to']): ResendSendEmailOptions['to'] {\n  if (!addresses) {\n    return ''\n  }\n\n  if (typeof addresses === 'string') {\n    return addresses\n  }\n\n  if (Array.isArray(addresses)) {\n    return addresses.map((address) => (typeof address === 'string' ? address : address.address))\n  }\n\n  return [addresses.address]\n}\n\nfunction mapAttachments(\n  attachments: SendEmailOptions['attachments'],\n): ResendSendEmailOptions['attachments'] {\n  if (!attachments) {\n    return []\n  }\n\n  return attachments.map((attachment) => {\n    if (!attachment.filename || !attachment.content) {\n      throw new APIError('Attachment is missing filename or content', 400)\n    }\n\n    if (typeof attachment.content === 'string') {\n      return {\n        content: Buffer.from(attachment.content),\n        filename: attachment.filename,\n      }\n    }\n\n    if (attachment.content instanceof Buffer) {\n      return {\n        content: attachment.content,\n        filename: attachment.filename,\n      }\n    }\n\n    throw new APIError('Attachment content must be a string or a buffer', 400)\n  })\n}\n\ntype ResendSendEmailOptions = {\n  /**\n   * Filename and content of attachments (max 40mb per email)\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  attachments?: Attachment[]\n  /**\n   * Blind carbon copy recipient email address. For multiple addresses, send as an array of strings.\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  bcc?: string | string[]\n\n  /**\n   * Carbon copy recipient email address. For multiple addresses, send as an array of strings.\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  cc?: string | string[]\n  /**\n   * Sender email address. To include a friendly name, use the format `\"Your Name <sender@domain.com>\"`\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  from: string\n  /**\n   * Custom headers to add to the email.\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  headers?: Record<string, string>\n  /**\n   * The HTML version of the message.\n   *\n   * @link https://resend.com/api-reference/emails/send-email#body-parameters\n   */\n  html?: string\n  /**\n   * Reply-to email address. For multiple addresses, send as an array of strings.\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  reply_to?: string | string[]\n  /**\n   * Email subject.\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  subject: string\n  /**\n   * Email tags\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  tags?: Tag[]\n  /**\n   * The plain text version of the message.\n   *\n   * @link https://resend.com/api-reference/emails/send-email#body-parameters\n   */\n  text?: string\n  /**\n   * Recipient email address. For multiple addresses, send as an array of strings. Max 50.\n   *\n   * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters\n   */\n  to: string | string[]\n}\n\ntype Attachment = {\n  /** Content of an attached file. */\n  content?: Buffer | string\n  /** Name of attached file. */\n  filename?: false | string | undefined\n  /** Path where the attachment file is hosted */\n  path?: string\n}\n\nexport type Tag = {\n  /**\n   * The name of the email tag. It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). It can contain no more than 256 characters.\n   */\n  name: string\n  /**\n   * The value of the email tag. It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). It can contain no more than 256 characters.\n   */\n  value: string\n}\n"],"names":["APIError","resendAdapter","args","apiKey","defaultFromAddress","defaultFromName","adapter","name","sendEmail","message","sendEmailOptions","mapPayloadEmailToResendEmail","res","fetch","body","JSON","stringify","headers","Authorization","method","data","json","statusCode","status","formattedError","from","mapFromAddress","subject","to","mapAddresses","bcc","cc","reply_to","replyTo","attachments","mapAttachments","html","toString","text","address","addresses","Array","isArray","map","attachment","filename","content","Buffer"],"mappings":"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"}