{"version":3,"sources":["../../../src/transform/write/traverseFields.ts"],"sourcesContent":["import type { FlattenedField } from 'payload'\n\nimport { sql } from 'drizzle-orm'\nimport { fieldIsVirtual, fieldShouldBeLocalized } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter } from '../../types.js'\nimport type { ArrayRowToInsert, BlockRowToInsert, RelationshipToDelete } from './types.js'\n\nimport { isArrayOfRows } from '../../utilities/isArrayOfRows.js'\nimport { transformArray } from './array.js'\nimport { transformBlocks } from './blocks.js'\nimport { transformNumbers } from './numbers.js'\nimport { transformRelationship } from './relationships.js'\nimport { transformSelects } from './selects.js'\nimport { transformTexts } from './texts.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  arrays: {\n    [tableName: string]: ArrayRowToInsert[]\n  }\n  /**\n   * This is the name of the base table\n   */\n  baseTableName: string\n  blocks: {\n    [blockType: string]: BlockRowToInsert[]\n  }\n  blocksToDelete: Set<string>\n  /**\n   * A snake-case field prefix, representing prior fields\n   * Ex: my_group_my_named_tab_\n   */\n  columnPrefix: string\n  data: Record<string, unknown>\n  existingLocales?: Record<string, unknown>[]\n  /**\n   * A prefix that will retain camel-case formatting, representing prior fields\n   * Ex: myGroup_myNamedTab_\n   */\n  fieldPrefix: string\n  fields: FlattenedField[]\n  forcedLocale?: string\n  /**\n   * Tracks whether the current traversion context is from array or block.\n   */\n  insideArrayOrBlock?: boolean\n  locales: {\n    [locale: string]: Record<string, unknown>\n  }\n  numbers: Record<string, unknown>[]\n  parentIsLocalized: boolean\n  /**\n   * This is the name of the parent table\n   */\n  parentTableName: string\n  path: string\n  relationships: Record<string, unknown>[]\n  relationshipsToDelete: RelationshipToDelete[]\n  row: Record<string, unknown>\n  selects: {\n    [tableName: string]: Record<string, unknown>[]\n  }\n  texts: Record<string, unknown>[]\n  /**\n   * Set to a locale code if this set of fields is traversed within a\n   * localized array or block field\n   */\n  withinArrayOrBlockLocale?: string\n}\n\nexport const traverseFields = ({\n  adapter,\n  arrays,\n  baseTableName,\n  blocks,\n  blocksToDelete,\n  columnPrefix,\n  data,\n  existingLocales,\n  fieldPrefix,\n  fields,\n  forcedLocale,\n  insideArrayOrBlock = false,\n  locales,\n  numbers,\n  parentIsLocalized,\n  parentTableName,\n  path,\n  relationships,\n  relationshipsToDelete,\n  row,\n  selects,\n  texts,\n  withinArrayOrBlockLocale,\n}: Args) => {\n  if (row._uuid) {\n    data._uuid = row._uuid\n  }\n\n  fields.forEach((field) => {\n    let columnName = ''\n    let fieldName = ''\n    let fieldData: unknown\n\n    if (fieldIsVirtual(field)) {\n      return\n    }\n\n    columnName = `${columnPrefix || ''}${toSnakeCase(field.name)}`\n    fieldName = `${fieldPrefix || ''}${field.name}`\n    fieldData = data[field.name]\n\n    const isLocalized = fieldShouldBeLocalized({ field, parentIsLocalized })\n\n    if (field.type === 'array') {\n      const arrayTableName = adapter.tableNameMap.get(`${parentTableName}_${columnName}`)\n\n      if (!arrays[arrayTableName]) {\n        arrays[arrayTableName] = []\n      }\n\n      if (isLocalized) {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              const newRows = transformArray({\n                adapter,\n                arrayTableName,\n                baseTableName,\n                blocks,\n                blocksToDelete,\n                data: localeData,\n                field,\n                locale: localeKey,\n                numbers,\n                parentIsLocalized: parentIsLocalized || field.localized,\n                path,\n                relationships,\n                relationshipsToDelete,\n                selects,\n                texts,\n                withinArrayOrBlockLocale: localeKey,\n              })\n\n              arrays[arrayTableName] = arrays[arrayTableName].concat(newRows)\n            }\n          })\n        }\n      } else {\n        const newRows = transformArray({\n          adapter,\n          arrayTableName,\n          baseTableName,\n          blocks,\n          blocksToDelete,\n          data: data[field.name],\n          field,\n          numbers,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          path,\n          relationships,\n          relationshipsToDelete,\n          selects,\n          texts,\n          withinArrayOrBlockLocale,\n        })\n\n        arrays[arrayTableName] = arrays[arrayTableName].concat(newRows)\n      }\n\n      return\n    }\n\n    if (field.type === 'blocks') {\n      ;(field.blockReferences ?? field.blocks).forEach((block) => {\n        blocksToDelete.add(toSnakeCase(typeof block === 'string' ? block : block.slug))\n      })\n\n      if (isLocalized) {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              transformBlocks({\n                adapter,\n                baseTableName,\n                blocks,\n                blocksToDelete,\n                data: localeData,\n                field,\n                locale: localeKey,\n                numbers,\n                parentIsLocalized: parentIsLocalized || field.localized,\n                path,\n                relationships,\n                relationshipsToDelete,\n                selects,\n                texts,\n                withinArrayOrBlockLocale: localeKey,\n              })\n            }\n          })\n        }\n      } else if (isArrayOfRows(fieldData)) {\n        transformBlocks({\n          adapter,\n          baseTableName,\n          blocks,\n          blocksToDelete,\n          data: fieldData,\n          field,\n          numbers,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          path,\n          relationships,\n          relationshipsToDelete,\n          selects,\n          texts,\n          withinArrayOrBlockLocale,\n        })\n      }\n\n      return\n    }\n\n    if (field.type === 'group' || field.type === 'tab') {\n      if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n        if (isLocalized) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            // preserve array ID if there is\n            localeData._uuid = data.id || data._uuid\n\n            traverseFields({\n              adapter,\n              arrays,\n              baseTableName,\n              blocks,\n              blocksToDelete,\n              columnPrefix: `${columnName}_`,\n              data: localeData as Record<string, unknown>,\n              existingLocales,\n              fieldPrefix: `${fieldName}_`,\n              fields: field.flattenedFields,\n              forcedLocale: localeKey,\n              insideArrayOrBlock,\n              locales,\n              numbers,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              parentTableName,\n              path: `${path || ''}${field.name}.`,\n              relationships,\n              relationshipsToDelete,\n              row,\n              selects,\n              texts,\n              withinArrayOrBlockLocale: localeKey,\n            })\n          })\n        } else {\n          // preserve array ID if there is\n          const groupData = data[field.name] as Record<string, unknown>\n          groupData._uuid = data.id || data._uuid\n\n          traverseFields({\n            adapter,\n            arrays,\n            baseTableName,\n            blocks,\n            blocksToDelete,\n            columnPrefix: `${columnName}_`,\n            data: groupData,\n            existingLocales,\n            fieldPrefix: `${fieldName}_`,\n            fields: field.flattenedFields,\n            insideArrayOrBlock,\n            locales,\n            numbers,\n            parentIsLocalized: parentIsLocalized || field.localized,\n            parentTableName,\n            path: `${path || ''}${field.name}.`,\n            relationships,\n            relationshipsToDelete,\n            row,\n            selects,\n            texts,\n            withinArrayOrBlockLocale,\n          })\n        }\n      }\n\n      return\n    }\n\n    if (field.type === 'relationship' || field.type === 'upload') {\n      const relationshipPath = `${path || ''}${field.name}`\n\n      if (\n        isLocalized &&\n        (Array.isArray(field.relationTo) || ('hasMany' in field && field.hasMany))\n      ) {\n        if (typeof fieldData === 'object') {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (localeData === null) {\n              relationshipsToDelete.push({\n                locale: localeKey,\n                path: relationshipPath,\n              })\n              return\n            }\n\n            transformRelationship({\n              baseRow: {\n                locale: localeKey,\n                path: relationshipPath,\n              },\n              data: localeData,\n              field,\n              relationships,\n            })\n          })\n        }\n        return\n      } else if (Array.isArray(field.relationTo) || ('hasMany' in field && field.hasMany)) {\n        if (fieldData === null || (Array.isArray(fieldData) && fieldData.length === 0)) {\n          relationshipsToDelete.push({ path: relationshipPath })\n          return\n        }\n\n        transformRelationship({\n          baseRow: {\n            locale: withinArrayOrBlockLocale,\n            path: relationshipPath,\n          },\n          data: fieldData,\n          field,\n          relationships,\n        })\n        return\n      } else {\n        if (\n          !isLocalized &&\n          fieldData &&\n          typeof fieldData === 'object' &&\n          'id' in fieldData &&\n          fieldData?.id\n        ) {\n          fieldData = fieldData.id\n        } else if (isLocalized) {\n          if (typeof fieldData === 'object') {\n            Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n              if (typeof localeData === 'object') {\n                if (localeData && 'id' in localeData && localeData?.id) {\n                  fieldData[localeKey] = localeData.id\n                }\n              } else {\n                fieldData[localeKey] = localeData\n              }\n            })\n          }\n        }\n      }\n    }\n\n    if (field.type === 'text' && field.hasMany) {\n      const textPath = `${path || ''}${field.name}`\n\n      if (isLocalized) {\n        if (typeof fieldData === 'object') {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              transformTexts({\n                baseRow: {\n                  locale: localeKey,\n                  path: textPath,\n                },\n                data: localeData,\n                texts,\n              })\n            }\n          })\n        }\n      } else if (Array.isArray(fieldData)) {\n        transformTexts({\n          baseRow: {\n            locale: withinArrayOrBlockLocale,\n            path: textPath,\n          },\n          data: fieldData,\n          texts,\n        })\n      }\n\n      return\n    }\n\n    if (field.type === 'number' && field.hasMany) {\n      const numberPath = `${path || ''}${field.name}`\n\n      if (isLocalized) {\n        if (typeof fieldData === 'object') {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              transformNumbers({\n                baseRow: {\n                  locale: localeKey,\n                  path: numberPath,\n                },\n                data: localeData,\n                numbers,\n              })\n            }\n          })\n        }\n      } else if (Array.isArray(fieldData)) {\n        transformNumbers({\n          baseRow: {\n            locale: withinArrayOrBlockLocale,\n            path: numberPath,\n          },\n          data: fieldData,\n          numbers,\n        })\n      }\n\n      return\n    }\n\n    if (field.type === 'select' && field.hasMany) {\n      const selectTableName = adapter.tableNameMap.get(`${parentTableName}_${columnName}`)\n      if (!selects[selectTableName]) {\n        selects[selectTableName] = []\n      }\n\n      if (isLocalized) {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              const newRows = transformSelects({\n                id: insideArrayOrBlock ? data._uuid || data.id : undefined,\n                data: localeData,\n                locale: localeKey,\n              })\n\n              selects[selectTableName] = selects[selectTableName].concat(newRows)\n            }\n          })\n        }\n      } else if (Array.isArray(data[field.name])) {\n        const newRows = transformSelects({\n          id: insideArrayOrBlock ? data._uuid || data.id : undefined,\n          data: data[field.name],\n          locale: withinArrayOrBlockLocale,\n        })\n\n        selects[selectTableName] = selects[selectTableName].concat(newRows)\n      }\n\n      return\n    }\n\n    const valuesToTransform: { localeKey?: string; ref: unknown; value: unknown }[] = []\n\n    if (isLocalized) {\n      if (typeof fieldData === 'object' && fieldData !== null) {\n        Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n          if (!locales[localeKey]) {\n            locales[localeKey] = {}\n          }\n\n          valuesToTransform.push({\n            localeKey,\n            ref: locales,\n            value: localeData,\n          })\n        })\n      }\n    } else {\n      let ref = row\n\n      if (forcedLocale) {\n        if (!locales[forcedLocale]) {\n          locales[forcedLocale] = {}\n        }\n        ref = locales[forcedLocale]\n      }\n\n      valuesToTransform.push({ ref, value: fieldData })\n    }\n\n    valuesToTransform.forEach(({ localeKey, ref, value }) => {\n      let formattedValue = value\n\n      if (typeof value !== 'undefined') {\n        if (value && field.type === 'point' && adapter.name !== 'sqlite') {\n          formattedValue = sql`ST_GeomFromGeoJSON(${JSON.stringify(value)})`\n        }\n\n        if (field.type === 'text' && value && typeof value !== 'string') {\n          formattedValue = JSON.stringify(value)\n        }\n\n        if (field.type === 'date') {\n          if (typeof value === 'number' && !Number.isNaN(value)) {\n            formattedValue = new Date(value).toISOString()\n          } else if (value instanceof Date) {\n            formattedValue = value.toISOString()\n          }\n        }\n      }\n\n      if (field.type === 'date' && fieldName === 'updatedAt') {\n        // let the db handle this\n        formattedValue = new Date().toISOString()\n      }\n\n      if (typeof formattedValue !== 'undefined') {\n        if (localeKey) {\n          ref[localeKey][fieldName] = formattedValue\n        } else {\n          ref[fieldName] = formattedValue\n        }\n      }\n    })\n  })\n}\n"],"names":["sql","fieldIsVirtual","fieldShouldBeLocalized","toSnakeCase","isArrayOfRows","transformArray","transformBlocks","transformNumbers","transformRelationship","transformSelects","transformTexts","traverseFields","adapter","arrays","baseTableName","blocks","blocksToDelete","columnPrefix","data","existingLocales","fieldPrefix","fields","forcedLocale","insideArrayOrBlock","locales","numbers","parentIsLocalized","parentTableName","path","relationships","relationshipsToDelete","row","selects","texts","withinArrayOrBlockLocale","_uuid","forEach","field","columnName","fieldName","fieldData","name","isLocalized","type","arrayTableName","tableNameMap","get","Object","entries","localeKey","localeData","Array","isArray","newRows","locale","localized","concat","blockReferences","block","add","slug","id","flattenedFields","groupData","relationshipPath","relationTo","hasMany","push","baseRow","length","textPath","numberPath","selectTableName","undefined","valuesToTransform","ref","value","formattedValue","JSON","stringify","Number","isNaN","Date","toISOString"],"mappings":"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"}