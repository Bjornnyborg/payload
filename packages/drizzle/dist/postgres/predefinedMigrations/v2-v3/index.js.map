{"version":3,"sources":["../../../../src/postgres/predefinedMigrations/v2-v3/index.ts"],"sourcesContent":["import type { DrizzleSnapshotJSON } from 'drizzle-kit/api'\nimport type { Payload, PayloadRequest } from 'payload'\n\nimport { sql } from 'drizzle-orm'\nimport fs from 'fs'\nimport { buildVersionCollectionFields, buildVersionGlobalFields } from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { BasePostgresAdapter } from '../../types.js'\nimport type { PathsToQuery } from './types.js'\n\nimport { getTransaction } from '../../../utilities/getTransaction.js'\nimport { groupUpSQLStatements } from './groupUpSQLStatements.js'\nimport { migrateRelationships } from './migrateRelationships.js'\nimport { traverseFields } from './traverseFields.js'\n\ntype Args = {\n  debug?: boolean\n  payload: Payload\n  req?: Partial<PayloadRequest>\n}\n\n/**\n * Moves upload and relationship columns from the join table and into the tables while moving data\n * This is done in the following order:\n *    ADD COLUMNs\n *    -- manipulate data to move relationships to new columns\n *    ADD CONSTRAINTs\n *    NOT NULLs\n *    DROP TABLEs\n *    DROP CONSTRAINTs\n *    DROP COLUMNs\n * @param debug\n * @param payload\n * @param req\n */\nexport const migratePostgresV2toV3 = async ({ debug, payload, req }: Args) => {\n  const adapter = payload.db as unknown as BasePostgresAdapter\n  const db = await getTransaction(adapter, req)\n  const dir = payload.db.migrationDir\n\n  // get the drizzle migrateUpSQL from drizzle using the last schema\n  const { generateDrizzleJson, generateMigration, upSnapshot } = adapter.requireDrizzleKit()\n\n  const toSnapshot: Record<string, unknown> = {}\n\n  for (const key of Object.keys(adapter.schema).filter(\n    (key) => !key.startsWith('payload_locked_documents'),\n  )) {\n    toSnapshot[key] = adapter.schema[key]\n  }\n\n  const drizzleJsonAfter = generateDrizzleJson(toSnapshot) as DrizzleSnapshotJSON\n\n  // Get the previous migration snapshot\n  const previousSnapshot = fs\n    .readdirSync(dir)\n    .filter((file) => file.endsWith('.json') && !file.endsWith('relationships_v2_v3.json'))\n    .sort()\n    .reverse()?.[0]\n\n  if (!previousSnapshot) {\n    throw new Error(\n      `No previous migration schema file found! A prior migration from v2 is required to migrate to v3.`,\n    )\n  }\n\n  let drizzleJsonBefore = JSON.parse(\n    fs.readFileSync(`${dir}/${previousSnapshot}`, 'utf8'),\n  ) as DrizzleSnapshotJSON\n\n  if (upSnapshot && drizzleJsonBefore.version < drizzleJsonAfter.version) {\n    drizzleJsonBefore = upSnapshot(drizzleJsonBefore)\n  }\n\n  const generatedSQL = await generateMigration(drizzleJsonBefore, drizzleJsonAfter)\n\n  if (!generatedSQL.length) {\n    payload.logger.info(`No schema changes needed.`)\n    process.exit(0)\n  }\n\n  const sqlUpStatements = groupUpSQLStatements(generatedSQL)\n\n  const addColumnsStatement = sqlUpStatements.addColumn.join('\\n')\n\n  if (debug) {\n    payload.logger.info('CREATING NEW RELATIONSHIP COLUMNS')\n    payload.logger.info(addColumnsStatement)\n  }\n\n  await db.execute(sql.raw(addColumnsStatement))\n\n  for (const collection of payload.config.collections) {\n    const tableName = adapter.tableNameMap.get(toSnakeCase(collection.slug))\n    const pathsToQuery: PathsToQuery = new Set()\n\n    traverseFields({\n      adapter,\n      collectionSlug: collection.slug,\n      columnPrefix: '',\n      db,\n      disableNotNull: false,\n      fields: collection.flattenedFields,\n      isVersions: false,\n      newTableName: tableName,\n      parentTableName: tableName,\n      path: '',\n      pathsToQuery,\n      payload,\n      rootTableName: tableName,\n    })\n\n    await migrateRelationships({\n      adapter,\n      collectionSlug: collection.slug,\n      db,\n      debug,\n      fields: collection.flattenedFields,\n      isVersions: false,\n      pathsToQuery,\n      payload,\n      req,\n      tableName,\n    })\n\n    if (collection.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(collection.slug)}${adapter.versionsSuffix}`,\n      )\n      const versionFields = buildVersionCollectionFields(payload.config, collection, true)\n      const versionPathsToQuery: PathsToQuery = new Set()\n\n      traverseFields({\n        adapter,\n        collectionSlug: collection.slug,\n        columnPrefix: '',\n        db,\n        disableNotNull: true,\n        fields: versionFields,\n        isVersions: true,\n        newTableName: versionsTableName,\n        parentTableName: versionsTableName,\n        path: '',\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        rootTableName: versionsTableName,\n      })\n\n      await migrateRelationships({\n        adapter,\n        collectionSlug: collection.slug,\n        db,\n        debug,\n        fields: versionFields,\n        isVersions: true,\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        req,\n        tableName: versionsTableName,\n      })\n    }\n  }\n\n  for (const global of payload.config.globals) {\n    const tableName = adapter.tableNameMap.get(toSnakeCase(global.slug))\n\n    const pathsToQuery: PathsToQuery = new Set()\n\n    traverseFields({\n      adapter,\n      columnPrefix: '',\n      db,\n      disableNotNull: false,\n      fields: global.flattenedFields,\n      globalSlug: global.slug,\n      isVersions: false,\n      newTableName: tableName,\n      parentTableName: tableName,\n      path: '',\n      pathsToQuery,\n      payload,\n      rootTableName: tableName,\n    })\n\n    await migrateRelationships({\n      adapter,\n      db,\n      debug,\n      fields: global.flattenedFields,\n      globalSlug: global.slug,\n      isVersions: false,\n      pathsToQuery,\n      payload,\n      req,\n      tableName,\n    })\n\n    if (global.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(global.slug)}${adapter.versionsSuffix}`,\n      )\n\n      const versionFields = buildVersionGlobalFields(payload.config, global, true)\n\n      const versionPathsToQuery: PathsToQuery = new Set()\n\n      traverseFields({\n        adapter,\n        columnPrefix: '',\n        db,\n        disableNotNull: true,\n        fields: versionFields,\n        globalSlug: global.slug,\n        isVersions: true,\n        newTableName: versionsTableName,\n        parentTableName: versionsTableName,\n        path: '',\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        rootTableName: versionsTableName,\n      })\n\n      await migrateRelationships({\n        adapter,\n        db,\n        debug,\n        fields: versionFields,\n        globalSlug: global.slug,\n        isVersions: true,\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        req,\n        tableName: versionsTableName,\n      })\n    }\n  }\n\n  // ADD CONSTRAINT\n  const addConstraintsStatement = sqlUpStatements.addConstraint.join('\\n')\n\n  if (debug) {\n    payload.logger.info('ADDING CONSTRAINTS')\n    payload.logger.info(addConstraintsStatement)\n  }\n\n  await db.execute(sql.raw(addConstraintsStatement))\n\n  // NOT NULL\n  const notNullStatements = sqlUpStatements.notNull.join('\\n')\n\n  if (debug) {\n    payload.logger.info('NOT NULL CONSTRAINTS')\n    payload.logger.info(notNullStatements)\n  }\n\n  await db.execute(sql.raw(notNullStatements))\n\n  // DROP TABLE\n  const dropTablesStatement = sqlUpStatements.dropTable.join('\\n')\n\n  if (debug) {\n    payload.logger.info('DROPPING TABLES')\n    payload.logger.info(dropTablesStatement)\n  }\n\n  await db.execute(sql.raw(dropTablesStatement))\n\n  // DROP CONSTRAINT\n  const dropConstraintsStatement = sqlUpStatements.dropConstraint.join('\\n')\n\n  if (debug) {\n    payload.logger.info('DROPPING CONSTRAINTS')\n    payload.logger.info(dropConstraintsStatement)\n  }\n\n  await db.execute(sql.raw(dropConstraintsStatement))\n\n  // DROP COLUMN\n  const dropColumnsStatement = sqlUpStatements.dropColumn.join('\\n')\n\n  if (debug) {\n    payload.logger.info('DROPPING COLUMNS')\n    payload.logger.info(dropColumnsStatement)\n  }\n\n  await db.execute(sql.raw(dropColumnsStatement))\n}\n"],"names":["sql","fs","buildVersionCollectionFields","buildVersionGlobalFields","toSnakeCase","getTransaction","groupUpSQLStatements","migrateRelationships","traverseFields","migratePostgresV2toV3","debug","payload","req","adapter","db","dir","migrationDir","generateDrizzleJson","generateMigration","upSnapshot","requireDrizzleKit","toSnapshot","key","Object","keys","schema","filter","startsWith","drizzleJsonAfter","previousSnapshot","readdirSync","file","endsWith","sort","reverse","Error","drizzleJsonBefore","JSON","parse","readFileSync","version","generatedSQL","length","logger","info","process","exit","sqlUpStatements","addColumnsStatement","addColumn","join","execute","raw","collection","config","collections","tableName","tableNameMap","get","slug","pathsToQuery","Set","collectionSlug","columnPrefix","disableNotNull","fields","flattenedFields","isVersions","newTableName","parentTableName","path","rootTableName","versions","versionsTableName","versionsSuffix","versionFields","versionPathsToQuery","global","globals","globalSlug","addConstraintsStatement","addConstraint","notNullStatements","notNull","dropTablesStatement","dropTable","dropConstraintsStatement","dropConstraint","dropColumnsStatement","dropColumn"],"mappings":"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"}