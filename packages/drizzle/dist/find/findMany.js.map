{"version":3,"sources":["../../src/find/findMany.ts"],"sourcesContent":["import type { FindArgs, FlattenedField, TypeWithID } from 'payload'\n\nimport { inArray } from 'drizzle-orm'\n\nimport type { DrizzleAdapter } from '../types.js'\n\nimport buildQuery from '../queries/buildQuery.js'\nimport { selectDistinct } from '../queries/selectDistinct.js'\nimport { transform } from '../transform/read/index.js'\nimport { getTransaction } from '../utilities/getTransaction.js'\nimport { buildFindManyArgs } from './buildFindManyArgs.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  collectionSlug?: string\n  fields: FlattenedField[]\n  tableName: string\n  versions?: boolean\n} & Omit<FindArgs, 'collection'>\n\nexport const findMany = async function find({\n  adapter,\n  collectionSlug,\n  draftsEnabled,\n  fields,\n  joins: joinQuery,\n  limit: limitArg,\n  locale,\n  page = 1,\n  pagination,\n  req,\n  select,\n  skip,\n  sort,\n  tableName,\n  versions,\n  where: whereArg,\n}: Args) {\n  const db = await getTransaction(adapter, req)\n  let limit = limitArg\n  let totalDocs: number\n  let totalPages: number\n  let hasPrevPage: boolean\n  let hasNextPage: boolean\n  let pagingCounter: number\n  const offset = skip || (page - 1) * limit\n\n  if (limit === 0) {\n    limit = undefined\n  }\n\n  const { joins, orderBy, selectFields, where } = buildQuery({\n    adapter,\n    fields,\n    locale,\n    sort,\n    tableName,\n    where: whereArg,\n  })\n\n  const orderedIDMap: Record<number | string, number> = {}\n  let orderedIDs: (number | string)[]\n\n  const findManyArgs = buildFindManyArgs({\n    adapter,\n    collectionSlug,\n    depth: 0,\n    draftsEnabled,\n    fields,\n    joinQuery,\n    joins,\n    locale,\n    select,\n    tableName,\n    versions,\n  })\n  const selectDistinctResult = await selectDistinct({\n    adapter,\n    db,\n    joins,\n    query: ({ query }) => {\n      if (orderBy) {\n        query = query.orderBy(() => orderBy.map(({ column, order }) => order(column)))\n      }\n      return query.offset(offset).limit(limit)\n    },\n    selectFields,\n    tableName,\n    where,\n  })\n\n  if (selectDistinctResult) {\n    if (selectDistinctResult.length === 0) {\n      return {\n        docs: [],\n        hasNextPage: false,\n        hasPrevPage: false,\n        limit,\n        nextPage: null,\n        page: 1,\n        pagingCounter: 0,\n        prevPage: null,\n        totalDocs: 0,\n        totalPages: 0,\n      }\n    } else {\n      // set the id in an object for sorting later\n      selectDistinctResult.forEach(({ id }, i) => {\n        orderedIDMap[id] = i\n      })\n      orderedIDs = Object.keys(orderedIDMap)\n      findManyArgs.where = inArray(adapter.tables[tableName].id, orderedIDs)\n    }\n  } else {\n    findManyArgs.limit = limit\n    findManyArgs.offset = offset\n    findManyArgs.orderBy = () => orderBy.map(({ column, order }) => order(column))\n\n    if (where) {\n      findManyArgs.where = where\n    }\n  }\n\n  const findPromise = db.query[tableName].findMany(findManyArgs)\n\n  if (pagination !== false && (orderedIDs ? orderedIDs?.length <= limit : true)) {\n    totalDocs = await adapter.countDistinct({\n      db,\n      joins,\n      tableName,\n      where,\n    })\n\n    totalPages = typeof limit === 'number' && limit !== 0 ? Math.ceil(totalDocs / limit) : 1\n    hasPrevPage = page > 1\n    hasNextPage = totalPages > page\n    pagingCounter = (page - 1) * limit + 1\n  }\n\n  const rawDocs = await findPromise\n  // sort rawDocs from selectQuery\n  if (Object.keys(orderedIDMap).length > 0) {\n    rawDocs.sort((a, b) => orderedIDMap[a.id] - orderedIDMap[b.id])\n  }\n\n  if (pagination === false || !totalDocs) {\n    totalDocs = rawDocs.length\n    totalPages = 1\n    pagingCounter = 1\n    hasPrevPage = false\n    hasNextPage = false\n  }\n\n  const docs = rawDocs.map((data: TypeWithID) => {\n    return transform({\n      adapter,\n      config: adapter.payload.config,\n      data,\n      fields,\n      joinQuery,\n      tableName,\n    })\n  })\n\n  return {\n    docs,\n    hasNextPage,\n    hasPrevPage,\n    limit: limitArg,\n    nextPage: hasNextPage ? page + 1 : null,\n    page,\n    pagingCounter,\n    prevPage: hasPrevPage ? page - 1 : null,\n    totalDocs,\n    totalPages,\n  }\n}\n"],"names":["inArray","buildQuery","selectDistinct","transform","getTransaction","buildFindManyArgs","findMany","find","adapter","collectionSlug","draftsEnabled","fields","joins","joinQuery","limit","limitArg","locale","page","pagination","req","select","skip","sort","tableName","versions","where","whereArg","db","totalDocs","totalPages","hasPrevPage","hasNextPage","pagingCounter","offset","undefined","orderBy","selectFields","orderedIDMap","orderedIDs","findManyArgs","depth","selectDistinctResult","query","map","column","order","length","docs","nextPage","prevPage","forEach","id","i","Object","keys","tables","findPromise","countDistinct","Math","ceil","rawDocs","a","b","data","config","payload"],"mappings":"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"}