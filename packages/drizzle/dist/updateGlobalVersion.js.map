{"version":3,"sources":["../src/updateGlobalVersion.ts"],"sourcesContent":["import type {\n  SanitizedGlobalConfig,\n  TypeWithID,\n  TypeWithVersion,\n  UpdateGlobalVersionArgs,\n} from 'payload'\n\nimport { buildVersionGlobalFields } from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter } from './types.js'\n\nimport buildQuery from './queries/buildQuery.js'\nimport { upsertRow } from './upsertRow/index.js'\nimport { getTransaction } from './utilities/getTransaction.js'\n\nexport async function updateGlobalVersion<T extends TypeWithID>(\n  this: DrizzleAdapter,\n  {\n    id,\n    global,\n    locale,\n    req,\n    select,\n    versionData,\n    where: whereArg,\n    returning,\n  }: UpdateGlobalVersionArgs<T>,\n) {\n  const db = await getTransaction(this, req)\n  const globalConfig: SanitizedGlobalConfig = this.payload.globals.config.find(\n    ({ slug }) => slug === global,\n  )\n  const whereToUse = whereArg || { id: { equals: id } }\n\n  const tableName = this.tableNameMap.get(\n    `_${toSnakeCase(globalConfig.slug)}${this.versionsSuffix}`,\n  )\n\n  const fields = buildVersionGlobalFields(this.payload.config, globalConfig, true)\n\n  const { where } = buildQuery({\n    adapter: this,\n    fields,\n    locale,\n    tableName,\n    where: whereToUse,\n  })\n\n  const result = await upsertRow<TypeWithVersion<T>>({\n    id,\n    adapter: this,\n    data: versionData,\n    db,\n    fields,\n    operation: 'update',\n    req,\n    select,\n    tableName,\n    where,\n    ignoreResult: returning === false,\n  })\n\n  if (returning === false) {\n    return null\n  }\n\n  return result\n}\n"],"names":["buildVersionGlobalFields","toSnakeCase","buildQuery","upsertRow","getTransaction","updateGlobalVersion","id","global","locale","req","select","versionData","where","whereArg","returning","db","globalConfig","payload","globals","config","find","slug","whereToUse","equals","tableName","tableNameMap","get","versionsSuffix","fields","adapter","result","data","operation","ignoreResult"],"mappings":"AAOA,SAASA,wBAAwB,QAAQ,UAAS;AAClD,OAAOC,iBAAiB,gBAAe;AAIvC,OAAOC,gBAAgB,0BAAyB;AAChD,SAASC,SAAS,QAAQ,uBAAsB;AAChD,SAASC,cAAc,QAAQ,gCAA+B;AAE9D,OAAO,eAAeC,oBAEpB,EACEC,EAAE,EACFC,MAAM,EACNC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,OAAOC,QAAQ,EACfC,SAAS,EACkB;IAE7B,MAAMC,KAAK,MAAMX,eAAe,IAAI,EAAEK;IACtC,MAAMO,eAAsC,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,MAAM,CAACC,IAAI,CAC1E,CAAC,EAAEC,IAAI,EAAE,GAAKA,SAASd;IAEzB,MAAMe,aAAaT,YAAY;QAAEP,IAAI;YAAEiB,QAAQjB;QAAG;IAAE;IAEpD,MAAMkB,YAAY,IAAI,CAACC,YAAY,CAACC,GAAG,CACrC,CAAC,CAAC,EAAEzB,YAAYe,aAAaK,IAAI,IAAI,IAAI,CAACM,cAAc,EAAE;IAG5D,MAAMC,SAAS5B,yBAAyB,IAAI,CAACiB,OAAO,CAACE,MAAM,EAAEH,cAAc;IAE3E,MAAM,EAAEJ,KAAK,EAAE,GAAGV,WAAW;QAC3B2B,SAAS,IAAI;QACbD;QACApB;QACAgB;QACAZ,OAAOU;IACT;IAEA,MAAMQ,SAAS,MAAM3B,UAA8B;QACjDG;QACAuB,SAAS,IAAI;QACbE,MAAMpB;QACNI;QACAa;QACAI,WAAW;QACXvB;QACAC;QACAc;QACAZ;QACAqB,cAAcnB,cAAc;IAC9B;IAEA,IAAIA,cAAc,OAAO;QACvB,OAAO;IACT;IAEA,OAAOgB;AACT"}