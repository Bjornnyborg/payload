{"version":3,"sources":["../../src/upsertRow/insertArrays.ts"],"sourcesContent":["import type { ArrayRowToInsert } from '../transform/write/types.js'\nimport type { DrizzleAdapter, DrizzleTransaction } from '../types.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  arrays: {\n    [tableName: string]: ArrayRowToInsert[]\n  }[]\n  db: DrizzleAdapter['drizzle'] | DrizzleTransaction\n  parentRows: Record<string, unknown>[]\n  uuidMap?: Record<string, number | string>\n}\n\ntype RowsByTable = {\n  [tableName: string]: {\n    arrays: {\n      [tableName: string]: ArrayRowToInsert[]\n    }[]\n    locales: Record<string, unknown>[]\n    rows: Record<string, unknown>[]\n  }\n}\n\nexport const insertArrays = async ({\n  adapter,\n  arrays,\n  db,\n  parentRows,\n  uuidMap = {},\n}: Args): Promise<void> => {\n  // Maintain a map of flattened rows by table\n  const rowsByTable: RowsByTable = {}\n\n  arrays.forEach((arraysByTable, parentRowIndex) => {\n    Object.entries(arraysByTable).forEach(([tableName, arrayRows]) => {\n      // If the table doesn't exist in map, initialize it\n      if (!rowsByTable[tableName]) {\n        rowsByTable[tableName] = {\n          arrays: [],\n          locales: [],\n          rows: [],\n        }\n      }\n\n      const parentID = parentRows[parentRowIndex].id\n\n      // Add any sub arrays that need to be created\n      // We will call this recursively below\n      arrayRows.forEach((arrayRow, i) => {\n        if (Object.keys(arrayRow.arrays).length > 0) {\n          rowsByTable[tableName].arrays.push(arrayRow.arrays)\n        }\n\n        // Set up parent IDs for both row and locale row\n        arrayRow.row._parentID = parentID\n        rowsByTable[tableName].rows.push(arrayRow.row)\n\n        Object.entries(arrayRow.locales).forEach(([arrayRowLocale, arrayRowLocaleData]) => {\n          arrayRowLocaleData._parentID = arrayRow.row.id\n          arrayRowLocaleData._locale = arrayRowLocale\n          rowsByTable[tableName].locales.push(arrayRowLocaleData)\n          if (!arrayRow.row.id) {\n            arrayRowLocaleData._getParentID = (rows: { _uuid: string; id: number }[]) => {\n              const { id } = rows.find((each) => each._uuid === arrayRow.row._uuid)\n              return id\n            }\n          }\n        })\n      })\n    })\n  })\n\n  // Insert all corresponding arrays\n  // (one insert per array table)\n  for (const [tableName, row] of Object.entries(rowsByTable)) {\n    // the nested arrays need the ID for the parentID foreign key\n    let insertedRows: Args['parentRows']\n    if (row.rows.length > 0) {\n      insertedRows = await adapter.insert({\n        db,\n        tableName,\n        values: row.rows,\n      })\n\n      insertedRows.forEach((row) => {\n        if (\n          typeof row._uuid === 'string' &&\n          (typeof row.id === 'string' || typeof row.id === 'number')\n        ) {\n          uuidMap[row._uuid] = row.id\n        }\n      })\n    }\n\n    // Insert locale rows\n    if (adapter.tables[`${tableName}${adapter.localesSuffix}`] && row.locales.length > 0) {\n      if (!row.locales[0]._parentID) {\n        row.locales = row.locales.map((localeRow) => {\n          if (typeof localeRow._getParentID === 'function') {\n            localeRow._parentID = localeRow._getParentID(insertedRows)\n            delete localeRow._getParentID\n          }\n          return localeRow\n        })\n      }\n      await adapter.insert({\n        db,\n        tableName: `${tableName}${adapter.localesSuffix}`,\n        values: row.locales,\n      })\n    }\n\n    // If there are sub arrays, call this function recursively\n    if (row.arrays.length > 0) {\n      await insertArrays({\n        adapter,\n        arrays: row.arrays,\n        db,\n        parentRows: insertedRows,\n      })\n    }\n  }\n}\n"],"names":["insertArrays","adapter","arrays","db","parentRows","uuidMap","rowsByTable","forEach","arraysByTable","parentRowIndex","Object","entries","tableName","arrayRows","locales","rows","parentID","id","arrayRow","i","keys","length","push","row","_parentID","arrayRowLocale","arrayRowLocaleData","_locale","_getParentID","find","each","_uuid","insertedRows","insert","values","tables","localesSuffix","map","localeRow"],"mappings":"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"}