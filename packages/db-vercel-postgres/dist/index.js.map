{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { PgTableFn } from 'drizzle-orm/pg-core'\nimport type { DatabaseAdapterObj, Payload } from 'payload'\n\nimport {\n  beginTransaction,\n  buildCreateMigration,\n  commitTransaction,\n  count,\n  countGlobalVersions,\n  countVersions,\n  create,\n  createGlobal,\n  createGlobalVersion,\n  createSchemaGenerator,\n  createVersion,\n  deleteMany,\n  deleteOne,\n  deleteVersions,\n  destroy,\n  find,\n  findGlobal,\n  findGlobalVersions,\n  findMigrationDir,\n  findOne,\n  findVersions,\n  migrate,\n  migrateDown,\n  migrateFresh,\n  migrateRefresh,\n  migrateReset,\n  migrateStatus,\n  operatorMap,\n  queryDrafts,\n  rollbackTransaction,\n  updateGlobal,\n  updateGlobalVersion,\n  updateJobs,\n  updateMany,\n  updateOne,\n  updateVersion,\n} from '@payloadcms/drizzle'\nimport {\n  columnToCodeConverter,\n  countDistinct,\n  createDatabase,\n  createExtensions,\n  createJSONQuery,\n  defaultDrizzleSnapshot,\n  deleteWhere,\n  dropDatabase,\n  execute,\n  init,\n  insert,\n  requireDrizzleKit,\n} from '@payloadcms/drizzle/postgres'\nimport { pgEnum, pgSchema, pgTable } from 'drizzle-orm/pg-core'\nimport { createDatabaseAdapter, defaultBeginTransaction } from 'payload'\nimport { fileURLToPath } from 'url'\n\nimport type { Args, VercelPostgresAdapter } from './types.js'\n\nimport { connect } from './connect.js'\n\nconst filename = fileURLToPath(import.meta.url)\n\nexport function vercelPostgresAdapter(args: Args = {}): DatabaseAdapterObj<VercelPostgresAdapter> {\n  const postgresIDType = args.idType || 'serial'\n  const payloadIDType = postgresIDType === 'serial' ? 'number' : 'text'\n  const allowIDOnCreate = args.allowIDOnCreate ?? false\n\n  function adapter({ payload }: { payload: Payload }) {\n    const migrationDir = findMigrationDir(args.migrationDir)\n    let resolveInitializing\n    let rejectInitializing\n    let adapterSchema: VercelPostgresAdapter['pgSchema']\n\n    const initializing = new Promise<void>((res, rej) => {\n      resolveInitializing = res\n      rejectInitializing = rej\n    })\n\n    if (args.schemaName) {\n      adapterSchema = pgSchema(args.schemaName)\n    } else {\n      adapterSchema = { enum: pgEnum, table: pgTable as unknown as PgTableFn<string> }\n    }\n\n    const extensions = (args.extensions ?? []).reduce<Record<string, boolean>>((acc, name) => {\n      acc[name] = true\n      return acc\n    }, {})\n\n    return createDatabaseAdapter<VercelPostgresAdapter>({\n      name: 'postgres',\n      afterSchemaInit: args.afterSchemaInit ?? [],\n      allowIDOnCreate,\n      beforeSchemaInit: args.beforeSchemaInit ?? [],\n      createDatabase,\n      createExtensions,\n      defaultDrizzleSnapshot,\n      disableCreateDatabase: args.disableCreateDatabase ?? false,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      drizzle: undefined,\n      enums: {},\n      extensions,\n      features: {\n        json: true,\n      },\n      fieldConstraints: {},\n      forceUseVercelPostgres: args.forceUseVercelPostgres ?? false,\n      generateSchema: createSchemaGenerator({\n        columnToCodeConverter,\n        corePackageSuffix: 'pg-core',\n        defaultOutputFile: args.generateSchemaOutputFile,\n        enumImport: 'pgEnum',\n        schemaImport: 'pgSchema',\n        tableImport: 'pgTable',\n      }),\n      idType: postgresIDType,\n      indexes: new Set<string>(),\n      initializing,\n      localesSuffix: args.localesSuffix || '_locales',\n      logger: args.logger,\n      operators: operatorMap,\n      pgSchema: adapterSchema,\n      pool: undefined,\n      poolOptions: args.pool,\n      prodMigrations: args.prodMigrations,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      push: args.push,\n      rawRelations: {},\n      rawTables: {},\n      relations: {},\n      relationshipsSuffix: args.relationshipsSuffix || '_rels',\n      schema: {},\n      schemaName: args.schemaName,\n      sessions: {},\n      tableNameMap: new Map<string, string>(),\n      tables: {},\n      tablesFilter: args.tablesFilter,\n      transactionOptions: args.transactionOptions || undefined,\n      updateJobs,\n      versionsSuffix: args.versionsSuffix || '_v',\n\n      // DatabaseAdapter\n      beginTransaction:\n        args.transactionOptions === false ? defaultBeginTransaction() : beginTransaction,\n      commitTransaction,\n      connect,\n      count,\n      countDistinct,\n      countGlobalVersions,\n      countVersions,\n      create,\n      createGlobal,\n      createGlobalVersion,\n      createJSONQuery,\n      createMigration: buildCreateMigration({\n        executeMethod: 'execute',\n        filename,\n        sanitizeStatements({ sqlExecute, statements }) {\n          return `${sqlExecute}\\n ${statements.join('\\n')}\\`)`\n        },\n      }),\n      createVersion,\n      defaultIDType: payloadIDType,\n      deleteMany,\n      deleteOne,\n      deleteVersions,\n      deleteWhere,\n      destroy,\n      dropDatabase,\n      execute,\n      find,\n      findGlobal,\n      findGlobalVersions,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      findOne,\n      findVersions,\n      init,\n      insert,\n      migrate,\n      migrateDown,\n      migrateFresh,\n      migrateRefresh,\n      migrateReset,\n      migrateStatus,\n      migrationDir,\n      packageName: '@payloadcms/db-vercel-postgres',\n      payload,\n      queryDrafts,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      rejectInitializing,\n      requireDrizzleKit,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      resolveInitializing,\n      rollbackTransaction,\n      updateGlobal,\n      updateGlobalVersion,\n      updateMany,\n      updateOne,\n      updateVersion,\n      upsert: updateOne,\n    })\n  }\n\n  return {\n    name: 'postgres',\n    allowIDOnCreate,\n    defaultIDType: payloadIDType,\n    init: adapter,\n  }\n}\n\n/**\n * @todo deprecate /types subpath export in 4.0\n */\nexport type {\n  Args as VercelPostgresAdapterArgs,\n  GeneratedDatabaseSchema,\n  VercelPostgresAdapter,\n} from './types.js'\nexport type { MigrateDownArgs, MigrateUpArgs } from '@payloadcms/drizzle/postgres'\nexport { geometryColumn } from '@payloadcms/drizzle/postgres'\nexport { sql } from 'drizzle-orm'\n"],"names":["beginTransaction","buildCreateMigration","commitTransaction","count","countGlobalVersions","countVersions","create","createGlobal","createGlobalVersion","createSchemaGenerator","createVersion","deleteMany","deleteOne","deleteVersions","destroy","find","findGlobal","findGlobalVersions","findMigrationDir","findOne","findVersions","migrate","migrateDown","migrateFresh","migrateRefresh","migrateReset","migrateStatus","operatorMap","queryDrafts","rollbackTransaction","updateGlobal","updateGlobalVersion","updateJobs","updateMany","updateOne","updateVersion","columnToCodeConverter","countDistinct","createDatabase","createExtensions","createJSONQuery","defaultDrizzleSnapshot","deleteWhere","dropDatabase","execute","init","insert","requireDrizzleKit","pgEnum","pgSchema","pgTable","createDatabaseAdapter","defaultBeginTransaction","fileURLToPath","connect","filename","url","vercelPostgresAdapter","args","postgresIDType","idType","payloadIDType","allowIDOnCreate","adapter","payload","migrationDir","resolveInitializing","rejectInitializing","adapterSchema","initializing","Promise","res","rej","schemaName","enum","table","extensions","reduce","acc","name","afterSchemaInit","beforeSchemaInit","disableCreateDatabase","drizzle","undefined","enums","features","json","fieldConstraints","forceUseVercelPostgres","generateSchema","corePackageSuffix","defaultOutputFile","generateSchemaOutputFile","enumImport","schemaImport","tableImport","indexes","Set","localesSuffix","logger","operators","pool","poolOptions","prodMigrations","push","rawRelations","rawTables","relations","relationshipsSuffix","schema","sessions","tableNameMap","Map","tables","tablesFilter","transactionOptions","versionsSuffix","createMigration","executeMethod","sanitizeStatements","sqlExecute","statements","join","defaultIDType","packageName","upsert","geometryColumn","sql"],"mappings":"AAGA,SACEA,gBAAgB,EAChBC,oBAAoB,EACpBC,iBAAiB,EACjBC,KAAK,EACLC,mBAAmB,EACnBC,aAAa,EACbC,MAAM,EACNC,YAAY,EACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,cAAc,EACdC,OAAO,EACPC,IAAI,EACJC,UAAU,EACVC,kBAAkB,EAClBC,gBAAgB,EAChBC,OAAO,EACPC,YAAY,EACZC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,cAAc,EACdC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,WAAW,EACXC,mBAAmB,EACnBC,YAAY,EACZC,mBAAmB,EACnBC,UAAU,EACVC,UAAU,EACVC,SAAS,EACTC,aAAa,QACR,sBAAqB;AAC5B,SACEC,qBAAqB,EACrBC,aAAa,EACbC,cAAc,EACdC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtBC,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,IAAI,EACJC,MAAM,EACNC,iBAAiB,QACZ,+BAA8B;AACrC,SAASC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,sBAAqB;AAC/D,SAASC,qBAAqB,EAAEC,uBAAuB,QAAQ,UAAS;AACxE,SAASC,aAAa,QAAQ,MAAK;AAInC,SAASC,OAAO,QAAQ,eAAc;AAEtC,MAAMC,WAAWF,cAAc,YAAYG,GAAG;AAE9C,OAAO,SAASC,sBAAsBC,OAAa,CAAC,CAAC;IACnD,MAAMC,iBAAiBD,KAAKE,MAAM,IAAI;IACtC,MAAMC,gBAAgBF,mBAAmB,WAAW,WAAW;IAC/D,MAAMG,kBAAkBJ,KAAKI,eAAe,IAAI;IAEhD,SAASC,QAAQ,EAAEC,OAAO,EAAwB;QAChD,MAAMC,eAAe/C,iBAAiBwC,KAAKO,YAAY;QACvD,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QAEJ,MAAMC,eAAe,IAAIC,QAAc,CAACC,KAAKC;YAC3CN,sBAAsBK;YACtBJ,qBAAqBK;QACvB;QAEA,IAAId,KAAKe,UAAU,EAAE;YACnBL,gBAAgBnB,SAASS,KAAKe,UAAU;QAC1C,OAAO;YACLL,gBAAgB;gBAAEM,MAAM1B;gBAAQ2B,OAAOzB;YAAwC;QACjF;QAEA,MAAM0B,aAAa,AAAClB,CAAAA,KAAKkB,UAAU,IAAI,EAAE,AAAD,EAAGC,MAAM,CAA0B,CAACC,KAAKC;YAC/ED,GAAG,CAACC,KAAK,GAAG;YACZ,OAAOD;QACT,GAAG,CAAC;QAEJ,OAAO3B,sBAA6C;YAClD4B,MAAM;YACNC,iBAAiBtB,KAAKsB,eAAe,IAAI,EAAE;YAC3ClB;YACAmB,kBAAkBvB,KAAKuB,gBAAgB,IAAI,EAAE;YAC7C3C;YACAC;YACAE;YACAyC,uBAAuBxB,KAAKwB,qBAAqB,IAAI;YACrD,oFAAoF;YACpFC,SAASC;YACTC,OAAO,CAAC;YACRT;YACAU,UAAU;gBACRC,MAAM;YACR;YACAC,kBAAkB,CAAC;YACnBC,wBAAwB/B,KAAK+B,sBAAsB,IAAI;YACvDC,gBAAgBjF,sBAAsB;gBACpC2B;gBACAuD,mBAAmB;gBACnBC,mBAAmBlC,KAAKmC,wBAAwB;gBAChDC,YAAY;gBACZC,cAAc;gBACdC,aAAa;YACf;YACApC,QAAQD;YACRsC,SAAS,IAAIC;YACb7B;YACA8B,eAAezC,KAAKyC,aAAa,IAAI;YACrCC,QAAQ1C,KAAK0C,MAAM;YACnBC,WAAW1E;YACXsB,UAAUmB;YACVkC,MAAMlB;YACNmB,aAAa7C,KAAK4C,IAAI;YACtBE,gBAAgB9C,KAAK8C,cAAc;YACnC,oFAAoF;YACpFC,MAAM/C,KAAK+C,IAAI;YACfC,cAAc,CAAC;YACfC,WAAW,CAAC;YACZC,WAAW,CAAC;YACZC,qBAAqBnD,KAAKmD,mBAAmB,IAAI;YACjDC,QAAQ,CAAC;YACTrC,YAAYf,KAAKe,UAAU;YAC3BsC,UAAU,CAAC;YACXC,cAAc,IAAIC;YAClBC,QAAQ,CAAC;YACTC,cAAczD,KAAKyD,YAAY;YAC/BC,oBAAoB1D,KAAK0D,kBAAkB,IAAIhC;YAC/CpD;YACAqF,gBAAgB3D,KAAK2D,cAAc,IAAI;YAEvC,kBAAkB;YAClBrH,kBACE0D,KAAK0D,kBAAkB,KAAK,QAAQhE,4BAA4BpD;YAClEE;YACAoD;YACAnD;YACAkC;YACAjC;YACAC;YACAC;YACAC;YACAC;YACAgC;YACA8E,iBAAiBrH,qBAAqB;gBACpCsH,eAAe;gBACfhE;gBACAiE,oBAAmB,EAAEC,UAAU,EAAEC,UAAU,EAAE;oBAC3C,OAAO,GAAGD,WAAW,GAAG,EAAEC,WAAWC,IAAI,CAAC,MAAM,GAAG,CAAC;gBACtD;YACF;YACAjH;YACAkH,eAAe/D;YACflD;YACAC;YACAC;YACA6B;YACA5B;YACA6B;YACAC;YACA7B;YACAC;YACAC;YACA,oFAAoF;YACpFE;YACAC;YACAyB;YACAC;YACAzB;YACAC;YACAC;YACAC;YACAC;YACAC;YACAuC;YACA4D,aAAa;YACb7D;YACApC;YACA,oFAAoF;YACpFuC;YACApB;YACA,oFAAoF;YACpFmB;YACArC;YACAC;YACAC;YACAE;YACAC;YACAC;YACA2F,QAAQ5F;QACV;IACF;IAEA,OAAO;QACL6C,MAAM;QACNjB;QACA8D,eAAe/D;QACfhB,MAAMkB;IACR;AACF;AAWA,SAASgE,cAAc,QAAQ,+BAA8B;AAC7D,SAASC,GAAG,QAAQ,cAAa"}