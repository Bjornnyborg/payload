{"version":3,"sources":["../src/connect.ts"],"sourcesContent":["import type { DrizzleAdapter } from '@payloadcms/drizzle/types'\nimport type { Connect, Migration } from 'payload'\n\nimport { pushDevSchema } from '@payloadcms/drizzle'\nimport { sql, VercelPool } from '@vercel/postgres'\nimport { drizzle } from 'drizzle-orm/node-postgres'\nimport pg from 'pg'\n\nimport type { VercelPostgresAdapter } from './types.js'\n\nexport const connect: Connect = async function connect(\n  this: VercelPostgresAdapter,\n  options = {\n    hotReload: false,\n  },\n) {\n  const { hotReload } = options\n\n  this.schema = {\n    pgSchema: this.pgSchema,\n    ...this.tables,\n    ...this.relations,\n    ...this.enums,\n  }\n\n  try {\n    const logger = this.logger || false\n\n    let client: pg.Pool | VercelPool\n\n    const connectionString = this.poolOptions?.connectionString ?? process.env.POSTGRES_URL\n\n    // Use non-vercel postgres for local database\n    if (\n      !this.forceUseVercelPostgres &&\n      connectionString &&\n      ['127.0.0.1', 'localhost'].includes(new URL(connectionString).hostname)\n    ) {\n      client = new pg.Pool(\n        this.poolOptions ?? {\n          connectionString,\n        },\n      )\n    } else {\n      client = this.poolOptions ? new VercelPool(this.poolOptions) : sql\n    }\n\n    // Passed the poolOptions if provided,\n    // else have vercel/postgres detect the connection string from the environment\n    this.drizzle = drizzle({\n      client,\n      logger,\n      schema: this.schema,\n    })\n\n    if (!hotReload) {\n      if (process.env.PAYLOAD_DROP_DATABASE === 'true') {\n        this.payload.logger.info(`---- DROPPING TABLES SCHEMA(${this.schemaName || 'public'}) ----`)\n        await this.dropDatabase({ adapter: this })\n        this.payload.logger.info('---- DROPPED TABLES ----')\n      }\n    }\n  } catch (error) {\n    const err = error instanceof Error ? error : new Error(String(error))\n    if (err.message?.match(/database .* does not exist/i) && !this.disableCreateDatabase) {\n      // capitalize first char of the err msg\n      this.payload.logger.info(\n        `${err.message.charAt(0).toUpperCase() + err.message.slice(1)}, creating...`,\n      )\n      const isCreated = await this.createDatabase()\n\n      if (isCreated) {\n        await this.connect?.(options)\n        return\n      }\n    } else {\n      this.payload.logger.error({\n        err,\n        msg: `Error: cannot connect to Postgres. Details: ${err.message}`,\n      })\n    }\n\n    if (typeof this.rejectInitializing === 'function') {\n      this.rejectInitializing()\n    }\n    process.exit(1)\n  }\n\n  await this.createExtensions()\n\n  // Only push schema if not in production\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    process.env.PAYLOAD_MIGRATING !== 'true' &&\n    this.push !== false\n  ) {\n    await pushDevSchema(this as unknown as DrizzleAdapter)\n  }\n\n  if (typeof this.resolveInitializing === 'function') {\n    this.resolveInitializing()\n  }\n\n  if (process.env.NODE_ENV === 'production' && this.prodMigrations) {\n    await this.migrate({ migrations: this.prodMigrations as Migration[] })\n  }\n}\n"],"names":["pushDevSchema","sql","VercelPool","drizzle","pg","connect","options","hotReload","schema","pgSchema","tables","relations","enums","logger","client","connectionString","poolOptions","process","env","POSTGRES_URL","forceUseVercelPostgres","includes","URL","hostname","Pool","PAYLOAD_DROP_DATABASE","payload","info","schemaName","dropDatabase","adapter","error","err","Error","String","message","match","disableCreateDatabase","charAt","toUpperCase","slice","isCreated","createDatabase","msg","rejectInitializing","exit","createExtensions","NODE_ENV","PAYLOAD_MIGRATING","push","resolveInitializing","prodMigrations","migrate","migrations"],"mappings":"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"}