{"version":3,"sources":["../../../src/database/queryValidation/validateQueryPaths.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { SanitizedCollectionConfig } from '../../collections/config/types.js'\nimport type { FlattenedField } from '../../fields/config/types.js'\nimport type { SanitizedGlobalConfig } from '../../globals/config/types.js'\nimport type { Operator, PayloadRequest, Where, WhereField } from '../../types/index.js'\nimport type { EntityPolicies } from './types.js'\n\nimport { QueryError } from '../../errors/QueryError.js'\nimport { validOperatorSet } from '../../types/constants.js'\nimport { validateSearchParam } from './validateSearchParams.js'\n\ntype Args = {\n  errors?: { path: string }[]\n  overrideAccess: boolean\n  policies?: EntityPolicies\n  polymorphicJoin?: boolean\n  req: PayloadRequest\n  versionFields?: FlattenedField[]\n  where: Where\n} & (\n  | {\n      collectionConfig: SanitizedCollectionConfig\n      globalConfig?: never | undefined\n    }\n  | {\n      collectionConfig?: never | undefined\n      globalConfig: SanitizedGlobalConfig\n    }\n)\n\nconst flattenWhere = (query: Where): WhereField[] => {\n  const flattenedConstraints: WhereField[] = []\n\n  for (const [key, val] of Object.entries(query)) {\n    if ((key === 'and' || key === 'or') && Array.isArray(val)) {\n      for (const subVal of val) {\n        flattenedConstraints.push(...flattenWhere(subVal))\n      }\n    } else {\n      flattenedConstraints.push({ [key]: val })\n    }\n  }\n\n  return flattenedConstraints\n}\n\nexport async function validateQueryPaths({\n  collectionConfig,\n  errors = [],\n  globalConfig,\n  overrideAccess,\n  policies = {\n    collections: {},\n    globals: {},\n  },\n  polymorphicJoin,\n  req,\n  versionFields,\n  where,\n}: Args): Promise<void> {\n  const fields = versionFields || (globalConfig || collectionConfig).flattenedFields\n\n  if (typeof where === 'object') {\n    const whereFields = flattenWhere(where)\n    // We need to determine if the whereKey is an AND, OR, or a schema path\n    const promises = []\n    for (const constraint of whereFields) {\n      for (const path in constraint) {\n        for (const operator in constraint[path]) {\n          const val = constraint[path][operator]\n          if (validOperatorSet.has(operator as Operator)) {\n            promises.push(\n              validateSearchParam({\n                collectionConfig,\n                errors,\n                fields,\n                globalConfig,\n                operator,\n                overrideAccess,\n                path,\n                policies,\n                polymorphicJoin,\n                req,\n                val,\n                versionFields,\n              }),\n            )\n          }\n        }\n      }\n    }\n\n    await Promise.all(promises)\n    if (errors.length > 0) {\n      throw new QueryError(errors)\n    }\n  }\n}\n"],"names":["QueryError","validOperatorSet","validateSearchParam","flattenWhere","query","flattenedConstraints","key","val","Object","entries","Array","isArray","subVal","push","validateQueryPaths","collectionConfig","errors","globalConfig","overrideAccess","policies","collections","globals","polymorphicJoin","req","versionFields","where","fields","flattenedFields","whereFields","promises","constraint","path","operator","has","Promise","all","length"],"mappings":"AAAA,oBAAoB;AAOpB,SAASA,UAAU,QAAQ,6BAA4B;AACvD,SAASC,gBAAgB,QAAQ,2BAA0B;AAC3D,SAASC,mBAAmB,QAAQ,4BAA2B;AAqB/D,MAAMC,eAAe,CAACC;IACpB,MAAMC,uBAAqC,EAAE;IAE7C,KAAK,MAAM,CAACC,KAAKC,IAAI,IAAIC,OAAOC,OAAO,CAACL,OAAQ;QAC9C,IAAI,AAACE,CAAAA,QAAQ,SAASA,QAAQ,IAAG,KAAMI,MAAMC,OAAO,CAACJ,MAAM;YACzD,KAAK,MAAMK,UAAUL,IAAK;gBACxBF,qBAAqBQ,IAAI,IAAIV,aAAaS;YAC5C;QACF,OAAO;YACLP,qBAAqBQ,IAAI,CAAC;gBAAE,CAACP,IAAI,EAAEC;YAAI;QACzC;IACF;IAEA,OAAOF;AACT;AAEA,OAAO,eAAeS,mBAAmB,EACvCC,gBAAgB,EAChBC,SAAS,EAAE,EACXC,YAAY,EACZC,cAAc,EACdC,WAAW;IACTC,aAAa,CAAC;IACdC,SAAS,CAAC;AACZ,CAAC,EACDC,eAAe,EACfC,GAAG,EACHC,aAAa,EACbC,KAAK,EACA;IACL,MAAMC,SAASF,iBAAiB,AAACP,CAAAA,gBAAgBF,gBAAe,EAAGY,eAAe;IAElF,IAAI,OAAOF,UAAU,UAAU;QAC7B,MAAMG,cAAczB,aAAasB;QACjC,uEAAuE;QACvE,MAAMI,WAAW,EAAE;QACnB,KAAK,MAAMC,cAAcF,YAAa;YACpC,IAAK,MAAMG,QAAQD,WAAY;gBAC7B,IAAK,MAAME,YAAYF,UAAU,CAACC,KAAK,CAAE;oBACvC,MAAMxB,MAAMuB,UAAU,CAACC,KAAK,CAACC,SAAS;oBACtC,IAAI/B,iBAAiBgC,GAAG,CAACD,WAAuB;wBAC9CH,SAAShB,IAAI,CACXX,oBAAoB;4BAClBa;4BACAC;4BACAU;4BACAT;4BACAe;4BACAd;4BACAa;4BACAZ;4BACAG;4BACAC;4BACAhB;4BACAiB;wBACF;oBAEJ;gBACF;YACF;QACF;QAEA,MAAMU,QAAQC,GAAG,CAACN;QAClB,IAAIb,OAAOoB,MAAM,GAAG,GAAG;YACrB,MAAM,IAAIpC,WAAWgB;QACvB;IACF;AACF"}