{"version":3,"sources":["../../src/uploads/getFileByPath.ts"],"sourcesContent":["// @ts-strict-ignore\nimport { fileTypeFromFile } from 'file-type'\nimport fs from 'fs/promises'\nimport path from 'path'\n\nimport type { PayloadRequest } from '../types/index.js'\n\nconst mimeTypeEstimate = {\n  svg: 'image/svg+xml',\n}\n\nexport const getFileByPath = async (filePath: string): Promise<PayloadRequest['file']> => {\n  if (typeof filePath === 'string') {\n    const data = await fs.readFile(filePath)\n    const mimetype = fileTypeFromFile(filePath)\n    const { size } = await fs.stat(filePath)\n\n    const name = path.basename(filePath)\n    const ext = path.extname(filePath).slice(1)\n\n    const mime = (await mimetype)?.mime || mimeTypeEstimate[ext]\n\n    return {\n      name,\n      data,\n      mimetype: mime,\n      size,\n    }\n  }\n\n  return undefined\n}\n"],"names":["fileTypeFromFile","fs","path","mimeTypeEstimate","svg","getFileByPath","filePath","data","readFile","mimetype","size","stat","name","basename","ext","extname","slice","mime","undefined"],"mappings":"AAAA,oBAAoB;AACpB,SAASA,gBAAgB,QAAQ,YAAW;AAC5C,OAAOC,QAAQ,cAAa;AAC5B,OAAOC,UAAU,OAAM;AAIvB,MAAMC,mBAAmB;IACvBC,KAAK;AACP;AAEA,OAAO,MAAMC,gBAAgB,OAAOC;IAClC,IAAI,OAAOA,aAAa,UAAU;QAChC,MAAMC,OAAO,MAAMN,GAAGO,QAAQ,CAACF;QAC/B,MAAMG,WAAWT,iBAAiBM;QAClC,MAAM,EAAEI,IAAI,EAAE,GAAG,MAAMT,GAAGU,IAAI,CAACL;QAE/B,MAAMM,OAAOV,KAAKW,QAAQ,CAACP;QAC3B,MAAMQ,MAAMZ,KAAKa,OAAO,CAACT,UAAUU,KAAK,CAAC;QAEzC,MAAMC,OAAO,AAAC,CAAA,MAAMR,QAAO,GAAIQ,QAAQd,gBAAgB,CAACW,IAAI;QAE5D,OAAO;YACLF;YACAL;YACAE,UAAUQ;YACVP;QACF;IACF;IAEA,OAAOQ;AACT,EAAC"}