{"version":3,"sources":["../../../src/auth/operations/login.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type {\n  AuthOperationsFromCollectionSlug,\n  Collection,\n  DataFromCollectionSlug,\n} from '../../collections/config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\nimport type { User } from '../types.js'\n\nimport { buildAfterOperation } from '../../collections/operations/utils.js'\nimport {\n  AuthenticationError,\n  LockedAuth,\n  UnverifiedEmail,\n  ValidationError,\n} from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { Forbidden } from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { getFieldsToSign } from '../getFieldsToSign.js'\nimport { getLoginOptions } from '../getLoginOptions.js'\nimport isLocked from '../isLocked.js'\nimport { jwtSign } from '../jwt.js'\nimport { authenticateLocalStrategy } from '../strategies/local/authenticate.js'\nimport { incrementLoginAttempts } from '../strategies/local/incrementLoginAttempts.js'\nimport { resetLoginAttempts } from '../strategies/local/resetLoginAttempts.js'\n\nexport type Result = {\n  exp?: number\n  token?: string\n  user?: User\n}\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: AuthOperationsFromCollectionSlug<TSlug>['login']\n  depth?: number\n  overrideAccess?: boolean\n  req: PayloadRequest\n  showHiddenFields?: boolean\n}\n\nexport const loginOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<{ user: DataFromCollectionSlug<TSlug> } & Result> => {\n  let args = incomingArgs\n\n  if (args.collection.config.auth.disableLocalStrategy) {\n    throw new Forbidden(args.req.t)\n  }\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection?.config,\n            context: args.req.context,\n            operation: 'login',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      collection: { config: collectionConfig },\n      data,\n      depth,\n      overrideAccess,\n      req,\n      req: {\n        fallbackLocale,\n        locale,\n        payload,\n        payload: { secret },\n      },\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Login\n    // /////////////////////////////////////\n\n    let user\n    const { email: unsanitizedEmail, password } = data\n    const loginWithUsername = collectionConfig.auth.loginWithUsername\n\n    const sanitizedEmail =\n      typeof unsanitizedEmail === 'string' ? unsanitizedEmail.toLowerCase().trim() : null\n    const sanitizedUsername =\n      'username' in data && typeof data?.username === 'string'\n        ? data.username.toLowerCase().trim()\n        : null\n\n    const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(loginWithUsername)\n\n    // cannot login with email, did not provide username\n    if (!canLoginWithEmail && !sanitizedUsername) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ message: req.i18n.t('validation:required'), path: 'username' }],\n      })\n    }\n\n    // cannot login with username, did not provide email\n    if (!canLoginWithUsername && !sanitizedEmail) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ message: req.i18n.t('validation:required'), path: 'email' }],\n      })\n    }\n\n    // can login with either email or username, did not provide either\n    if (!sanitizedUsername && !sanitizedEmail) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [\n          { message: req.i18n.t('validation:required'), path: 'email' },\n          { message: req.i18n.t('validation:required'), path: 'username' },\n        ],\n      })\n    }\n\n    // did not provide password for login\n    if (typeof password !== 'string' || password.trim() === '') {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ message: req.i18n.t('validation:required'), path: 'password' }],\n      })\n    }\n\n    let whereConstraint: Where = {}\n    const emailConstraint: Where = {\n      email: {\n        equals: sanitizedEmail,\n      },\n    }\n    const usernameConstraint: Where = {\n      username: {\n        equals: sanitizedUsername,\n      },\n    }\n\n    if (canLoginWithEmail && canLoginWithUsername && (sanitizedUsername || sanitizedEmail)) {\n      if (sanitizedUsername) {\n        whereConstraint = {\n          or: [\n            usernameConstraint,\n            {\n              email: {\n                equals: sanitizedUsername,\n              },\n            },\n          ],\n        }\n      } else {\n        whereConstraint = {\n          or: [\n            emailConstraint,\n            {\n              username: {\n                equals: sanitizedEmail,\n              },\n            },\n          ],\n        }\n      }\n    } else if (canLoginWithEmail && sanitizedEmail) {\n      whereConstraint = emailConstraint\n    } else if (canLoginWithUsername && sanitizedUsername) {\n      whereConstraint = usernameConstraint\n    }\n\n    user = await payload.db.findOne<any>({\n      collection: collectionConfig.slug,\n      req,\n      where: whereConstraint,\n    })\n\n    if (!user) {\n      throw new AuthenticationError(req.t, Boolean(canLoginWithUsername && sanitizedUsername))\n    }\n\n    if (args.collection.config.auth.verify && user._verified === false) {\n      throw new UnverifiedEmail({ t: req.t })\n    }\n\n    user.collection = collectionConfig.slug\n    user._strategy = 'local-jwt'\n\n    if (isLocked(new Date(user.lockUntil).getTime())) {\n      throw new LockedAuth(req.t)\n    }\n\n    const authResult = await authenticateLocalStrategy({ doc: user, password })\n\n    user = sanitizeInternalFields(user)\n\n    const maxLoginAttemptsEnabled = args.collection.config.auth.maxLoginAttempts > 0\n\n    if (!authResult) {\n      if (maxLoginAttemptsEnabled) {\n        await incrementLoginAttempts({\n          collection: collectionConfig,\n          doc: user,\n          payload: req.payload,\n          req,\n        })\n      }\n\n      throw new AuthenticationError(req.t)\n    }\n\n    if (maxLoginAttemptsEnabled) {\n      await resetLoginAttempts({\n        collection: collectionConfig,\n        doc: user,\n        payload: req.payload,\n        req,\n      })\n    }\n\n    const fieldsToSign = getFieldsToSign({\n      collectionConfig,\n      email: sanitizedEmail,\n      user,\n    })\n\n    // /////////////////////////////////////\n    // beforeLogin - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeLogin?.length) {\n      for (const hook of collectionConfig.hooks.beforeLogin) {\n        user =\n          (await hook({\n            collection: args.collection?.config,\n            context: args.req.context,\n            req: args.req,\n            user,\n          })) || user\n      }\n    }\n\n    const { exp, token } = await jwtSign({\n      fieldsToSign,\n      secret,\n      tokenExpiration: collectionConfig.auth.tokenExpiration,\n    })\n\n    req.user = user\n\n    // /////////////////////////////////////\n    // afterLogin - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterLogin?.length) {\n      for (const hook of collectionConfig.hooks.afterLogin) {\n        user =\n          (await hook({\n            collection: args.collection?.config,\n            context: args.req.context,\n            req: args.req,\n            token,\n            user,\n          })) || user\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    user = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: user,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        user =\n          (await hook({\n            collection: args.collection?.config,\n            context: req.context,\n            doc: user,\n            req,\n          })) || user\n      }\n    }\n\n    let result: { user: DataFromCollectionSlug<TSlug> } & Result = {\n      exp,\n      token,\n      user,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: args.collection?.config,\n      operation: 'login',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["buildAfterOperation","AuthenticationError","LockedAuth","UnverifiedEmail","ValidationError","afterRead","Forbidden","killTransaction","sanitizeInternalFields","getFieldsToSign","getLoginOptions","isLocked","jwtSign","authenticateLocalStrategy","incrementLoginAttempts","resetLoginAttempts","loginOperation","incomingArgs","args","collection","config","auth","disableLocalStrategy","req","t","hooks","beforeOperation","length","hook","context","operation","collectionConfig","data","depth","overrideAccess","fallbackLocale","locale","payload","secret","showHiddenFields","user","email","unsanitizedEmail","password","loginWithUsername","sanitizedEmail","toLowerCase","trim","sanitizedUsername","username","canLoginWithEmail","canLoginWithUsername","slug","errors","message","i18n","path","whereConstraint","emailConstraint","equals","usernameConstraint","or","db","findOne","where","Boolean","verify","_verified","_strategy","Date","lockUntil","getTime","authResult","doc","maxLoginAttemptsEnabled","maxLoginAttempts","fieldsToSign","beforeLogin","exp","token","tokenExpiration","afterLogin","draft","undefined","global","result","error"],"mappings":"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"}