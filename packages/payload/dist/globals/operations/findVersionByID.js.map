{"version":3,"sources":["../../../src/globals/operations/findVersionByID.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { FindGlobalVersionsArgs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { deepCopyObjectSimple } from '../../utilities/deepCopyObject.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\n\nexport type Arguments = {\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  globalConfig: SanitizedGlobalConfig\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const findVersionByIDOperation = async <T extends TypeWithVersion<T> = any>(\n  args: Arguments,\n): Promise<T> => {\n  const {\n    id,\n    currentDepth,\n    depth,\n    disableErrors,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, globalConfig.access.readVersions)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResults === false) {\n      return null\n    }\n\n    const hasWhereAccess = typeof accessResults === 'object'\n\n    const select = sanitizeSelect({\n      forceSelect: getQueryDraftsSelect({ select: globalConfig.forceSelect }),\n      select: incomingSelect,\n    })\n\n    const findGlobalVersionsArgs: FindGlobalVersionsArgs = {\n      global: globalConfig.slug,\n      limit: 1,\n      locale,\n      req,\n      select,\n      where: combineQueries({ id: { equals: id } }, accessResults),\n    }\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findGlobalVersionsArgs.where.and[0].id) {\n      throw new NotFound(req.t)\n    }\n\n    const { docs: results } = await payload.db.findGlobalVersions(findGlobalVersionsArgs)\n    if (!results || results?.length === 0) {\n      if (!disableErrors) {\n        if (!hasWhereAccess) {\n          throw new NotFound(req.t)\n        }\n        if (hasWhereAccess) {\n          throw new Forbidden(req.t)\n        }\n      }\n\n      return null\n    }\n\n    // Clone the result - it may have come back memoized\n    let result: any = deepCopyObjectSimple(results[0])\n\n    if (!result.version) {\n      result.version = {}\n    }\n\n    // Patch globalType onto version doc\n    result.version.globalType = globalConfig.slug\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeRead?.length) {\n      for (const hook of globalConfig.hooks.beforeRead) {\n        result =\n          (await hook({\n            context: req.context,\n            doc: result.version,\n            global: globalConfig,\n            req,\n          })) || result.version\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.version = await afterRead({\n      collection: null,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result.version,\n      draft: undefined,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select: typeof select?.version === 'object' ? select.version : undefined,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterRead?.length) {\n      for (const hook of globalConfig.hooks.afterRead) {\n        result.version =\n          (await hook({\n            context: req.context,\n            doc: result.version,\n            global: globalConfig,\n            query: findGlobalVersionsArgs.where,\n            req,\n          })) || result.version\n      }\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","Forbidden","NotFound","afterRead","deepCopyObjectSimple","killTransaction","sanitizeSelect","getQueryDraftsSelect","findVersionByIDOperation","args","id","currentDepth","depth","disableErrors","globalConfig","overrideAccess","populate","req","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","accessResults","access","readVersions","hasWhereAccess","forceSelect","findGlobalVersionsArgs","global","slug","limit","where","equals","and","t","docs","results","db","findGlobalVersions","length","result","version","globalType","hooks","beforeRead","hook","context","doc","collection","draft","undefined","query","error"],"mappings":"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"}