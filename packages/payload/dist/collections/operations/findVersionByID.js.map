{"version":3,"sources":["../../../src/collections/operations/findVersionByID.ts"],"sourcesContent":["// @ts-strict-ignore\nimport { status as httpStatus } from 'http-status'\n\nimport type { PayloadRequest, PopulateType, SelectType } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const findVersionByIDOperation = async <TData extends TypeWithID = any>(\n  args: Arguments,\n): Promise<TypeWithVersion<TData>> => {\n  const {\n    id,\n    collection: { config: collectionConfig },\n    currentDepth,\n    depth,\n    disableErrors,\n    overrideAccess,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n  } = args\n\n  if (!id) {\n    throw new APIError('Missing ID of version.', httpStatus.BAD_REQUEST)\n  }\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.readVersions)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResults === false) {\n      return null\n    }\n\n    const hasWhereAccess = typeof accessResults === 'object'\n\n    const fullWhere = combineQueries({ id: { equals: id } }, accessResults)\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    const select = sanitizeSelect({\n      forceSelect: getQueryDraftsSelect({ select: collectionConfig.forceSelect }),\n      select: incomingSelect,\n    })\n\n    const versionsQuery = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: 1,\n      locale,\n      pagination: false,\n      req,\n      select,\n      where: fullWhere,\n    })\n\n    const result = versionsQuery.docs[0]\n\n    if (!result) {\n      if (!disableErrors) {\n        if (!hasWhereAccess) {\n          throw new NotFound(req.t)\n        }\n        if (hasWhereAccess) {\n          throw new Forbidden(req.t)\n        }\n      }\n\n      return null\n    }\n\n    if (!result.version) {\n      // Fallback if not selected\n      ;(result as any).version = {}\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeRead?.length) {\n      for (const hook of collectionConfig.hooks.beforeRead) {\n        result.version =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result.version,\n            query: fullWhere,\n            req,\n          })) || result.version\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.version = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result.version,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select: typeof select?.version === 'object' ? select.version : undefined,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        result.version =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result.version,\n            query: fullWhere,\n            req,\n          })) || result.version\n      }\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["status","httpStatus","executeAccess","combineQueries","APIError","Forbidden","NotFound","afterRead","killTransaction","sanitizeSelect","getQueryDraftsSelect","findVersionByIDOperation","args","id","collection","config","collectionConfig","currentDepth","depth","disableErrors","overrideAccess","populate","req","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","BAD_REQUEST","accessResults","access","readVersions","hasWhereAccess","fullWhere","equals","forceSelect","versionsQuery","db","findVersions","slug","limit","pagination","where","result","docs","t","version","hooks","beforeRead","length","hook","context","doc","query","draft","undefined","global","error"],"mappings":"AAAA,oBAAoB;AACpB,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAMlD,OAAOC,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,wBAAuB;AACrE,SAASC,SAAS,QAAQ,wCAAuC;AACjE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,cAAc,QAAQ,oCAAmC;AAClE,SAASC,oBAAoB,QAAQ,gDAA+C;AAepF,OAAO,MAAMC,2BAA2B,OACtCC;IAEA,MAAM,EACJC,EAAE,EACFC,YAAY,EAAEC,QAAQC,gBAAgB,EAAE,EACxCC,YAAY,EACZC,KAAK,EACLC,aAAa,EACbC,cAAc,EACdC,QAAQ,EACRC,KAAK,EAAEC,cAAc,EAAEC,MAAM,EAAEC,OAAO,EAAE,EACxCH,GAAG,EACHI,QAAQC,cAAc,EACtBC,gBAAgB,EACjB,GAAGhB;IAEJ,IAAI,CAACC,IAAI;QACP,MAAM,IAAIT,SAAS,0BAA0BH,WAAW4B,WAAW;IACrE;IAEA,IAAI;QACF,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,MAAMC,gBAAgB,CAACV,iBACnB,MAAMlB,cAAc;YAAEW;YAAIM;YAAeG;QAAI,GAAGN,iBAAiBe,MAAM,CAACC,YAAY,IACpF;QAEJ,gEAAgE;QAChE,IAAIF,kBAAkB,OAAO;YAC3B,OAAO;QACT;QAEA,MAAMG,iBAAiB,OAAOH,kBAAkB;QAEhD,MAAMI,YAAY/B,eAAe;YAAEU,IAAI;gBAAEsB,QAAQtB;YAAG;QAAE,GAAGiB;QAEzD,wCAAwC;QACxC,aAAa;QACb,wCAAwC;QAExC,MAAMJ,SAASjB,eAAe;YAC5B2B,aAAa1B,qBAAqB;gBAAEgB,QAAQV,iBAAiBoB,WAAW;YAAC;YACzEV,QAAQC;QACV;QAEA,MAAMU,gBAAgB,MAAMZ,QAAQa,EAAE,CAACC,YAAY,CAAQ;YACzDzB,YAAYE,iBAAiBwB,IAAI;YACjCC,OAAO;YACPjB;YACAkB,YAAY;YACZpB;YACAI;YACAiB,OAAOT;QACT;QAEA,MAAMU,SAASP,cAAcQ,IAAI,CAAC,EAAE;QAEpC,IAAI,CAACD,QAAQ;YACX,IAAI,CAACzB,eAAe;gBAClB,IAAI,CAACc,gBAAgB;oBACnB,MAAM,IAAI3B,SAASgB,IAAIwB,CAAC;gBAC1B;gBACA,IAAIb,gBAAgB;oBAClB,MAAM,IAAI5B,UAAUiB,IAAIwB,CAAC;gBAC3B;YACF;YAEA,OAAO;QACT;QAEA,IAAI,CAACF,OAAOG,OAAO,EAAE;YACnB,2BAA2B;;YACzBH,OAAeG,OAAO,GAAG,CAAC;QAC9B;QAEA,wCAAwC;QACxC,0BAA0B;QAC1B,wCAAwC;QAExC,IAAI/B,iBAAiBgC,KAAK,EAAEC,YAAYC,QAAQ;YAC9C,KAAK,MAAMC,QAAQnC,iBAAiBgC,KAAK,CAACC,UAAU,CAAE;gBACpDL,OAAOG,OAAO,GACZ,AAAC,MAAMI,KAAK;oBACVrC,YAAYE;oBACZoC,SAAS9B,IAAI8B,OAAO;oBACpBC,KAAKT,OAAOG,OAAO;oBACnBO,OAAOpB;oBACPZ;gBACF,MAAOsB,OAAOG,OAAO;YACzB;QACF;QAEA,wCAAwC;QACxC,qBAAqB;QACrB,wCAAwC;QAExCH,OAAOG,OAAO,GAAG,MAAMxC,UAAU;YAC/BO,YAAYE;YACZoC,SAAS9B,IAAI8B,OAAO;YACpBnC;YACAC;YACAmC,KAAKT,OAAOG,OAAO;YACnBQ,OAAOC;YACPjC;YACAkC,QAAQ;YACRjC;YACAJ;YACAC;YACAC;YACAI,QAAQ,OAAOA,QAAQqB,YAAY,WAAWrB,OAAOqB,OAAO,GAAGS;YAC/D5B;QACF;QAEA,wCAAwC;QACxC,yBAAyB;QACzB,wCAAwC;QAExC,IAAIZ,iBAAiBgC,KAAK,EAAEzC,WAAW2C,QAAQ;YAC7C,KAAK,MAAMC,QAAQnC,iBAAiBgC,KAAK,CAACzC,SAAS,CAAE;gBACnDqC,OAAOG,OAAO,GACZ,AAAC,MAAMI,KAAK;oBACVrC,YAAYE;oBACZoC,SAAS9B,IAAI8B,OAAO;oBACpBC,KAAKT,OAAOG,OAAO;oBACnBO,OAAOpB;oBACPZ;gBACF,MAAOsB,OAAOG,OAAO;YACzB;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOH;IACT,EAAE,OAAOc,OAAgB;QACvB,MAAMlD,gBAAgBc;QACtB,MAAMoC;IACR;AACF,EAAC"}