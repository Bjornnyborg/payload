{"version":3,"sources":["../../../src/collections/operations/delete.ts"],"sourcesContent":["// @ts-strict-ignore\nimport { status as httpStatus } from 'http-status'\n\nimport type { AccessResult } from '../../config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, PopulateType, SelectType, Where } from '../../types/index.js'\nimport type {\n  BeforeOperationHook,\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { APIError } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { deleteUserPreferences } from '../../preferences/deleteUserPreferences.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { deleteCollectionVersions } from '../../versions/deleteCollectionVersions.js'\nimport { deleteScheduledPublishJobs } from '../../versions/deleteScheduledPublishJobs.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  disableTransaction?: boolean\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  where: Where\n}\n\nexport const deleteOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<BulkOperationResult<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'delete',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      collection: { config: collectionConfig },\n      depth,\n      overrideAccess,\n      overrideLock,\n      populate,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n      where,\n    } = args\n\n    if (!where) {\n      throw new APIError(\"Missing 'where' query of documents to delete.\", httpStatus.BAD_REQUEST)\n    }\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, collectionConfig.access.delete)\n    }\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const select = sanitizeSelect({\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Retrieve documents\n    // /////////////////////////////////////\n\n    const { docs } = await payload.db.find<DataFromCollectionSlug<TSlug>>({\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      select,\n      where: fullWhere,\n    })\n\n    const errors = []\n\n    const promises = docs.map(async (doc) => {\n      let result\n\n      const { id } = doc\n\n      try {\n        // /////////////////////////////////////\n        // Handle potentially locked documents\n        // /////////////////////////////////////\n\n        await checkDocumentLockStatus({\n          id,\n          collectionSlug: collectionConfig.slug,\n          lockErrorMessage: `Document with ID ${id} is currently locked and cannot be deleted.`,\n          overrideLock,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // beforeDelete - Collection\n        // /////////////////////////////////////\n\n        if (collectionConfig.hooks?.beforeDelete?.length) {\n          for (const hook of collectionConfig.hooks.beforeDelete) {\n            await hook({\n              id,\n              collection: collectionConfig,\n              context: req.context,\n              req,\n            })\n          }\n        }\n\n        await deleteAssociatedFiles({\n          collectionConfig,\n          config,\n          doc,\n          overrideDelete: true,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // Delete versions\n        // /////////////////////////////////////\n\n        if (collectionConfig.versions) {\n          await deleteCollectionVersions({\n            id,\n            slug: collectionConfig.slug,\n            payload,\n            req,\n          })\n        }\n\n        // /////////////////////////////////////\n        // Delete scheduled posts\n        // /////////////////////////////////////\n        if (collectionConfig.versions?.drafts && collectionConfig.versions.drafts.schedulePublish) {\n          await deleteScheduledPublishJobs({\n            id,\n            slug: collectionConfig.slug,\n            payload,\n            req,\n          })\n        }\n\n        // /////////////////////////////////////\n        // Delete document\n        // /////////////////////////////////////\n\n        await payload.db.deleteOne({\n          collection: collectionConfig.slug,\n          req,\n          returning: false,\n          where: {\n            id: {\n              equals: id,\n            },\n          },\n        })\n\n        // /////////////////////////////////////\n        // afterRead - Fields\n        // /////////////////////////////////////\n\n        result = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth,\n          doc: result || doc,\n          draft: undefined,\n          fallbackLocale,\n          global: null,\n          locale,\n          overrideAccess,\n          populate,\n          req,\n          select,\n          showHiddenFields,\n        })\n\n        // /////////////////////////////////////\n        // afterRead - Collection\n        // /////////////////////////////////////\n\n        if (collectionConfig.hooks?.afterRead?.length) {\n          for (const hook of collectionConfig.hooks.afterRead) {\n            result =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: result || doc,\n                req,\n              })) || result\n          }\n        }\n\n        // /////////////////////////////////////\n        // afterDelete - Collection\n        // /////////////////////////////////////\n\n        if (collectionConfig.hooks?.afterDelete?.length) {\n          for (const hook of collectionConfig.hooks.afterDelete) {\n            result =\n              (await hook({\n                id,\n                collection: collectionConfig,\n                context: req.context,\n                doc: result,\n                req,\n              })) || result\n          }\n        }\n\n        // /////////////////////////////////////\n        // 8. Return results\n        // /////////////////////////////////////\n\n        return result\n      } catch (error) {\n        errors.push({\n          id: doc.id,\n          message: error.message,\n        })\n      }\n      return null\n    })\n\n    const awaitedDocs = await Promise.all(promises)\n\n    // /////////////////////////////////////\n    // Delete Preferences\n    // /////////////////////////////////////\n\n    await deleteUserPreferences({\n      collectionConfig,\n      ids: docs.map(({ id }) => id),\n      payload,\n      req,\n    })\n\n    let result = {\n      docs: awaitedDocs.filter(Boolean),\n      errors,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'delete',\n      result,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["status","httpStatus","executeAccess","combineQueries","validateQueryPaths","APIError","afterRead","deleteUserPreferences","deleteAssociatedFiles","checkDocumentLockStatus","commitTransaction","initTransaction","killTransaction","sanitizeSelect","deleteCollectionVersions","deleteScheduledPublishJobs","buildAfterOperation","deleteOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","length","hook","context","operation","collectionConfig","depth","overrideAccess","overrideLock","populate","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","where","BAD_REQUEST","accessResult","access","delete","fullWhere","forceSelect","docs","db","find","slug","errors","promises","map","doc","result","id","collectionSlug","lockErrorMessage","beforeDelete","overrideDelete","versions","drafts","schedulePublish","deleteOne","returning","equals","draft","undefined","global","afterDelete","error","push","message","awaitedDocs","Promise","all","ids","filter","Boolean"],"mappings":"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"}