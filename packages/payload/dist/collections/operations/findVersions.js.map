{"version":3,"sources":["../../../src/collections/operations/findVersions.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Sort, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nexport const findVersionsOperation = async <TData extends TypeWithVersion<TData>>(\n  args: Arguments,\n): Promise<PaginatedDocs<TData>> => {\n  const {\n    collection: { config: collectionConfig },\n    depth,\n    limit,\n    overrideAccess,\n    page,\n    pagination = true,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResults\n\n    if (!overrideAccess) {\n      accessResults = await executeAccess({ req }, collectionConfig.access.readVersions)\n    }\n\n    const versionFields = buildVersionCollectionFields(payload.config, collectionConfig, true)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResults)\n\n    const select = sanitizeSelect({\n      forceSelect: getQueryDraftsSelect({ select: collectionConfig.forceSelect }),\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: limit ?? 10,\n      locale,\n      page: page || 1,\n      pagination,\n      req,\n      select,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n    const result: PaginatedDocs<TData> = paginatedDocs as unknown as PaginatedDocs<TData>\n    result.docs = (await Promise.all(\n      paginatedDocs.docs.map(async (doc) => {\n        const docRef = doc\n        // Fallback if not selected\n        if (!docRef.version) {\n          ;(docRef as any).version = {}\n        }\n\n        if (collectionConfig.hooks?.beforeRead?.length) {\n          for (const hook of collectionConfig.hooks.beforeRead) {\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef.version,\n                query: fullWhere,\n                req,\n              })) || docRef.version\n          }\n        }\n\n        return docRef\n      }),\n    )) as TData[]\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.docs = await Promise.all(\n      result.docs.map(async (data) => {\n        data.version = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth,\n          doc: data.version,\n          draft: undefined,\n          fallbackLocale,\n          findMany: true,\n          global: null,\n          locale,\n          overrideAccess,\n          populate,\n          req,\n          select: typeof select?.version === 'object' ? select.version : undefined,\n          showHiddenFields,\n        })\n        return data\n      }),\n    )\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks.afterRead?.length) {\n      result.docs = await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          for (const hook of collectionConfig.hooks.afterRead) {\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }\n\n          return docRef\n        }),\n      )\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n    result.docs = result.docs.map((doc) => sanitizeInternalFields<TData>(doc))\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","afterRead","killTransaction","sanitizeInternalFields","sanitizeSelect","buildVersionCollectionFields","getQueryDraftsSelect","findVersionsOperation","args","collection","config","collectionConfig","depth","limit","overrideAccess","page","pagination","populate","req","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","sort","where","accessResults","access","readVersions","versionFields","fullWhere","forceSelect","paginatedDocs","db","findVersions","slug","result","docs","Promise","all","map","doc","docRef","version","hooks","beforeRead","length","hook","context","query","data","draft","undefined","findMany","global","error"],"mappings":"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"}