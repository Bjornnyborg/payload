{"version":3,"sources":["../../../src/collections/config/reservedFieldNames.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { Field } from '../../fields/config/types.js'\nimport type { CollectionConfig } from '../../index.js'\n\nimport { ReservedFieldName } from '../../errors/ReservedFieldName.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\n\n// Note for future reference: We've slimmed down the reserved field names but left them in here for reference in case it's needed in the future.\n\n/**\n * Reserved field names for collections with auth config enabled\n */\nconst reservedBaseAuthFieldNames = [\n  /* 'email',\n  'resetPasswordToken',\n  'resetPasswordExpiration', */\n  'salt',\n  'hash',\n]\n/**\n * Reserved field names for auth collections with verify: true\n */\nconst reservedVerifyFieldNames = [\n  /* '_verified', '_verificationToken' */\n]\n/**\n * Reserved field names for auth collections with useApiKey: true\n */\nconst reservedAPIKeyFieldNames = [\n  /* 'enableAPIKey', 'apiKeyIndex', 'apiKey' */\n]\n\n/**\n * Reserved field names for collections with upload config enabled\n */\nconst reservedBaseUploadFieldNames = [\n  'file',\n  /* 'mimeType',\n  'thumbnailURL',\n  'width',\n  'height',\n  'filesize',\n  'filename',\n  'url',\n  'focalX',\n  'focalY',\n  'sizes', */\n]\n\n/**\n * Reserved field names for collections with versions enabled\n */\nconst reservedVersionsFieldNames = [\n  /* '__v', '_status' */\n]\n\n/**\n * Sanitize fields for collections with auth config enabled.\n *\n * Should run on top level fields only.\n */\nexport const sanitizeAuthFields = (fields: Field[], config: CollectionConfig) => {\n  for (let i = 0; i < fields.length; i++) {\n    const field = fields[i]\n\n    if (fieldAffectsData(field) && field.name) {\n      if (config.auth && typeof config.auth === 'object' && !config.auth.disableLocalStrategy) {\n        const auth = config.auth\n\n        if (reservedBaseAuthFieldNames.includes(field.name)) {\n          throw new ReservedFieldName(field, field.name)\n        }\n\n        if (auth.verify) {\n          if (reservedAPIKeyFieldNames.includes(field.name)) {\n            throw new ReservedFieldName(field, field.name)\n          }\n        }\n\n        /* if (auth.maxLoginAttempts) {\n          if (field.name === 'loginAttempts' || field.name === 'lockUntil') {\n            throw new ReservedFieldName(field, field.name)\n          }\n        } */\n\n        /* if (auth.loginWithUsername) {\n          if (field.name === 'username') {\n            throw new ReservedFieldName(field, field.name)\n          }\n        } */\n\n        if (auth.verify) {\n          if (reservedVerifyFieldNames.includes(field.name)) {\n            throw new ReservedFieldName(field, field.name)\n          }\n        }\n      }\n    }\n\n    // Handle tabs without a name\n    if (field.type === 'tabs') {\n      for (let j = 0; j < field.tabs.length; j++) {\n        const tab = field.tabs[j]\n\n        if (!('name' in tab)) {\n          sanitizeAuthFields(tab.fields, config)\n        }\n      }\n    }\n\n    // Handle presentational fields like rows and collapsibles\n    if (!fieldAffectsData(field) && 'fields' in field && field.fields) {\n      sanitizeAuthFields(field.fields, config)\n    }\n  }\n}\n\n/**\n * Sanitize fields for collections with upload config enabled.\n *\n * Should run on top level fields only.\n */\nexport const sanitizeUploadFields = (fields: Field[], config: CollectionConfig) => {\n  if (config.upload && typeof config.upload === 'object') {\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i]\n\n      if (fieldAffectsData(field) && field.name) {\n        if (reservedBaseUploadFieldNames.includes(field.name)) {\n          throw new ReservedFieldName(field, field.name)\n        }\n      }\n\n      // Handle tabs without a name\n      if (field.type === 'tabs') {\n        for (let j = 0; j < field.tabs.length; j++) {\n          const tab = field.tabs[j]\n\n          if (!('name' in tab)) {\n            sanitizeUploadFields(tab.fields, config)\n          }\n        }\n      }\n\n      // Handle presentational fields like rows and collapsibles\n      if (!fieldAffectsData(field) && 'fields' in field && field.fields) {\n        sanitizeUploadFields(field.fields, config)\n      }\n    }\n  }\n}\n"],"names":["ReservedFieldName","fieldAffectsData","reservedBaseAuthFieldNames","reservedVerifyFieldNames","reservedAPIKeyFieldNames","reservedBaseUploadFieldNames","reservedVersionsFieldNames","sanitizeAuthFields","fields","config","i","length","field","name","auth","disableLocalStrategy","includes","verify","type","j","tabs","tab","sanitizeUploadFields","upload"],"mappings":"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"}