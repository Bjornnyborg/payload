{"version":3,"file":"convertLexicalToPlaintext.spec.js","names":["convertLexicalToPlaintext","textNode","text","bold","type","detail","format","mode","style","version","linebreakNode","tabNode","paragraphNode","children","direction","indent","textFormat","rootNode","nodes","root","describe","it","data","plaintext","console","log","expect","toBe"],"sources":["../../../../src/features/converters/lexicalToPlaintext/convertLexicalToPlaintext.spec.ts"],"sourcesContent":["import type {\n  DefaultNodeTypes,\n  DefaultTypedEditorState,\n  SerializedTabNode,\n  SerializedParagraphNode,\n  SerializedTextNode,\n  SerializedLineBreakNode,\n} from '../../../nodeTypes.js'\nimport { convertLexicalToPlaintext } from './sync/index.js'\n\nfunction textNode(text: string, bold?: boolean): SerializedTextNode {\n  return {\n    type: 'text',\n    detail: 0,\n    format: bold ? 1 : 0,\n    mode: 'normal',\n    style: '',\n    text,\n    version: 1,\n  }\n}\n\nfunction linebreakNode(): SerializedLineBreakNode {\n  return {\n    type: 'linebreak',\n    version: 1,\n  }\n}\n\nfunction tabNode(): SerializedTabNode {\n  return {\n    type: 'tab',\n    detail: 0,\n    format: 0,\n    mode: 'normal',\n    style: '',\n    text: '',\n    version: 1,\n  }\n}\n\nfunction paragraphNode(children: DefaultNodeTypes[]): SerializedParagraphNode {\n  return {\n    type: 'paragraph',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    textFormat: 0,\n    version: 1,\n  }\n}\n\nfunction rootNode(nodes: DefaultNodeTypes[]): DefaultTypedEditorState {\n  return {\n    root: {\n      type: 'root',\n      children: nodes,\n      direction: 'ltr',\n      format: '',\n      indent: 0,\n      version: 1,\n    },\n  }\n}\n\ndescribe('convertLexicalToPlaintext', () => {\n  it('ensure paragraph with text is correctly converted', () => {\n    const data: DefaultTypedEditorState = rootNode([paragraphNode([textNode('Basic Text')])])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    console.log('plaintext', plaintext)\n    expect(plaintext).toBe('Basic Text')\n  })\n\n  it('ensure paragraph with multiple text nodes is correctly converted', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic Text'), textNode(' Bold', true), textNode(' Text')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text Bold Text')\n  })\n\n  it('ensure linebreaks are converted correctly', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic Text'), linebreakNode(), textNode('Next Line')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text\\nNext Line')\n  })\n\n  it('ensure tabs are converted correctly', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic Text'), tabNode(), textNode('Next Line')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text\\tNext Line')\n  })\n})\n"],"mappings":"AAQA,SAASA,yBAAyB,QAAQ;AAE1C,SAASC,SAASC,IAAY,EAAEC,IAAc;EAC5C,OAAO;IACLC,IAAA,EAAM;IACNC,MAAA,EAAQ;IACRC,MAAA,EAAQH,IAAA,GAAO,IAAI;IACnBI,IAAA,EAAM;IACNC,KAAA,EAAO;IACPN,IAAA;IACAO,OAAA,EAAS;EACX;AACF;AAEA,SAASC,cAAA;EACP,OAAO;IACLN,IAAA,EAAM;IACNK,OAAA,EAAS;EACX;AACF;AAEA,SAASE,QAAA;EACP,OAAO;IACLP,IAAA,EAAM;IACNC,MAAA,EAAQ;IACRC,MAAA,EAAQ;IACRC,IAAA,EAAM;IACNC,KAAA,EAAO;IACPN,IAAA,EAAM;IACNO,OAAA,EAAS;EACX;AACF;AAEA,SAASG,cAAcC,QAA4B;EACjD,OAAO;IACLT,IAAA,EAAM;IACNS,QAAA;IACAC,SAAA,EAAW;IACXR,MAAA,EAAQ;IACRS,MAAA,EAAQ;IACRC,UAAA,EAAY;IACZP,OAAA,EAAS;EACX;AACF;AAEA,SAASQ,SAASC,KAAyB;EACzC,OAAO;IACLC,IAAA,EAAM;MACJf,IAAA,EAAM;MACNS,QAAA,EAAUK,KAAA;MACVJ,SAAA,EAAW;MACXR,MAAA,EAAQ;MACRS,MAAA,EAAQ;MACRN,OAAA,EAAS;IACX;EACF;AACF;AAEAW,QAAA,CAAS,6BAA6B;EACpCC,EAAA,CAAG,qDAAqD;IACtD,MAAMC,IAAA,GAAgCL,QAAA,CAAS,CAACL,aAAA,CAAc,CAACX,QAAA,CAAS,cAAc,EAAE;IAExF,MAAMsB,SAAA,GAAYvB,yBAAA,CAA0B;MAC1CsB;IACF;IAEAE,OAAA,CAAQC,GAAG,CAAC,aAAaF,SAAA;IACzBG,MAAA,CAAOH,SAAA,EAAWI,IAAI,CAAC;EACzB;EAEAN,EAAA,CAAG,oEAAoE;IACrE,MAAMC,IAAA,GAAgCL,QAAA,CAAS,CAC7CL,aAAA,CAAc,CAACX,QAAA,CAAS,eAAeA,QAAA,CAAS,SAAS,OAAOA,QAAA,CAAS,SAAS,EACnF;IAED,MAAMsB,SAAA,GAAYvB,yBAAA,CAA0B;MAC1CsB;IACF;IAEAI,MAAA,CAAOH,SAAA,EAAWI,IAAI,CAAC;EACzB;EAEAN,EAAA,CAAG,6CAA6C;IAC9C,MAAMC,IAAA,GAAgCL,QAAA,CAAS,CAC7CL,aAAA,CAAc,CAACX,QAAA,CAAS,eAAeS,aAAA,IAAiBT,QAAA,CAAS,aAAa,EAC/E;IAED,MAAMsB,SAAA,GAAYvB,yBAAA,CAA0B;MAC1CsB;IACF;IAEAI,MAAA,CAAOH,SAAA,EAAWI,IAAI,CAAC;EACzB;EAEAN,EAAA,CAAG,uCAAuC;IACxC,MAAMC,IAAA,GAAgCL,QAAA,CAAS,CAC7CL,aAAA,CAAc,CAACX,QAAA,CAAS,eAAeU,OAAA,IAAWV,QAAA,CAAS,aAAa,EACzE;IAED,MAAMsB,SAAA,GAAYvB,yBAAA,CAA0B;MAC1CsB;IACF;IAEAI,MAAA,CAAOH,SAAA,EAAWI,IAAI,CAAC;EACzB;AACF","ignoreList":[]}