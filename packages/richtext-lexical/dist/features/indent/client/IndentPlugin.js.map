{"version":3,"file":"IndentPlugin.js","names":["useLexicalComposerContext","TabIndentationPlugin","$findMatchingParent","mergeRegister","$getSelection","$isElementNode","$isRangeSelection","COMMAND_PRIORITY_LOW","INDENT_CONTENT_COMMAND","KEY_TAB_COMMAND","OUTDENT_CONTENT_COMMAND","TabNode","useEffect","IndentPlugin","clientProps","editor","disabledNodes","disableTabNode","length","registerCommand","$handleIndentAndOutdent","block","includes","getType","indent","getIndent","setIndent","event","preventDefault","dispatchCommand","shiftKey","undefined","registerNodeTransform","node","remove","_jsx","indentOrOutdent","selection","alreadyHandled","Set","nodes","getNodes","i","key","getKey","has","parentBlock","parentNode","isInline","parentKey","canIndent","add","size"],"sources":["../../../../src/features/indent/client/IndentPlugin.tsx"],"sourcesContent":["import type { ElementNode } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { TabIndentationPlugin } from '@lexical/react/LexicalTabIndentationPlugin'\nimport { $findMatchingParent, mergeRegister } from '@lexical/utils'\nimport {\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  COMMAND_PRIORITY_LOW,\n  INDENT_CONTENT_COMMAND,\n  KEY_TAB_COMMAND,\n  OUTDENT_CONTENT_COMMAND,\n  TabNode,\n} from 'lexical'\nimport { useEffect } from 'react'\n\nimport type { PluginComponent } from '../../typesClient.js'\nimport type { IndentFeatureProps } from '../server/index.js'\n\nexport const IndentPlugin: PluginComponent<IndentFeatureProps> = ({ clientProps }) => {\n  const [editor] = useLexicalComposerContext()\n  const { disabledNodes, disableTabNode } = clientProps\n\n  useEffect(() => {\n    if (!editor || !disabledNodes?.length) {\n      return\n    }\n    return editor.registerCommand(\n      INDENT_CONTENT_COMMAND,\n      () => {\n        return $handleIndentAndOutdent((block) => {\n          if (!disabledNodes.includes(block.getType())) {\n            const indent = block.getIndent()\n            block.setIndent(indent + 1)\n          }\n        })\n      },\n      COMMAND_PRIORITY_LOW,\n    )\n  }, [editor, disabledNodes])\n\n  useEffect(() => {\n    if (!editor || !disableTabNode) {\n      return\n    }\n    return mergeRegister(\n      // This is so that when you press Tab in the middle of a paragraph,\n      // it indents the paragraph, instead of inserting a TabNode.\n      editor.registerCommand<KeyboardEvent>(\n        KEY_TAB_COMMAND,\n        (event) => {\n          event.preventDefault()\n          return editor.dispatchCommand(\n            event.shiftKey ? OUTDENT_CONTENT_COMMAND : INDENT_CONTENT_COMMAND,\n            undefined,\n          )\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      // Tab isn't the only way to insert a TabNode. We have to make sure\n      // it doesn't happen, for example, when pasting from the clipboard.\n      editor.registerNodeTransform(TabNode, (node) => {\n        node.remove()\n      }),\n    )\n  }, [editor, disableTabNode])\n\n  return <TabIndentationPlugin />\n}\n\nfunction $handleIndentAndOutdent(indentOrOutdent: (block: ElementNode) => void): boolean {\n  const selection = $getSelection()\n  if (!$isRangeSelection(selection)) {\n    return false\n  }\n  const alreadyHandled = new Set()\n  const nodes = selection.getNodes()\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i]!\n    const key = node.getKey()\n    if (alreadyHandled.has(key)) {\n      continue\n    }\n    const parentBlock = $findMatchingParent(\n      node,\n      (parentNode): parentNode is ElementNode =>\n        $isElementNode(parentNode) && !parentNode.isInline(),\n    )\n    if (parentBlock === null) {\n      continue\n    }\n    const parentKey = parentBlock.getKey()\n    if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey)\n      indentOrOutdent(parentBlock)\n    }\n  }\n  return alreadyHandled.size > 0\n}\n"],"mappings":";AAEA,SAASA,yBAAyB,QAAQ;AAC1C,SAASC,oBAAoB,QAAQ;AACrC,SAASC,mBAAmB,EAAEC,aAAa,QAAQ;AACnD,SACEC,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjBC,oBAAoB,EACpBC,sBAAsB,EACtBC,eAAe,EACfC,uBAAuB,EACvBC,OAAO,QACF;AACP,SAASC,SAAS,QAAQ;AAK1B,OAAO,MAAMC,YAAA,GAAoDA,CAAC;EAAEC;AAAW,CAAE;EAC/E,MAAM,CAACC,MAAA,CAAO,GAAGf,yBAAA;EACjB,MAAM;IAAEgB,aAAa;IAAEC;EAAc,CAAE,GAAGH,WAAA;EAE1CF,SAAA,CAAU;IACR,IAAI,CAACG,MAAA,IAAU,CAACC,aAAA,EAAeE,MAAA,EAAQ;MACrC;IACF;IACA,OAAOH,MAAA,CAAOI,eAAe,CAC3BX,sBAAA,EACA;MACE,OAAOY,uBAAA,CAAyBC,KAAA;QAC9B,IAAI,CAACL,aAAA,CAAcM,QAAQ,CAACD,KAAA,CAAME,OAAO,KAAK;UAC5C,MAAMC,MAAA,GAASH,KAAA,CAAMI,SAAS;UAC9BJ,KAAA,CAAMK,SAAS,CAACF,MAAA,GAAS;QAC3B;MACF;IACF,GACAjB,oBAAA;EAEJ,GAAG,CAACQ,MAAA,EAAQC,aAAA,CAAc;EAE1BJ,SAAA,CAAU;IACR,IAAI,CAACG,MAAA,IAAU,CAACE,cAAA,EAAgB;MAC9B;IACF;IACA,OAAOd,aAAA;IACL;IACA;IACAY,MAAA,CAAOI,eAAe,CACpBV,eAAA,EACCkB,KAAA;MACCA,KAAA,CAAMC,cAAc;MACpB,OAAOb,MAAA,CAAOc,eAAe,CAC3BF,KAAA,CAAMG,QAAQ,GAAGpB,uBAAA,GAA0BF,sBAAA,EAC3CuB,SAAA;IAEJ,GACAxB,oBAAA;IAEF;IACA;IACAQ,MAAA,CAAOiB,qBAAqB,CAACrB,OAAA,EAAUsB,IAAA;MACrCA,IAAA,CAAKC,MAAM;IACb;EAEJ,GAAG,CAACnB,MAAA,EAAQE,cAAA,CAAe;EAE3B,oBAAOkB,IAAA,CAAClC,oBAAA;AACV;AAEA,SAASmB,wBAAwBgB,eAA6C;EAC5E,MAAMC,SAAA,GAAYjC,aAAA;EAClB,IAAI,CAACE,iBAAA,CAAkB+B,SAAA,GAAY;IACjC,OAAO;EACT;EACA,MAAMC,cAAA,GAAiB,IAAIC,GAAA;EAC3B,MAAMC,KAAA,GAAQH,SAAA,CAAUI,QAAQ;EAChC,KAAK,IAAIC,CAAA,GAAI,GAAGA,CAAA,GAAIF,KAAA,CAAMtB,MAAM,EAAEwB,CAAA,IAAK;IACrC,MAAMT,IAAA,GAAOO,KAAK,CAACE,CAAA,CAAE;IACrB,MAAMC,GAAA,GAAMV,IAAA,CAAKW,MAAM;IACvB,IAAIN,cAAA,CAAeO,GAAG,CAACF,GAAA,GAAM;MAC3B;IACF;IACA,MAAMG,WAAA,GAAc5C,mBAAA,CAClB+B,IAAA,EACCc,UAAA,IACC1C,cAAA,CAAe0C,UAAA,KAAe,CAACA,UAAA,CAAWC,QAAQ;IAEtD,IAAIF,WAAA,KAAgB,MAAM;MACxB;IACF;IACA,MAAMG,SAAA,GAAYH,WAAA,CAAYF,MAAM;IACpC,IAAIE,WAAA,CAAYI,SAAS,MAAM,CAACZ,cAAA,CAAeO,GAAG,CAACI,SAAA,GAAY;MAC7DX,cAAA,CAAea,GAAG,CAACF,SAAA;MACnBb,eAAA,CAAgBU,WAAA;IAClB;EACF;EACA,OAAOR,cAAA,CAAec,IAAI,GAAG;AAC/B","ignoreList":[]}