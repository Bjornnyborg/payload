{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  ClientField,\n  Field,\n  PayloadComponent,\n  RichTextFieldClientProps,\n  SanitizedConfig,\n} from 'payload'\nimport type { Editor } from 'slate'\n\nexport type TextNode = { [x: string]: unknown; text: string }\n\nexport type ElementNode = { children: (ElementNode | TextNode)[]; type?: string }\n\nexport function nodeIsTextNode(node: ElementNode | TextNode): node is TextNode {\n  return 'text' in node\n}\n\nexport type RichTextPluginComponent = PayloadComponent\nexport type RichTextPlugin = (editor: Editor) => Editor\n\nexport type RichTextCustomElement = {\n  Button?: PayloadComponent\n  Element: PayloadComponent\n  name: string\n  plugins?: RichTextPluginComponent[]\n}\n\nexport type RichTextCustomLeaf = {\n  Button: PayloadComponent\n  Leaf: PayloadComponent\n  name: string\n  plugins?: RichTextPluginComponent[]\n}\n\nexport type RichTextElement =\n  | 'blockquote'\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'indent'\n  | 'link'\n  | 'ol'\n  | 'relationship'\n  | 'textAlign'\n  | 'ul'\n  | 'upload'\n  | RichTextCustomElement\nexport type RichTextLeaf =\n  | 'bold'\n  | 'code'\n  | 'italic'\n  | 'strikethrough'\n  | 'underline'\n  | RichTextCustomLeaf\n\nexport type AdapterArguments = {\n  admin?: {\n    elements?: RichTextElement[]\n    hideGutter?: boolean\n    leaves?: RichTextLeaf[]\n    link?: {\n      fields?: ((args: { config: SanitizedConfig; defaultFields: Field[] }) => Field[]) | Field[]\n    }\n    placeholder?: Record<string, string> | string\n    rtl?: boolean\n    upload?: {\n      collections: {\n        [collection: string]: {\n          fields: Field[]\n        }\n      }\n    }\n  }\n}\n\nexport type SlateFieldProps = {\n  componentMap: {\n    [x: string]: ClientField[] | React.ReactNode\n  }\n} & RichTextFieldClientProps<any[], AdapterArguments, AdapterArguments>\n"],"names":["nodeIsTextNode","node"],"mappings":"AAaA,OAAO,SAASA,eAAeC,IAA4B;IACzD,OAAO,UAAUA;AACnB"}