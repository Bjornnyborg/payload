{"version":3,"sources":["../../src/field/rscEntry.tsx"],"sourcesContent":["import type {\n  ClientComponentProps,\n  ClientField,\n  Field,\n  FieldPaths,\n  RichTextFieldClient,\n  ServerComponentProps,\n} from 'payload'\n\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { createClientFields } from 'payload'\nimport React from 'react'\n\nimport type { AdapterArguments, RichTextCustomElement, RichTextCustomLeaf } from '../types.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { RichTextField } from '../exports/client/index.js'\nimport { elements as elementTypes } from '../field/elements/index.js'\nimport { defaultLeaves as leafTypes } from '../field/leaves/index.js'\nimport { linkFieldsSchemaPath } from './elements/link/shared.js'\nimport { uploadFieldsSchemaPath } from './elements/upload/shared.js'\nexport const RscEntrySlateField: React.FC<\n  {\n    args: AdapterArguments\n  } & ClientComponentProps &\n    Pick<FieldPaths, 'path'> &\n    ServerComponentProps\n> = ({\n  args,\n  clientField,\n  forceRender,\n  i18n,\n  path,\n  payload,\n  readOnly,\n  renderedBlocks,\n  schemaPath,\n}) => {\n  const componentMap: Map<string, ClientField[] | React.ReactNode> = new Map()\n\n  const clientProps = {\n    schemaPath,\n  }\n\n  ;(args?.admin?.leaves || Object.values(leafTypes)).forEach((leaf) => {\n    let leafObject: RichTextCustomLeaf\n\n    if (typeof leaf === 'object' && leaf !== null) {\n      leafObject = leaf\n    } else if (typeof leaf === 'string' && leafTypes[leaf]) {\n      leafObject = leafTypes[leaf]\n    }\n\n    if (leafObject) {\n      const LeafButton = leafObject.Button\n      const LeafComponent = leafObject.Leaf\n\n      componentMap.set(\n        `leaf.button.${leafObject.name}`,\n        RenderServerComponent({\n          clientProps,\n          Component: LeafButton,\n          importMap: payload.importMap,\n        }),\n      )\n\n      componentMap.set(\n        `leaf.component.${leafObject.name}`,\n        RenderServerComponent({\n          clientProps,\n          Component: LeafComponent,\n          importMap: payload.importMap,\n        }),\n      )\n\n      if (Array.isArray(leafObject.plugins)) {\n        leafObject.plugins.forEach((Plugin, i) => {\n          componentMap.set(\n            `leaf.plugin.${leafObject.name}.${i}`,\n            RenderServerComponent({\n              clientProps,\n              Component: Plugin,\n              importMap: payload.importMap,\n            }),\n          )\n        })\n      }\n    }\n  })\n  ;(args?.admin?.elements || Object.values(elementTypes)).forEach((el) => {\n    let element: RichTextCustomElement\n\n    if (typeof el === 'object' && el !== null) {\n      element = el\n    } else if (typeof el === 'string' && elementTypes[el]) {\n      element = elementTypes[el]\n    }\n\n    if (element) {\n      const ElementButton = element.Button\n      const ElementComponent = element.Element\n\n      if (ElementButton) {\n        componentMap.set(\n          `element.button.${element.name}`,\n          RenderServerComponent({\n            clientProps,\n            Component: ElementButton,\n            importMap: payload.importMap,\n          }),\n        )\n      }\n      componentMap.set(\n        `element.component.${element.name}`,\n        RenderServerComponent({\n          clientProps,\n          Component: ElementComponent,\n          importMap: payload.importMap,\n        }),\n      )\n\n      if (Array.isArray(element.plugins)) {\n        element.plugins.forEach((Plugin, i) => {\n          componentMap.set(\n            `element.plugin.${element.name}.${i}`,\n            RenderServerComponent({\n              clientProps,\n              Component: Plugin,\n              importMap: payload.importMap,\n            }),\n          )\n        })\n      }\n\n      switch (element.name) {\n        case 'link': {\n          const clientFields = createClientFields({\n            defaultIDType: payload.config.db.defaultIDType,\n            fields: args.admin?.link?.fields as Field[],\n            i18n,\n            importMap: payload.importMap,\n          })\n\n          componentMap.set(linkFieldsSchemaPath, clientFields)\n\n          break\n        }\n\n        case 'relationship':\n          break\n\n        case 'upload': {\n          const uploadEnabledCollections = payload.config.collections.filter(\n            ({ admin: { enableRichTextRelationship, hidden }, upload }) => {\n              if (hidden === true) {\n                return false\n              }\n\n              return enableRichTextRelationship && Boolean(upload) === true\n            },\n          )\n\n          uploadEnabledCollections.forEach((collection) => {\n            if (args?.admin?.upload?.collections[collection.slug]?.fields) {\n              const clientFields = createClientFields({\n                defaultIDType: payload.config.db.defaultIDType,\n                fields: args?.admin?.upload?.collections[collection.slug]?.fields,\n                i18n,\n                importMap: payload.importMap,\n              })\n\n              componentMap.set(`${uploadFieldsSchemaPath}.${collection.slug}`, clientFields)\n            }\n          })\n\n          break\n        }\n      }\n    }\n  })\n\n  return (\n    <RichTextField\n      componentMap={Object.fromEntries(componentMap)}\n      field={clientField as RichTextFieldClient}\n      forceRender={forceRender}\n      path={path}\n      readOnly={readOnly}\n      renderedBlocks={renderedBlocks}\n      schemaPath={schemaPath}\n    />\n  )\n}\n"],"names":["RenderServerComponent","createClientFields","React","RichTextField","elements","elementTypes","defaultLeaves","leafTypes","linkFieldsSchemaPath","uploadFieldsSchemaPath","RscEntrySlateField","args","clientField","forceRender","i18n","path","payload","readOnly","renderedBlocks","schemaPath","componentMap","Map","clientProps","admin","leaves","Object","values","forEach","leaf","leafObject","LeafButton","Button","LeafComponent","Leaf","set","name","Component","importMap","Array","isArray","plugins","Plugin","i","el","element","ElementButton","ElementComponent","Element","clientFields","defaultIDType","config","db","fields","link","uploadEnabledCollections","collections","filter","enableRichTextRelationship","hidden","upload","Boolean","collection","slug","fromEntries","field"],"mappings":";AASA,SAASA,qBAAqB,QAAQ,gDAA+C;AACrF,SAASC,kBAAkB,QAAQ,UAAS;AAC5C,OAAOC,WAAW,QAAO;AAIzB,+DAA+D;AAC/D,SAASC,aAAa,QAAQ,6BAA4B;AAC1D,SAASC,YAAYC,YAAY,QAAQ,6BAA4B;AACrE,SAASC,iBAAiBC,SAAS,QAAQ,2BAA0B;AACrE,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,sBAAsB,QAAQ,8BAA6B;AACpE,OAAO,MAAMC,qBAMT,CAAC,EACHC,IAAI,EACJC,WAAW,EACXC,WAAW,EACXC,IAAI,EACJC,IAAI,EACJC,OAAO,EACPC,QAAQ,EACRC,cAAc,EACdC,UAAU,EACX;IACC,MAAMC,eAA6D,IAAIC;IAEvE,MAAMC,cAAc;QAClBH;IACF;IAEER,CAAAA,MAAMY,OAAOC,UAAUC,OAAOC,MAAM,CAACnB,UAAS,EAAGoB,OAAO,CAAC,CAACC;QAC1D,IAAIC;QAEJ,IAAI,OAAOD,SAAS,YAAYA,SAAS,MAAM;YAC7CC,aAAaD;QACf,OAAO,IAAI,OAAOA,SAAS,YAAYrB,SAAS,CAACqB,KAAK,EAAE;YACtDC,aAAatB,SAAS,CAACqB,KAAK;QAC9B;QAEA,IAAIC,YAAY;YACd,MAAMC,aAAaD,WAAWE,MAAM;YACpC,MAAMC,gBAAgBH,WAAWI,IAAI;YAErCb,aAAac,GAAG,CACd,CAAC,YAAY,EAAEL,WAAWM,IAAI,EAAE,EAChCnC,sBAAsB;gBACpBsB;gBACAc,WAAWN;gBACXO,WAAWrB,QAAQqB,SAAS;YAC9B;YAGFjB,aAAac,GAAG,CACd,CAAC,eAAe,EAAEL,WAAWM,IAAI,EAAE,EACnCnC,sBAAsB;gBACpBsB;gBACAc,WAAWJ;gBACXK,WAAWrB,QAAQqB,SAAS;YAC9B;YAGF,IAAIC,MAAMC,OAAO,CAACV,WAAWW,OAAO,GAAG;gBACrCX,WAAWW,OAAO,CAACb,OAAO,CAAC,CAACc,QAAQC;oBAClCtB,aAAac,GAAG,CACd,CAAC,YAAY,EAAEL,WAAWM,IAAI,CAAC,CAAC,EAAEO,GAAG,EACrC1C,sBAAsB;wBACpBsB;wBACAc,WAAWK;wBACXJ,WAAWrB,QAAQqB,SAAS;oBAC9B;gBAEJ;YACF;QACF;IACF;IACE1B,CAAAA,MAAMY,OAAOnB,YAAYqB,OAAOC,MAAM,CAACrB,aAAY,EAAGsB,OAAO,CAAC,CAACgB;QAC/D,IAAIC;QAEJ,IAAI,OAAOD,OAAO,YAAYA,OAAO,MAAM;YACzCC,UAAUD;QACZ,OAAO,IAAI,OAAOA,OAAO,YAAYtC,YAAY,CAACsC,GAAG,EAAE;YACrDC,UAAUvC,YAAY,CAACsC,GAAG;QAC5B;QAEA,IAAIC,SAAS;YACX,MAAMC,gBAAgBD,QAAQb,MAAM;YACpC,MAAMe,mBAAmBF,QAAQG,OAAO;YAExC,IAAIF,eAAe;gBACjBzB,aAAac,GAAG,CACd,CAAC,eAAe,EAAEU,QAAQT,IAAI,EAAE,EAChCnC,sBAAsB;oBACpBsB;oBACAc,WAAWS;oBACXR,WAAWrB,QAAQqB,SAAS;gBAC9B;YAEJ;YACAjB,aAAac,GAAG,CACd,CAAC,kBAAkB,EAAEU,QAAQT,IAAI,EAAE,EACnCnC,sBAAsB;gBACpBsB;gBACAc,WAAWU;gBACXT,WAAWrB,QAAQqB,SAAS;YAC9B;YAGF,IAAIC,MAAMC,OAAO,CAACK,QAAQJ,OAAO,GAAG;gBAClCI,QAAQJ,OAAO,CAACb,OAAO,CAAC,CAACc,QAAQC;oBAC/BtB,aAAac,GAAG,CACd,CAAC,eAAe,EAAEU,QAAQT,IAAI,CAAC,CAAC,EAAEO,GAAG,EACrC1C,sBAAsB;wBACpBsB;wBACAc,WAAWK;wBACXJ,WAAWrB,QAAQqB,SAAS;oBAC9B;gBAEJ;YACF;YAEA,OAAQO,QAAQT,IAAI;gBAClB,KAAK;oBAAQ;wBACX,MAAMa,eAAe/C,mBAAmB;4BACtCgD,eAAejC,QAAQkC,MAAM,CAACC,EAAE,CAACF,aAAa;4BAC9CG,QAAQzC,KAAKY,KAAK,EAAE8B,MAAMD;4BAC1BtC;4BACAuB,WAAWrB,QAAQqB,SAAS;wBAC9B;wBAEAjB,aAAac,GAAG,CAAC1B,sBAAsBwC;wBAEvC;oBACF;gBAEA,KAAK;oBACH;gBAEF,KAAK;oBAAU;wBACb,MAAMM,2BAA2BtC,QAAQkC,MAAM,CAACK,WAAW,CAACC,MAAM,CAChE,CAAC,EAAEjC,OAAO,EAAEkC,0BAA0B,EAAEC,MAAM,EAAE,EAAEC,MAAM,EAAE;4BACxD,IAAID,WAAW,MAAM;gCACnB,OAAO;4BACT;4BAEA,OAAOD,8BAA8BG,QAAQD,YAAY;wBAC3D;wBAGFL,yBAAyB3B,OAAO,CAAC,CAACkC;4BAChC,IAAIlD,MAAMY,OAAOoC,QAAQJ,WAAW,CAACM,WAAWC,IAAI,CAAC,EAAEV,QAAQ;gCAC7D,MAAMJ,eAAe/C,mBAAmB;oCACtCgD,eAAejC,QAAQkC,MAAM,CAACC,EAAE,CAACF,aAAa;oCAC9CG,QAAQzC,MAAMY,OAAOoC,QAAQJ,WAAW,CAACM,WAAWC,IAAI,CAAC,EAAEV;oCAC3DtC;oCACAuB,WAAWrB,QAAQqB,SAAS;gCAC9B;gCAEAjB,aAAac,GAAG,CAAC,GAAGzB,uBAAuB,CAAC,EAAEoD,WAAWC,IAAI,EAAE,EAAEd;4BACnE;wBACF;wBAEA;oBACF;YACF;QACF;IACF;IAEA,qBACE,KAAC7C;QACCiB,cAAcK,OAAOsC,WAAW,CAAC3C;QACjC4C,OAAOpD;QACPC,aAAaA;QACbE,MAAMA;QACNE,UAAUA;QACVC,gBAAgBA;QAChBC,YAAYA;;AAGlB,EAAC"}