{"version":3,"sources":["../../../../../src/field/elements/link/Button/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FormState } from 'payload'\n\nimport {\n  useDocumentInfo,\n  useDrawerSlug,\n  useModal,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { reduceFieldsToValues } from 'payload/shared'\nimport React, { Fragment, useState } from 'react'\nimport { Editor, Range, Transforms } from 'slate'\nimport { ReactEditor, useSlate } from 'slate-react'\n\nimport { LinkIcon } from '../../../icons/Link/index.js'\nimport { useElementButton } from '../../../providers/ElementButtonProvider.js'\nimport { ElementButton } from '../../Button.js'\nimport { isElementActive } from '../../isActive.js'\nimport { LinkDrawer } from '../LinkDrawer/index.js'\nimport { linkFieldsSchemaPath } from '../shared.js'\nimport { unwrapLink } from '../utilities.js'\n\n/**\n * This function is called when a new link is created - not when an existing link is edited.\n */\nconst insertLink = (editor, fields) => {\n  const isCollapsed = editor.selection && Range.isCollapsed(editor.selection)\n  const data = reduceFieldsToValues(fields, true)\n\n  const newLink = {\n    type: 'link',\n    children: [],\n    doc: data.doc,\n    fields: data.fields, // Any custom user-added fields are part of data.fields\n    linkType: data.linkType,\n    newTab: data.newTab,\n    url: data.url,\n  }\n\n  if (isCollapsed || !editor.selection) {\n    // If selection anchor and focus are the same,\n    // Just inject a new node with children already set\n    Transforms.insertNodes(editor, {\n      ...newLink,\n      children: [{ text: String(data.text) }],\n    })\n  } else if (editor.selection) {\n    // Otherwise we need to wrap the selected node in a link,\n    // Delete its old text,\n    // Move the selection one position forward into the link,\n    // And insert the text back into the new link\n    Transforms.wrapNodes(editor, newLink, { split: true })\n    Transforms.delete(editor, { at: editor.selection.focus.path, unit: 'word' })\n    Transforms.move(editor, { distance: 1, unit: 'offset' })\n    Transforms.insertText(editor, String(data.text), { at: editor.selection.focus.path })\n  }\n\n  ReactEditor.focus(editor)\n}\n\nexport const LinkButton: React.FC<{\n  schemaPath: string\n}> = ({ schemaPath }) => {\n  const { fieldProps } = useElementButton()\n  const [initialState, setInitialState] = useState<FormState>({})\n\n  const { t } = useTranslation()\n  const editor = useSlate()\n  const { getFormState } = useServerFunctions()\n  const { collectionSlug, getDocPreferences, globalSlug } = useDocumentInfo()\n\n  const { closeModal, openModal } = useModal()\n  const drawerSlug = useDrawerSlug('rich-text-link')\n\n  const { componentMap } = fieldProps\n\n  const fields = componentMap[linkFieldsSchemaPath]\n\n  return (\n    <Fragment>\n      <ElementButton\n        className=\"link\"\n        format=\"link\"\n        onClick={async () => {\n          if (isElementActive(editor, 'link')) {\n            unwrapLink(editor)\n          } else {\n            openModal(drawerSlug)\n            const isCollapsed = editor.selection && Range.isCollapsed(editor.selection)\n\n            if (!isCollapsed) {\n              const data = {\n                text: editor.selection ? Editor.string(editor, editor.selection) : '',\n              }\n\n              const { state } = await getFormState({\n                collectionSlug,\n                data,\n                docPermissions: {\n                  fields: true,\n                },\n                docPreferences: await getDocPreferences(),\n                globalSlug,\n                operation: 'update',\n                renderAllFields: true,\n                schemaPath: [...schemaPath.split('.'), ...linkFieldsSchemaPath.split('.')].join(\n                  '.',\n                ),\n              })\n\n              setInitialState(state)\n            }\n          }\n        }}\n        tooltip={t('fields:addLink')}\n      >\n        <LinkIcon />\n      </ElementButton>\n      <LinkDrawer\n        drawerSlug={drawerSlug}\n        fields={Array.isArray(fields) ? fields : []}\n        handleClose={() => {\n          closeModal(drawerSlug)\n        }}\n        handleModalSubmit={(fields) => {\n          insertLink(editor, fields)\n          closeModal(drawerSlug)\n        }}\n        initialState={initialState}\n        schemaPath={schemaPath}\n      />\n    </Fragment>\n  )\n}\n"],"names":["useDocumentInfo","useDrawerSlug","useModal","useServerFunctions","useTranslation","reduceFieldsToValues","React","Fragment","useState","Editor","Range","Transforms","ReactEditor","useSlate","LinkIcon","useElementButton","ElementButton","isElementActive","LinkDrawer","linkFieldsSchemaPath","unwrapLink","insertLink","editor","fields","isCollapsed","selection","data","newLink","type","children","doc","linkType","newTab","url","insertNodes","text","String","wrapNodes","split","delete","at","focus","path","unit","move","distance","insertText","LinkButton","schemaPath","fieldProps","initialState","setInitialState","t","getFormState","collectionSlug","getDocPreferences","globalSlug","closeModal","openModal","drawerSlug","componentMap","className","format","onClick","string","state","docPermissions","docPreferences","operation","renderAllFields","join","tooltip","Array","isArray","handleClose","handleModalSubmit"],"mappings":"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"}