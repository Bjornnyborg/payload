{"version":3,"sources":["../../../../../src/field/elements/link/Element/index.tsx"],"sourcesContent":["'use client'\nimport type { FormState } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Button,\n  Popup,\n  Translation,\n  useConfig,\n  useDocumentInfo,\n  useDrawerSlug,\n  useLocale,\n  useModal,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { deepCopyObject, reduceFieldsToValues } from 'payload/shared'\nimport { useCallback, useEffect, useState } from 'react'\nimport { Editor, Node, Transforms } from 'slate'\nimport { ReactEditor, useSlate } from 'slate-react'\n\nimport type { LinkElementType } from '../types.js'\n\nimport { useElement } from '../../../providers/ElementProvider.js'\nimport { LinkDrawer } from '../LinkDrawer/index.js'\nimport { linkFieldsSchemaPath } from '../shared.js'\nimport { unwrapLink } from '../utilities.js'\nimport './index.scss'\n\nconst baseClass = 'rich-text-link'\n\n/**\n * This function is called when an existing link is edited.\n * When a link is first created, another function is called: {@link ../Button/index.tsx#insertLink}\n */\nconst insertChange = (editor, fields) => {\n  const data = reduceFieldsToValues(fields, true)\n\n  const [, parentPath] = Editor.above(editor)\n\n  const newNode: Record<string, unknown> = {\n    doc: data.doc,\n    linkType: data.linkType,\n    newTab: data.newTab,\n    url: data.url,\n  }\n\n  if (data.fields) {\n    newNode.fields = data.fields\n  }\n\n  Transforms.setNodes(editor, newNode, { at: parentPath })\n\n  Transforms.delete(editor, { at: editor.selection.focus.path, unit: 'block' })\n  Transforms.move(editor, { distance: 1, unit: 'offset' })\n  Transforms.insertText(editor, String(data.text), { at: editor.selection.focus.path })\n\n  ReactEditor.focus(editor)\n}\n\nexport const LinkElement = () => {\n  const { attributes, children, editorRef, element, fieldProps, schemaPath } =\n    useElement<LinkElementType>()\n\n  const fieldMapPath = `${schemaPath}.${linkFieldsSchemaPath}`\n\n  const { componentMap } = fieldProps\n  const fields = componentMap[linkFieldsSchemaPath]\n  const { id, collectionSlug, docPermissions, getDocPreferences, globalSlug } = useDocumentInfo()\n\n  const editor = useSlate()\n  const { config, getEntityConfig } = useConfig()\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n  const { closeModal, openModal, toggleModal } = useModal()\n  const [renderModal, setRenderModal] = useState(false)\n  const [renderPopup, setRenderPopup] = useState(false)\n  const [initialState, setInitialState] = useState<FormState>({})\n\n  const { getFormState } = useServerFunctions()\n\n  const drawerSlug = useDrawerSlug('rich-text-link')\n\n  const handleTogglePopup = useCallback((render) => {\n    if (!render) {\n      setRenderPopup(render)\n    }\n  }, [])\n\n  useEffect(() => {\n    const awaitInitialState = async () => {\n      const data = {\n        doc: element.doc,\n        fields: deepCopyObject(element.fields),\n        linkType: element.linkType,\n        newTab: element.newTab,\n        text: Node.string(element),\n        url: element.url,\n      }\n\n      const { state } = await getFormState({\n        collectionSlug,\n        data,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        globalSlug,\n        operation: 'update',\n        renderAllFields: true,\n        schemaPath: fieldMapPath ?? '',\n      })\n\n      setInitialState(state)\n    }\n\n    if (renderModal) {\n      void awaitInitialState()\n    }\n  }, [\n    renderModal,\n    element,\n    locale,\n    t,\n    collectionSlug,\n    config,\n    id,\n    fieldMapPath,\n    getFormState,\n    globalSlug,\n    getDocPreferences,\n    docPermissions,\n  ])\n\n  return (\n    <span className={baseClass} {...attributes}>\n      <span contentEditable={false} style={{ userSelect: 'none' }}>\n        {renderModal && (\n          <LinkDrawer\n            drawerSlug={drawerSlug}\n            fields={Array.isArray(fields) ? fields : []}\n            handleClose={() => {\n              toggleModal(drawerSlug)\n              setRenderModal(false)\n            }}\n            handleModalSubmit={(fields) => {\n              insertChange(editor, fields)\n              closeModal(drawerSlug)\n              setRenderModal(false)\n            }}\n            initialState={initialState}\n            schemaPath={schemaPath}\n          />\n        )}\n        <Popup\n          boundingRef={editorRef}\n          buttonType=\"none\"\n          forceOpen={renderPopup}\n          horizontalAlign=\"left\"\n          onToggleOpen={handleTogglePopup}\n          render={() => (\n            <div className={`${baseClass}__popup`}>\n              {element.linkType === 'internal' && element.doc?.relationTo && element.doc?.value && (\n                <Translation\n                  elements={{\n                    '0': ({ children }) => (\n                      <a\n                        className={`${baseClass}__link-label`}\n                        href={`${config.routes.admin}/collections/${element.doc.relationTo}/${element.doc.value}`}\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                        title={`${config.routes.admin}/collections/${element.doc.relationTo}/${element.doc.value}`}\n                      >\n                        {children}\n                      </a>\n                    ),\n                  }}\n                  i18nKey=\"fields:linkedTo\"\n                  t={t}\n                  variables={{\n                    label: getTranslation(\n                      getEntityConfig({ collectionSlug: element.doc.relationTo })?.labels?.singular,\n                      i18n,\n                    ),\n                  }}\n                />\n              )}\n              {(element.linkType === 'custom' || !element.linkType) && (\n                <a\n                  className={`${baseClass}__link-label`}\n                  href={element.url}\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  title={element.url}\n                >\n                  {element.url}\n                </a>\n              )}\n              <Button\n                buttonStyle=\"icon-label\"\n                className={`${baseClass}__link-edit`}\n                icon=\"edit\"\n                onClick={(e) => {\n                  e.preventDefault()\n                  setRenderPopup(false)\n                  openModal(drawerSlug)\n                  setRenderModal(true)\n                }}\n                round\n                tooltip={t('general:edit')}\n              />\n              <Button\n                buttonStyle=\"icon-label\"\n                className={`${baseClass}__link-close`}\n                icon=\"x\"\n                onClick={(e) => {\n                  e.preventDefault()\n                  unwrapLink(editor)\n                }}\n                round\n                tooltip={t('general:remove')}\n              />\n            </div>\n          )}\n          size=\"fit-content\"\n          verticalAlign=\"bottom\"\n        />\n      </span>\n      <span\n        className={[`${baseClass}__popup-toggler`].filter(Boolean).join(' ')}\n        onClick={() => setRenderPopup(true)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            setRenderPopup(true)\n          }\n        }}\n        role=\"button\"\n        tabIndex={0}\n      >\n        {children}\n      </span>\n    </span>\n  )\n}\n"],"names":["getTranslation","Button","Popup","Translation","useConfig","useDocumentInfo","useDrawerSlug","useLocale","useModal","useServerFunctions","useTranslation","deepCopyObject","reduceFieldsToValues","useCallback","useEffect","useState","Editor","Node","Transforms","ReactEditor","useSlate","useElement","LinkDrawer","linkFieldsSchemaPath","unwrapLink","baseClass","insertChange","editor","fields","data","parentPath","above","newNode","doc","linkType","newTab","url","setNodes","at","delete","selection","focus","path","unit","move","distance","insertText","String","text","LinkElement","attributes","children","editorRef","element","fieldProps","schemaPath","fieldMapPath","componentMap","id","collectionSlug","docPermissions","getDocPreferences","globalSlug","config","getEntityConfig","code","locale","i18n","t","closeModal","openModal","toggleModal","renderModal","setRenderModal","renderPopup","setRenderPopup","initialState","setInitialState","getFormState","drawerSlug","handleTogglePopup","render","awaitInitialState","string","state","docPreferences","operation","renderAllFields","span","className","contentEditable","style","userSelect","Array","isArray","handleClose","handleModalSubmit","boundingRef","buttonType","forceOpen","horizontalAlign","onToggleOpen","div","relationTo","value","elements","a","href","routes","admin","rel","target","title","i18nKey","variables","label","labels","singular","buttonStyle","icon","onClick","e","preventDefault","round","tooltip","size","verticalAlign","filter","Boolean","join","onKeyDown","key","role","tabIndex"],"mappings":"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"}