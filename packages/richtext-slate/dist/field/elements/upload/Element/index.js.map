{"version":3,"sources":["../../../../../src/field/elements/upload/Element/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ListDrawerProps } from '@payloadcms/ui'\nimport type { ClientCollectionConfig } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Button,\n  DrawerToggler,\n  File,\n  useConfig,\n  useDocumentDrawer,\n  useDrawerSlug,\n  useListDrawer,\n  usePayloadAPI,\n  useTranslation,\n} from '@payloadcms/ui'\nimport React, { useCallback, useReducer, useState } from 'react'\nimport { Transforms } from 'slate'\nimport { ReactEditor, useFocused, useSelected, useSlateStatic } from 'slate-react'\n\nimport type { UploadElementType } from '../types.js'\n\nimport { useElement } from '../../../providers/ElementProvider.js'\nimport { EnabledRelationshipsCondition } from '../../EnabledRelationshipsCondition.js'\nimport { uploadFieldsSchemaPath, uploadName } from '../shared.js'\nimport { UploadDrawer } from './UploadDrawer/index.js'\nimport './index.scss'\n\nconst baseClass = 'rich-text-upload'\n\nconst initialParams = {\n  depth: 0,\n}\n\nconst UploadElementComponent: React.FC<{ enabledCollectionSlugs?: string[] }> = ({\n  enabledCollectionSlugs,\n}) => {\n  const {\n    attributes,\n    children,\n    element: { relationTo, value },\n    element,\n    fieldProps,\n    schemaPath,\n  } = useElement<UploadElementType>()\n\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n    getEntityConfig,\n  } = useConfig()\n  const { i18n, t } = useTranslation()\n  const [cacheBust, dispatchCacheBust] = useReducer((state) => state + 1, 0)\n  const [relatedCollection, setRelatedCollection] = useState<ClientCollectionConfig>(() =>\n    getEntityConfig({ collectionSlug: relationTo }),\n  )\n\n  const drawerSlug = useDrawerSlug('upload-drawer')\n\n  const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = useListDrawer({\n    collectionSlugs: enabledCollectionSlugs,\n    selectedCollection: relatedCollection.slug,\n  })\n\n  const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = useDocumentDrawer({\n    id: value?.id,\n    collectionSlug: relatedCollection.slug,\n  })\n\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useFocused()\n\n  // Get the referenced document\n  const [{ data }, { setParams }] = usePayloadAPI(\n    `${serverURL}${api}/${relatedCollection.slug}/${value?.id}`,\n    { initialParams },\n  )\n\n  const thumbnailSRC = data?.thumbnailURL || data?.url\n\n  const removeUpload = useCallback(() => {\n    const elementPath = ReactEditor.findPath(editor, element)\n\n    Transforms.removeNodes(editor, { at: elementPath })\n  }, [editor, element])\n\n  const updateUpload = useCallback(\n    (json) => {\n      const { doc } = json\n\n      const newNode = {\n        fields: doc,\n      }\n\n      const elementPath = ReactEditor.findPath(editor, element)\n\n      Transforms.setNodes(editor, newNode, { at: elementPath })\n\n      setParams({\n        ...initialParams,\n        cacheBust, // do this to get the usePayloadAPI to re-fetch the data even though the URL string hasn't changed\n      })\n\n      dispatchCacheBust()\n      closeDrawer()\n    },\n    [editor, element, setParams, cacheBust, closeDrawer],\n  )\n\n  const swapUpload = useCallback<NonNullable<ListDrawerProps['onSelect']>>(\n    ({ collectionSlug, doc }) => {\n      const newNode = {\n        type: uploadName,\n        children: [{ text: ' ' }],\n        relationTo: collectionSlug,\n        value: { id: doc.id },\n      }\n\n      const elementPath = ReactEditor.findPath(editor, element)\n\n      setRelatedCollection(getEntityConfig({ collectionSlug }))\n\n      Transforms.setNodes(editor, newNode, { at: elementPath })\n\n      dispatchCacheBust()\n      closeListDrawer()\n    },\n    [closeListDrawer, editor, element, getEntityConfig],\n  )\n\n  const relatedFieldSchemaPath = `${uploadFieldsSchemaPath}.${relatedCollection.slug}`\n  const customFieldsMap = fieldProps.componentMap[relatedFieldSchemaPath]\n\n  return (\n    <div\n      className={[baseClass, selected && focused && `${baseClass}--selected`]\n        .filter(Boolean)\n        .join(' ')}\n      contentEditable={false}\n      {...attributes}\n    >\n      <div className={`${baseClass}__card`}>\n        <div className={`${baseClass}__topRow`}>\n          {/* TODO: migrate to use Thumbnail component */}\n          <div className={`${baseClass}__thumbnail`}>\n            {thumbnailSRC ? <img alt={data?.filename} src={thumbnailSRC} /> : <File />}\n          </div>\n          <div className={`${baseClass}__topRowRightPanel`}>\n            <div className={`${baseClass}__collectionLabel`}>\n              {getTranslation(relatedCollection.labels.singular, i18n)}\n            </div>\n            <div className={`${baseClass}__actions`}>\n              {Boolean(customFieldsMap) && (\n                <>\n                  <DrawerToggler\n                    className={`${baseClass}__upload-drawer-toggler`}\n                    disabled={fieldProps?.field?.admin?.readOnly}\n                    slug={drawerSlug}\n                  >\n                    <Button\n                      buttonStyle=\"icon-label\"\n                      el=\"div\"\n                      icon=\"edit\"\n                      onClick={(e) => {\n                        e.preventDefault()\n                      }}\n                      round\n                      tooltip={t('fields:editRelationship')}\n                    />\n                  </DrawerToggler>\n                  <UploadDrawer\n                    {...{ drawerSlug, element, fieldProps, relatedCollection, schemaPath }}\n                  />\n                </>\n              )}\n              <ListDrawerToggler\n                className={`${baseClass}__list-drawer-toggler`}\n                disabled={fieldProps?.field?.admin?.readOnly}\n              >\n                <Button\n                  buttonStyle=\"icon-label\"\n                  disabled={fieldProps?.field?.admin?.readOnly}\n                  el=\"div\"\n                  icon=\"swap\"\n                  onClick={() => {\n                    // do nothing\n                  }}\n                  round\n                  tooltip={t('fields:swapUpload')}\n                />\n              </ListDrawerToggler>\n              <Button\n                buttonStyle=\"icon-label\"\n                className={`${baseClass}__removeButton`}\n                disabled={fieldProps?.field?.admin?.readOnly}\n                icon=\"x\"\n                onClick={(e) => {\n                  e.preventDefault()\n                  removeUpload()\n                }}\n                round\n                tooltip={t('fields:removeUpload')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={`${baseClass}__bottomRow`}>\n          <DocumentDrawerToggler className={`${baseClass}__doc-drawer-toggler`}>\n            <strong>{data?.filename}</strong>\n          </DocumentDrawerToggler>\n        </div>\n      </div>\n      {children}\n      {value?.id && <DocumentDrawer onSave={updateUpload} />}\n      <ListDrawer onSelect={swapUpload} />\n    </div>\n  )\n}\n\nexport const UploadElement = (props: any): React.ReactNode => {\n  return (\n    <EnabledRelationshipsCondition {...props} uploads>\n      <UploadElementComponent {...props} />\n    </EnabledRelationshipsCondition>\n  )\n}\n"],"names":["getTranslation","Button","DrawerToggler","File","useConfig","useDocumentDrawer","useDrawerSlug","useListDrawer","usePayloadAPI","useTranslation","React","useCallback","useReducer","useState","Transforms","ReactEditor","useFocused","useSelected","useSlateStatic","useElement","EnabledRelationshipsCondition","uploadFieldsSchemaPath","uploadName","UploadDrawer","baseClass","initialParams","depth","UploadElementComponent","enabledCollectionSlugs","attributes","children","element","relationTo","value","fieldProps","schemaPath","config","routes","api","serverURL","getEntityConfig","i18n","t","cacheBust","dispatchCacheBust","state","relatedCollection","setRelatedCollection","collectionSlug","drawerSlug","ListDrawer","ListDrawerToggler","closeDrawer","closeListDrawer","collectionSlugs","selectedCollection","slug","DocumentDrawer","DocumentDrawerToggler","id","editor","selected","focused","data","setParams","thumbnailSRC","thumbnailURL","url","removeUpload","elementPath","findPath","removeNodes","at","updateUpload","json","doc","newNode","fields","setNodes","swapUpload","type","text","relatedFieldSchemaPath","customFieldsMap","componentMap","div","className","filter","Boolean","join","contentEditable","img","alt","filename","src","labels","singular","disabled","field","admin","readOnly","buttonStyle","el","icon","onClick","e","preventDefault","round","tooltip","strong","onSave","onSelect","UploadElement","props","uploads"],"mappings":"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"}