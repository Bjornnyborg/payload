{"version":3,"sources":["../../../../../../src/field/elements/upload/Element/UploadDrawer/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FormProps } from '@payloadcms/ui'\nimport type { ClientCollectionConfig } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Drawer,\n  EditDepthProvider,\n  Form,\n  FormSubmit,\n  RenderFields,\n  useConfig,\n  useDocumentInfo,\n  useLocale,\n  useModal,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { deepCopyObject } from 'payload/shared'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Transforms } from 'slate'\nimport { ReactEditor, useSlateStatic } from 'slate-react'\n\nimport type { LoadedSlateFieldProps } from '../../../../types.js'\nimport type { UploadElementType } from '../../types.js'\n\nimport { uploadFieldsSchemaPath } from '../../shared.js'\n\nexport const UploadDrawer: React.FC<{\n  readonly drawerSlug: string\n  readonly element: UploadElementType\n  readonly fieldProps: LoadedSlateFieldProps\n  readonly relatedCollection: ClientCollectionConfig\n  readonly schemaPath: string\n}> = (props) => {\n  const editor = useSlateStatic()\n\n  const { drawerSlug, element, fieldProps, relatedCollection, schemaPath } = props\n\n  const { i18n, t } = useTranslation()\n  const { code: locale } = useLocale()\n  const { closeModal } = useModal()\n  const { id, collectionSlug, getDocPreferences, globalSlug } = useDocumentInfo()\n\n  const { getFormState } = useServerFunctions()\n\n  const [initialState, setInitialState] = useState({})\n  const { componentMap } = fieldProps\n\n  const relatedFieldSchemaPath = `${uploadFieldsSchemaPath}.${relatedCollection.slug}`\n  const fields = componentMap[relatedFieldSchemaPath]\n\n  const { config } = useConfig()\n\n  const handleUpdateEditData = useCallback(\n    (_, data) => {\n      const newNode = {\n        fields: data,\n      }\n\n      const elementPath = ReactEditor.findPath(editor, element)\n\n      Transforms.setNodes(editor, newNode, { at: elementPath })\n      closeModal(drawerSlug)\n    },\n    [closeModal, editor, element, drawerSlug],\n  )\n\n  useEffect(() => {\n    const data = deepCopyObject(element?.fields || {})\n\n    const awaitInitialState = async () => {\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        data,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        globalSlug,\n        operation: 'update',\n        renderAllFields: true,\n        schemaPath: `${schemaPath}.${uploadFieldsSchemaPath}.${relatedCollection.slug}`,\n      })\n\n      setInitialState(state)\n    }\n\n    void awaitInitialState()\n  }, [\n    config,\n    element?.fields,\n    locale,\n    t,\n    collectionSlug,\n    id,\n    schemaPath,\n    relatedCollection.slug,\n    getFormState,\n    globalSlug,\n    getDocPreferences,\n  ])\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState }) => {\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        formState: prevFormState,\n        globalSlug,\n        operation: 'update',\n        schemaPath: `${schemaPath}.${uploadFieldsSchemaPath}.${relatedCollection.slug}`,\n      })\n\n      return state\n    },\n\n    [\n      getFormState,\n      id,\n      collectionSlug,\n      getDocPreferences,\n      globalSlug,\n      schemaPath,\n      relatedCollection.slug,\n    ],\n  )\n\n  return (\n    <EditDepthProvider>\n      <Drawer\n        slug={drawerSlug}\n        title={t('general:editLabel', {\n          label: getTranslation(relatedCollection.labels.singular, i18n),\n        })}\n      >\n        <Form\n          beforeSubmit={[onChange]}\n          disableValidationOnSubmit\n          initialState={initialState}\n          onChange={[onChange]}\n          onSubmit={handleUpdateEditData}\n        >\n          <RenderFields\n            fields={Array.isArray(fields) ? fields : []}\n            parentIndexPath=\"\"\n            parentPath=\"\"\n            parentSchemaPath=\"\"\n            permissions={true}\n            readOnly={false}\n          />\n          <FormSubmit>{t('fields:saveChanges')}</FormSubmit>\n        </Form>\n      </Drawer>\n    </EditDepthProvider>\n  )\n}\n"],"names":["getTranslation","Drawer","EditDepthProvider","Form","FormSubmit","RenderFields","useConfig","useDocumentInfo","useLocale","useModal","useServerFunctions","useTranslation","deepCopyObject","React","useCallback","useEffect","useState","Transforms","ReactEditor","useSlateStatic","uploadFieldsSchemaPath","UploadDrawer","props","editor","drawerSlug","element","fieldProps","relatedCollection","schemaPath","i18n","t","code","locale","closeModal","id","collectionSlug","getDocPreferences","globalSlug","getFormState","initialState","setInitialState","componentMap","relatedFieldSchemaPath","slug","fields","config","handleUpdateEditData","_","data","newNode","elementPath","findPath","setNodes","at","awaitInitialState","state","docPermissions","docPreferences","operation","renderAllFields","onChange","formState","prevFormState","title","label","labels","singular","beforeSubmit","disableValidationOnSubmit","onSubmit","Array","isArray","parentIndexPath","parentPath","parentSchemaPath","permissions","readOnly"],"mappings":"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"}