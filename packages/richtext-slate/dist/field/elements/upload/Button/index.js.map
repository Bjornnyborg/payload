{"version":3,"sources":["../../../../../src/field/elements/upload/Button/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ListDrawerProps } from '@payloadcms/ui'\n\nimport { useListDrawer, useTranslation } from '@payloadcms/ui'\nimport React, { Fragment, useCallback } from 'react'\nimport { ReactEditor, useSlate } from 'slate-react'\n\nimport { UploadIcon } from '../../../icons/Upload/index.js'\nimport { ElementButton } from '../../Button.js'\nimport { EnabledRelationshipsCondition } from '../../EnabledRelationshipsCondition.js'\nimport { injectVoidElement } from '../../injectVoid.js'\nimport './index.scss'\n\nconst baseClass = 'upload-rich-text-button'\n\nconst insertUpload = (editor, { relationTo, value }) => {\n  const text = { text: ' ' }\n\n  const upload = {\n    type: 'upload',\n    children: [text],\n    relationTo,\n    value,\n  }\n\n  injectVoidElement(editor, upload)\n\n  ReactEditor.focus(editor)\n}\n\ntype ButtonProps = {\n  enabledCollectionSlugs: string[]\n  path: string\n}\n\nconst UploadButton: React.FC<ButtonProps> = ({ enabledCollectionSlugs }) => {\n  const { t } = useTranslation()\n  const editor = useSlate()\n\n  const [ListDrawer, ListDrawerToggler, { closeDrawer }] = useListDrawer({\n    collectionSlugs: enabledCollectionSlugs,\n    uploads: true,\n  })\n\n  const onSelect = useCallback<NonNullable<ListDrawerProps['onSelect']>>(\n    ({ collectionSlug, doc }) => {\n      insertUpload(editor, {\n        relationTo: collectionSlug,\n        value: {\n          id: doc.id,\n        },\n      })\n      closeDrawer()\n    },\n    [editor, closeDrawer],\n  )\n\n  return (\n    <Fragment>\n      <ListDrawerToggler>\n        <ElementButton\n          className={baseClass}\n          el=\"div\"\n          format=\"upload\"\n          onClick={() => {\n            // do nothing\n          }}\n          tooltip={t('fields:addUpload')}\n        >\n          <UploadIcon />\n        </ElementButton>\n      </ListDrawerToggler>\n      <ListDrawer onSelect={onSelect} />\n    </Fragment>\n  )\n}\n\nexport const UploadElementButton = (props: ButtonProps): React.ReactNode => {\n  return (\n    <EnabledRelationshipsCondition {...props} uploads>\n      <UploadButton {...props} />\n    </EnabledRelationshipsCondition>\n  )\n}\n"],"names":["useListDrawer","useTranslation","React","Fragment","useCallback","ReactEditor","useSlate","UploadIcon","ElementButton","EnabledRelationshipsCondition","injectVoidElement","baseClass","insertUpload","editor","relationTo","value","text","upload","type","children","focus","UploadButton","enabledCollectionSlugs","t","ListDrawer","ListDrawerToggler","closeDrawer","collectionSlugs","uploads","onSelect","collectionSlug","doc","id","className","el","format","onClick","tooltip","UploadElementButton","props"],"mappings":"AAAA;;AAIA,SAASA,aAAa,EAAEC,cAAc,QAAQ,iBAAgB;AAC9D,OAAOC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,QAAO;AACpD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,cAAa;AAEnD,SAASC,UAAU,QAAQ,iCAAgC;AAC3D,SAASC,aAAa,QAAQ,kBAAiB;AAC/C,SAASC,6BAA6B,QAAQ,yCAAwC;AACtF,SAASC,iBAAiB,QAAQ,sBAAqB;AACvD,OAAO,eAAc;AAErB,MAAMC,YAAY;AAElB,MAAMC,eAAe,CAACC,QAAQ,EAAEC,UAAU,EAAEC,KAAK,EAAE;IACjD,MAAMC,OAAO;QAAEA,MAAM;IAAI;IAEzB,MAAMC,SAAS;QACbC,MAAM;QACNC,UAAU;YAACH;SAAK;QAChBF;QACAC;IACF;IAEAL,kBAAkBG,QAAQI;IAE1BZ,YAAYe,KAAK,CAACP;AACpB;AAOA,MAAMQ,eAAsC,CAAC,EAAEC,sBAAsB,EAAE;IACrE,MAAM,EAAEC,CAAC,EAAE,GAAGtB;IACd,MAAMY,SAASP;IAEf,MAAM,CAACkB,YAAYC,mBAAmB,EAAEC,WAAW,EAAE,CAAC,GAAG1B,cAAc;QACrE2B,iBAAiBL;QACjBM,SAAS;IACX;IAEA,MAAMC,WAAWzB,YACf,CAAC,EAAE0B,cAAc,EAAEC,GAAG,EAAE;QACtBnB,aAAaC,QAAQ;YACnBC,YAAYgB;YACZf,OAAO;gBACLiB,IAAID,IAAIC,EAAE;YACZ;QACF;QACAN;IACF,GACA;QAACb;QAAQa;KAAY;IAGvB,qBACE,MAACvB;;0BACC,KAACsB;0BACC,cAAA,KAACjB;oBACCyB,WAAWtB;oBACXuB,IAAG;oBACHC,QAAO;oBACPC,SAAS;oBACP,aAAa;oBACf;oBACAC,SAASd,EAAE;8BAEX,cAAA,KAAChB;;;0BAGL,KAACiB;gBAAWK,UAAUA;;;;AAG5B;AAEA,OAAO,MAAMS,sBAAsB,CAACC;IAClC,qBACE,KAAC9B;QAA+B,GAAG8B,KAAK;QAAEX,OAAO;kBAC/C,cAAA,KAACP;YAAc,GAAGkB,KAAK;;;AAG7B,EAAC"}