{"version":3,"sources":["../../../src/field/elements/injectVoid.ts"],"sourcesContent":["import type { Element } from 'slate'\n\nimport { Editor, Transforms } from 'slate'\n\nimport type { ElementNode } from '../../types.js'\n\nimport { isLastSelectedElementEmpty } from './isLastSelectedElementEmpty.js'\n\nexport const injectVoidElement = (editor: Editor, element: Element): void => {\n  const lastSelectedElementIsEmpty = isLastSelectedElementEmpty(editor)\n  const previous = Editor.previous<ElementNode>(editor)\n\n  if (lastSelectedElementIsEmpty) {\n    // If previous node is void\n    if (previous?.[0] && Editor.isVoid(editor, previous[0])) {\n      // Insert a blank element between void nodes\n      // so user can place cursor between void nodes\n      Transforms.insertNodes(editor, { children: [{ text: '' }] })\n      Transforms.setNodes(editor, element)\n      // Otherwise just set the empty node equal to new void\n    } else {\n      Transforms.setNodes(editor, element)\n    }\n  } else {\n    Transforms.insertNodes(editor, element)\n  }\n\n  // Add an empty node after the new void\n  Transforms.insertNodes(editor, { children: [{ text: '' }] })\n}\n"],"names":["Editor","Transforms","isLastSelectedElementEmpty","injectVoidElement","editor","element","lastSelectedElementIsEmpty","previous","isVoid","insertNodes","children","text","setNodes"],"mappings":"AAEA,SAASA,MAAM,EAAEC,UAAU,QAAQ,QAAO;AAI1C,SAASC,0BAA0B,QAAQ,kCAAiC;AAE5E,OAAO,MAAMC,oBAAoB,CAACC,QAAgBC;IAChD,MAAMC,6BAA6BJ,2BAA2BE;IAC9D,MAAMG,WAAWP,OAAOO,QAAQ,CAAcH;IAE9C,IAAIE,4BAA4B;QAC9B,2BAA2B;QAC3B,IAAIC,UAAU,CAAC,EAAE,IAAIP,OAAOQ,MAAM,CAACJ,QAAQG,QAAQ,CAAC,EAAE,GAAG;YACvD,4CAA4C;YAC5C,8CAA8C;YAC9CN,WAAWQ,WAAW,CAACL,QAAQ;gBAAEM,UAAU;oBAAC;wBAAEC,MAAM;oBAAG;iBAAE;YAAC;YAC1DV,WAAWW,QAAQ,CAACR,QAAQC;QAC5B,sDAAsD;QACxD,OAAO;YACLJ,WAAWW,QAAQ,CAACR,QAAQC;QAC9B;IACF,OAAO;QACLJ,WAAWQ,WAAW,CAACL,QAAQC;IACjC;IAEA,uCAAuC;IACvCJ,WAAWQ,WAAW,CAACL,QAAQ;QAAEM,UAAU;YAAC;gBAAEC,MAAM;YAAG;SAAE;IAAC;AAC5D,EAAC"}