{"version":3,"sources":["../../../src/field/providers/ElementProvider.tsx"],"sourcesContent":["'use client'\nimport type { Element } from 'slate'\n\nimport React from 'react'\n\nimport type { LoadedSlateFieldProps } from '../types.js'\n\ntype ElementContextType<T> = {\n  attributes: Record<string, unknown>\n  children: React.ReactNode\n  editorRef: React.RefObject<HTMLDivElement>\n  element: T\n  fieldProps: LoadedSlateFieldProps\n  path: string\n  schemaPath: string\n}\n\nconst ElementContext = React.createContext<ElementContextType<Element>>({\n  attributes: {},\n  children: null,\n  editorRef: null,\n  element: {} as Element,\n  fieldProps: {} as any,\n  path: '',\n  schemaPath: '',\n})\n\nexport const ElementProvider: React.FC<\n  {\n    childNodes: React.ReactNode\n  } & ElementContextType<Element>\n> = (props) => {\n  const { childNodes, children, ...rest } = props\n\n  return (\n    <ElementContext\n      value={{\n        ...rest,\n        children: childNodes,\n      }}\n    >\n      {children}\n    </ElementContext>\n  )\n}\n\nexport const useElement = <T,>(): ElementContextType<T> => {\n  return React.use(ElementContext) as ElementContextType<T>\n}\n"],"names":["React","ElementContext","createContext","attributes","children","editorRef","element","fieldProps","path","schemaPath","ElementProvider","props","childNodes","rest","value","useElement","use"],"mappings":"AAAA;;AAGA,OAAOA,WAAW,QAAO;AAczB,MAAMC,+BAAiBD,MAAME,aAAa,CAA8B;IACtEC,YAAY,CAAC;IACbC,UAAU;IACVC,WAAW;IACXC,SAAS,CAAC;IACVC,YAAY,CAAC;IACbC,MAAM;IACNC,YAAY;AACd;AAEA,OAAO,MAAMC,kBAIT,CAACC;IACH,MAAM,EAAEC,UAAU,EAAER,QAAQ,EAAE,GAAGS,MAAM,GAAGF;IAE1C,qBACE,KAACV;QACCa,OAAO;YACL,GAAGD,IAAI;YACPT,UAAUQ;QACZ;kBAECR;;AAGP,EAAC;AAED,OAAO,MAAMW,aAAa;IACxB,OAAOf,MAAMgB,GAAG,CAACf;AACnB,EAAC"}