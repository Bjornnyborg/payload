{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Operators } from '@payloadcms/drizzle'\nimport type { DatabaseAdapterObj, Payload } from 'payload'\n\nimport {\n  beginTransaction,\n  buildCreateMigration,\n  commitTransaction,\n  count,\n  countGlobalVersions,\n  countVersions,\n  create,\n  createGlobal,\n  createGlobalVersion,\n  createSchemaGenerator,\n  createVersion,\n  deleteMany,\n  deleteOne,\n  deleteVersions,\n  destroy,\n  find,\n  findGlobal,\n  findGlobalVersions,\n  findMigrationDir,\n  findOne,\n  findVersions,\n  migrate,\n  migrateDown,\n  migrateFresh,\n  migrateRefresh,\n  migrateReset,\n  migrateStatus,\n  operatorMap,\n  queryDrafts,\n  rollbackTransaction,\n  updateGlobal,\n  updateGlobalVersion,\n  updateJobs,\n  updateMany,\n  updateOne,\n  updateVersion,\n} from '@payloadcms/drizzle'\nimport { like, notLike } from 'drizzle-orm'\nimport { createDatabaseAdapter, defaultBeginTransaction } from 'payload'\nimport { fileURLToPath } from 'url'\n\nimport type { Args, SQLiteAdapter } from './types.js'\n\nimport { columnToCodeConverter } from './columnToCodeConverter.js'\nimport { connect } from './connect.js'\nimport { countDistinct } from './countDistinct.js'\nimport { convertPathToJSONTraversal } from './createJSONQuery/convertPathToJSONTraversal.js'\nimport { createJSONQuery } from './createJSONQuery/index.js'\nimport { defaultDrizzleSnapshot } from './defaultSnapshot.js'\nimport { deleteWhere } from './deleteWhere.js'\nimport { dropDatabase } from './dropDatabase.js'\nimport { execute } from './execute.js'\nimport { init } from './init.js'\nimport { insert } from './insert.js'\nimport { requireDrizzleKit } from './requireDrizzleKit.js'\n\nconst filename = fileURLToPath(import.meta.url)\n\nexport function sqliteAdapter(args: Args): DatabaseAdapterObj<SQLiteAdapter> {\n  const sqliteIDType = args.idType || 'number'\n  const payloadIDType = sqliteIDType === 'uuid' ? 'text' : 'number'\n  const allowIDOnCreate = args.allowIDOnCreate ?? false\n\n  function adapter({ payload }: { payload: Payload }) {\n    const migrationDir = findMigrationDir(args.migrationDir)\n    let resolveInitializing\n    let rejectInitializing\n\n    const initializing = new Promise<void>((res, rej) => {\n      resolveInitializing = res\n      rejectInitializing = rej\n    })\n\n    // sqlite's like operator is case-insensitive, so we overwrite the DrizzleAdapter operators to not use ilike\n    const operators = {\n      ...operatorMap,\n      contains: like,\n      like,\n      not_like: notLike,\n    } as unknown as Operators\n\n    return createDatabaseAdapter<SQLiteAdapter>({\n      name: 'sqlite',\n      afterSchemaInit: args.afterSchemaInit ?? [],\n      allowIDOnCreate,\n      autoIncrement: args.autoIncrement ?? false,\n      beforeSchemaInit: args.beforeSchemaInit ?? [],\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      client: undefined,\n      clientConfig: args.client,\n      defaultDrizzleSnapshot,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      drizzle: undefined,\n      features: {\n        json: true,\n      },\n      fieldConstraints: {},\n      generateSchema: createSchemaGenerator({\n        columnToCodeConverter,\n        corePackageSuffix: 'sqlite-core',\n        defaultOutputFile: args.generateSchemaOutputFile,\n        tableImport: 'sqliteTable',\n      }),\n      idType: sqliteIDType,\n      initializing,\n      localesSuffix: args.localesSuffix || '_locales',\n      logger: args.logger,\n      operators,\n      prodMigrations: args.prodMigrations,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      push: args.push,\n      rawRelations: {},\n      rawTables: {},\n      relations: {},\n      relationshipsSuffix: args.relationshipsSuffix || '_rels',\n      schema: {},\n      schemaName: args.schemaName,\n      sessions: {},\n      tableNameMap: new Map<string, string>(),\n      tables: {},\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      transactionOptions: args.transactionOptions || undefined,\n      updateJobs,\n      updateMany,\n      versionsSuffix: args.versionsSuffix || '_v',\n\n      // DatabaseAdapter\n      beginTransaction: args.transactionOptions ? beginTransaction : defaultBeginTransaction(),\n      commitTransaction,\n      connect,\n      convertPathToJSONTraversal,\n      count,\n      countDistinct,\n      countGlobalVersions,\n      countVersions,\n      create,\n      createGlobal,\n      createGlobalVersion,\n      createJSONQuery,\n      createMigration: buildCreateMigration({\n        executeMethod: 'run',\n        filename,\n        sanitizeStatements({ sqlExecute, statements }) {\n          return statements\n            .map((statement) => `${sqlExecute}${statement?.replaceAll('`', '\\\\`')}\\`)`)\n            .join('\\n')\n        },\n      }),\n      createVersion,\n      defaultIDType: payloadIDType,\n      deleteMany,\n      deleteOne,\n      deleteVersions,\n      deleteWhere,\n      destroy,\n      dropDatabase,\n      execute,\n      find,\n      findGlobal,\n      findGlobalVersions,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      findOne,\n      findVersions,\n      indexes: new Set<string>(),\n      init,\n      insert,\n      migrate,\n      migrateDown,\n      migrateFresh,\n      migrateRefresh,\n      migrateReset,\n      migrateStatus,\n      migrationDir,\n      packageName: '@payloadcms/db-sqlite',\n      payload,\n      queryDrafts,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      rejectInitializing,\n      requireDrizzleKit,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      resolveInitializing,\n      rollbackTransaction,\n      updateGlobal,\n      updateGlobalVersion,\n      updateOne,\n      updateVersion,\n      upsert: updateOne,\n    })\n  }\n\n  return {\n    name: 'sqlite',\n    allowIDOnCreate,\n    defaultIDType: payloadIDType,\n    init: adapter,\n  }\n}\n\n/**\n * @todo deprecate /types subpath export in 4.0\n */\nexport type {\n  Args as SQLiteAdapterArgs,\n  CountDistinct,\n  DeleteWhere,\n  DropDatabase,\n  Execute,\n  GeneratedDatabaseSchema,\n  GenericColumns,\n  GenericRelation,\n  GenericTable,\n  IDType,\n  Insert,\n  MigrateDownArgs,\n  MigrateUpArgs,\n  SQLiteAdapter,\n  SQLiteSchemaHook,\n} from './types.js'\n\nexport { sql } from 'drizzle-orm'\n"],"names":["beginTransaction","buildCreateMigration","commitTransaction","count","countGlobalVersions","countVersions","create","createGlobal","createGlobalVersion","createSchemaGenerator","createVersion","deleteMany","deleteOne","deleteVersions","destroy","find","findGlobal","findGlobalVersions","findMigrationDir","findOne","findVersions","migrate","migrateDown","migrateFresh","migrateRefresh","migrateReset","migrateStatus","operatorMap","queryDrafts","rollbackTransaction","updateGlobal","updateGlobalVersion","updateJobs","updateMany","updateOne","updateVersion","like","notLike","createDatabaseAdapter","defaultBeginTransaction","fileURLToPath","columnToCodeConverter","connect","countDistinct","convertPathToJSONTraversal","createJSONQuery","defaultDrizzleSnapshot","deleteWhere","dropDatabase","execute","init","insert","requireDrizzleKit","filename","url","sqliteAdapter","args","sqliteIDType","idType","payloadIDType","allowIDOnCreate","adapter","payload","migrationDir","resolveInitializing","rejectInitializing","initializing","Promise","res","rej","operators","contains","not_like","name","afterSchemaInit","autoIncrement","beforeSchemaInit","client","undefined","clientConfig","drizzle","features","json","fieldConstraints","generateSchema","corePackageSuffix","defaultOutputFile","generateSchemaOutputFile","tableImport","localesSuffix","logger","prodMigrations","push","rawRelations","rawTables","relations","relationshipsSuffix","schema","schemaName","sessions","tableNameMap","Map","tables","transactionOptions","versionsSuffix","createMigration","executeMethod","sanitizeStatements","sqlExecute","statements","map","statement","replaceAll","join","defaultIDType","indexes","Set","packageName","upsert","sql"],"mappings":"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"}