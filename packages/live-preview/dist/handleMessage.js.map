{"version":3,"sources":["../src/handleMessage.ts"],"sourcesContent":["import type { FieldSchemaJSON } from 'payload'\n\nimport type { LivePreviewMessageEvent } from './types.js'\n\nimport { isLivePreviewEvent } from './isLivePreviewEvent.js'\nimport { mergeData } from './mergeData.js'\n\nconst _payloadLivePreview: {\n  fieldSchema: FieldSchemaJSON | undefined\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  previousData: any\n} = {\n  /**\n   * For performance reasons, `fieldSchemaJSON` will only be sent once on the initial message\n   * We need to cache this value so that it can be used across subsequent messages\n   * To do this, save `fieldSchemaJSON` when it arrives as a global variable\n   * Send this cached value to `mergeData`, instead of `eventData.fieldSchemaJSON` directly\n   */\n  fieldSchema: undefined,\n  /**\n   * Each time the data is merged, cache the result as a `previousData` variable\n   * This will ensure changes compound overtop of each other\n   */\n  previousData: undefined,\n}\n\nexport const handleMessage = async <T extends Record<string, any>>(args: {\n  apiRoute?: string\n  depth?: number\n  event: LivePreviewMessageEvent<T>\n  initialData: T\n  serverURL: string\n}): Promise<T> => {\n  const { apiRoute, depth, event, initialData, serverURL } = args\n\n  if (isLivePreviewEvent(event, serverURL)) {\n    const { data, externallyUpdatedRelationship, fieldSchemaJSON, locale } = event.data\n\n    if (!_payloadLivePreview?.fieldSchema && fieldSchemaJSON) {\n      _payloadLivePreview.fieldSchema = fieldSchemaJSON\n    }\n\n    if (!_payloadLivePreview?.fieldSchema) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Payload Live Preview: No `fieldSchemaJSON` was received from the parent window. Unable to merge data.',\n      )\n\n      return initialData\n    }\n\n    const mergedData = await mergeData<T>({\n      apiRoute,\n      depth,\n      externallyUpdatedRelationship,\n      fieldSchema: _payloadLivePreview.fieldSchema,\n      incomingData: data,\n      initialData: _payloadLivePreview?.previousData || initialData,\n      locale,\n      serverURL,\n    })\n\n    _payloadLivePreview.previousData = mergedData\n\n    return mergedData\n  }\n\n  return initialData\n}\n"],"names":["isLivePreviewEvent","mergeData","_payloadLivePreview","fieldSchema","undefined","previousData","handleMessage","args","apiRoute","depth","event","initialData","serverURL","data","externallyUpdatedRelationship","fieldSchemaJSON","locale","console","warn","mergedData","incomingData"],"mappings":"AAIA,SAASA,kBAAkB,QAAQ,0BAAyB;AAC5D,SAASC,SAAS,QAAQ,iBAAgB;AAE1C,MAAMC,sBAIF;IACF;;;;;GAKC,GACDC,aAAaC;IACb;;;GAGC,GACDC,cAAcD;AAChB;AAEA,OAAO,MAAME,gBAAgB,OAAsCC;IAOjE,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,SAAS,EAAE,GAAGL;IAE3D,IAAIP,mBAAmBU,OAAOE,YAAY;QACxC,MAAM,EAAEC,IAAI,EAAEC,6BAA6B,EAAEC,eAAe,EAAEC,MAAM,EAAE,GAAGN,MAAMG,IAAI;QAEnF,IAAI,CAACX,qBAAqBC,eAAeY,iBAAiB;YACxDb,oBAAoBC,WAAW,GAAGY;QACpC;QAEA,IAAI,CAACb,qBAAqBC,aAAa;YACrC,sCAAsC;YACtCc,QAAQC,IAAI,CACV;YAGF,OAAOP;QACT;QAEA,MAAMQ,aAAa,MAAMlB,UAAa;YACpCO;YACAC;YACAK;YACAX,aAAaD,oBAAoBC,WAAW;YAC5CiB,cAAcP;YACdF,aAAaT,qBAAqBG,gBAAgBM;YAClDK;YACAJ;QACF;QAEAV,oBAAoBG,YAAY,GAAGc;QAEnC,OAAOA;IACT;IAEA,OAAOR;AACT,EAAC"}