{"version":3,"sources":["../src/mergeData.ts"],"sourcesContent":["import type { DocumentEvent, FieldSchemaJSON, PaginatedDocs } from 'payload'\n\nimport type { PopulationsByCollection } from './types.js'\n\nimport { traverseFields } from './traverseFields.js'\n\nconst defaultRequestHandler = ({\n  apiPath,\n  endpoint,\n  serverURL,\n}: {\n  apiPath: string\n  endpoint: string\n  serverURL: string\n}) => {\n  const url = `${serverURL}${apiPath}/${endpoint}`\n  return fetch(url, {\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n\n// Relationships are only updated when their `id` or `relationTo` changes, by comparing the old and new values\n// This needs to also happen when locale changes, except this is not not part of the API response\n// Instead, we keep track of the old locale ourselves and trigger a re-population when it changes\nlet prevLocale: string | undefined\n\nexport const mergeData = async <T extends Record<string, any>>(args: {\n  apiRoute?: string\n  collectionPopulationRequestHandler?: ({\n    apiPath,\n    endpoint,\n    serverURL,\n  }: {\n    apiPath: string\n    endpoint: string\n    serverURL: string\n  }) => Promise<Response>\n  depth?: number\n  externallyUpdatedRelationship?: DocumentEvent\n  fieldSchema: FieldSchemaJSON\n  incomingData: Partial<T>\n  initialData: T\n  locale?: string\n  returnNumberOfRequests?: boolean\n  serverURL: string\n}): Promise<\n  {\n    _numberOfRequests?: number\n  } & T\n> => {\n  const {\n    apiRoute,\n    depth,\n    externallyUpdatedRelationship,\n    fieldSchema,\n    incomingData,\n    initialData,\n    locale,\n    returnNumberOfRequests,\n    serverURL,\n  } = args\n\n  const result = { ...initialData }\n\n  const populationsByCollection: PopulationsByCollection = {}\n\n  traverseFields({\n    externallyUpdatedRelationship,\n    fieldSchema,\n    incomingData,\n    localeChanged: prevLocale !== locale,\n    populationsByCollection,\n    result,\n  })\n\n  await Promise.all(\n    Object.entries(populationsByCollection).map(async ([collection, populations]) => {\n      let res: PaginatedDocs\n\n      const ids = new Set(populations.map(({ id }) => id))\n      const requestHandler = args.collectionPopulationRequestHandler || defaultRequestHandler\n\n      try {\n        res = await requestHandler({\n          apiPath: apiRoute || '/api',\n          endpoint: encodeURI(\n            `${collection}?depth=${depth}&where[id][in]=${Array.from(ids).join(',')}${locale ? `&locale=${locale}` : ''}`,\n          ),\n          serverURL,\n        }).then((res) => res.json())\n\n        if (res?.docs?.length > 0) {\n          res.docs.forEach((doc) => {\n            populationsByCollection[collection]?.forEach((population) => {\n              if (population.id === doc.id) {\n                population.ref[population.accessor] = doc\n              }\n            })\n          })\n        }\n      } catch (err) {\n        console.error(err) // eslint-disable-line no-console\n      }\n    }),\n  )\n\n  prevLocale = locale\n\n  return {\n    ...result,\n    ...(returnNumberOfRequests\n      ? { _numberOfRequests: Object.keys(populationsByCollection).length }\n      : {}),\n  }\n}\n"],"names":["traverseFields","defaultRequestHandler","apiPath","endpoint","serverURL","url","fetch","credentials","headers","prevLocale","mergeData","args","apiRoute","depth","externallyUpdatedRelationship","fieldSchema","incomingData","initialData","locale","returnNumberOfRequests","result","populationsByCollection","localeChanged","Promise","all","Object","entries","map","collection","populations","res","ids","Set","id","requestHandler","collectionPopulationRequestHandler","encodeURI","Array","from","join","then","json","docs","length","forEach","doc","population","ref","accessor","err","console","error","_numberOfRequests","keys"],"mappings":"AAIA,SAASA,cAAc,QAAQ,sBAAqB;AAEpD,MAAMC,wBAAwB,CAAC,EAC7BC,OAAO,EACPC,QAAQ,EACRC,SAAS,EAKV;IACC,MAAMC,MAAM,GAAGD,YAAYF,QAAQ,CAAC,EAAEC,UAAU;IAChD,OAAOG,MAAMD,KAAK;QAChBE,aAAa;QACbC,SAAS;YACP,gBAAgB;QAClB;IACF;AACF;AAEA,8GAA8G;AAC9G,iGAAiG;AACjG,iGAAiG;AACjG,IAAIC;AAEJ,OAAO,MAAMC,YAAY,OAAsCC;IAwB7D,MAAM,EACJC,QAAQ,EACRC,KAAK,EACLC,6BAA6B,EAC7BC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,MAAM,EACNC,sBAAsB,EACtBf,SAAS,EACV,GAAGO;IAEJ,MAAMS,SAAS;QAAE,GAAGH,WAAW;IAAC;IAEhC,MAAMI,0BAAmD,CAAC;IAE1DrB,eAAe;QACbc;QACAC;QACAC;QACAM,eAAeb,eAAeS;QAC9BG;QACAD;IACF;IAEA,MAAMG,QAAQC,GAAG,CACfC,OAAOC,OAAO,CAACL,yBAAyBM,GAAG,CAAC,OAAO,CAACC,YAAYC,YAAY;QAC1E,IAAIC;QAEJ,MAAMC,MAAM,IAAIC,IAAIH,YAAYF,GAAG,CAAC,CAAC,EAAEM,EAAE,EAAE,GAAKA;QAChD,MAAMC,iBAAiBvB,KAAKwB,kCAAkC,IAAIlC;QAElE,IAAI;YACF6B,MAAM,MAAMI,eAAe;gBACzBhC,SAASU,YAAY;gBACrBT,UAAUiC,UACR,GAAGR,WAAW,OAAO,EAAEf,MAAM,eAAe,EAAEwB,MAAMC,IAAI,CAACP,KAAKQ,IAAI,CAAC,OAAOrB,SAAS,CAAC,QAAQ,EAAEA,QAAQ,GAAG,IAAI;gBAE/Gd;YACF,GAAGoC,IAAI,CAAC,CAACV,MAAQA,IAAIW,IAAI;YAEzB,IAAIX,KAAKY,MAAMC,SAAS,GAAG;gBACzBb,IAAIY,IAAI,CAACE,OAAO,CAAC,CAACC;oBAChBxB,uBAAuB,CAACO,WAAW,EAAEgB,QAAQ,CAACE;wBAC5C,IAAIA,WAAWb,EAAE,KAAKY,IAAIZ,EAAE,EAAE;4BAC5Ba,WAAWC,GAAG,CAACD,WAAWE,QAAQ,CAAC,GAAGH;wBACxC;oBACF;gBACF;YACF;QACF,EAAE,OAAOI,KAAK;YACZC,QAAQC,KAAK,CAACF,KAAK,iCAAiC;;QACtD;IACF;IAGFxC,aAAaS;IAEb,OAAO;QACL,GAAGE,MAAM;QACT,GAAID,yBACA;YAAEiC,mBAAmB3B,OAAO4B,IAAI,CAAChC,yBAAyBsB,MAAM;QAAC,IACjE,CAAC,CAAC;IACR;AACF,EAAC"}