{"version":3,"sources":["../src/connect.ts"],"sourcesContent":["import type { DrizzleAdapter } from '@payloadcms/drizzle/types'\nimport type { Connect, Migration, Payload } from 'payload'\n\nimport { pushDevSchema } from '@payloadcms/drizzle'\nimport { drizzle } from 'drizzle-orm/node-postgres'\n\nimport type { PostgresAdapter } from './types.js'\n\nconst connectWithReconnect = async function ({\n  adapter,\n  payload,\n  reconnect = false,\n}: {\n  adapter: PostgresAdapter\n  payload: Payload\n  reconnect?: boolean\n}) {\n  let result\n\n  if (!reconnect) {\n    result = await adapter.pool.connect()\n  } else {\n    try {\n      result = await adapter.pool.connect()\n    } catch (ignore) {\n      setTimeout(() => {\n        payload.logger.info('Reconnecting to postgres')\n        void connectWithReconnect({ adapter, payload, reconnect: true })\n      }, 1000)\n    }\n  }\n  if (!result) {\n    return\n  }\n  result.prependListener('error', (err) => {\n    try {\n      if (err.code === 'ECONNRESET') {\n        void connectWithReconnect({ adapter, payload, reconnect: true })\n      }\n    } catch (ignore) {\n      // swallow error\n    }\n  })\n}\n\nexport const connect: Connect = async function connect(\n  this: PostgresAdapter,\n  options = {\n    hotReload: false,\n  },\n) {\n  const { hotReload } = options\n\n  this.schema = {\n    pgSchema: this.pgSchema,\n    ...this.tables,\n    ...this.relations,\n    ...this.enums,\n  }\n\n  try {\n    if (!this.pool) {\n      this.pool = new this.pg.Pool(this.poolOptions)\n      await connectWithReconnect({ adapter: this, payload: this.payload })\n    }\n\n    const logger = this.logger || false\n    this.drizzle = drizzle({ client: this.pool, logger, schema: this.schema })\n\n    if (!hotReload) {\n      if (process.env.PAYLOAD_DROP_DATABASE === 'true') {\n        this.payload.logger.info(`---- DROPPING TABLES SCHEMA(${this.schemaName || 'public'}) ----`)\n        await this.dropDatabase({ adapter: this })\n        this.payload.logger.info('---- DROPPED TABLES ----')\n      }\n    }\n  } catch (error) {\n    const err = error instanceof Error ? error : new Error(String(error))\n    if (err.message?.match(/database .* does not exist/i) && !this.disableCreateDatabase) {\n      // capitalize first char of the err msg\n      this.payload.logger.info(\n        `${err.message.charAt(0).toUpperCase() + err.message.slice(1)}, creating...`,\n      )\n      const isCreated = await this.createDatabase()\n\n      if (isCreated && this.connect) {\n        await this.connect(options)\n        return\n      }\n    } else {\n      this.payload.logger.error({\n        err,\n        msg: `Error: cannot connect to Postgres. Details: ${err.message}`,\n      })\n    }\n\n    if (typeof this.rejectInitializing === 'function') {\n      this.rejectInitializing()\n    }\n    process.exit(1)\n  }\n\n  await this.createExtensions()\n\n  // Only push schema if not in production\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    process.env.PAYLOAD_MIGRATING !== 'true' &&\n    this.push !== false\n  ) {\n    await pushDevSchema(this as unknown as DrizzleAdapter)\n  }\n\n  if (typeof this.resolveInitializing === 'function') {\n    this.resolveInitializing()\n  }\n\n  if (process.env.NODE_ENV === 'production' && this.prodMigrations) {\n    await this.migrate({ migrations: this.prodMigrations as unknown as Migration[] })\n  }\n}\n"],"names":["pushDevSchema","drizzle","connectWithReconnect","adapter","payload","reconnect","result","pool","connect","ignore","setTimeout","logger","info","prependListener","err","code","options","hotReload","schema","pgSchema","tables","relations","enums","pg","Pool","poolOptions","client","process","env","PAYLOAD_DROP_DATABASE","schemaName","dropDatabase","error","Error","String","message","match","disableCreateDatabase","charAt","toUpperCase","slice","isCreated","createDatabase","msg","rejectInitializing","exit","createExtensions","NODE_ENV","PAYLOAD_MIGRATING","push","resolveInitializing","prodMigrations","migrate","migrations"],"mappings":"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"}