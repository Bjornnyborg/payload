{"version":3,"sources":["../src/getClientUploadRoute.ts"],"sourcesContent":["import {\n  APIError,\n  Forbidden,\n  type PayloadHandler,\n  type PayloadRequest,\n  type UploadCollectionSlug,\n} from 'payload'\n\ntype Args = {\n  access?: (args: {\n    collectionSlug: UploadCollectionSlug\n    req: PayloadRequest\n  }) => boolean | Promise<boolean>\n  acl: 'private' | 'public-read'\n  routerInputConfig?: FileRouterInputConfig\n  token?: string\n}\n\nconst defaultAccess: Args['access'] = ({ req }) => !!req.user\n\nimport type { FileRouter } from 'uploadthing/server'\n\nimport { createRouteHandler } from 'uploadthing/next'\nimport { createUploadthing } from 'uploadthing/server'\n\nimport type { FileRouterInputConfig } from './index.js'\n\nexport const getClientUploadRoute = ({\n  access = defaultAccess,\n  acl,\n  routerInputConfig = {},\n  token,\n}: Args): PayloadHandler => {\n  const f = createUploadthing()\n\n  const uploadRouter = {\n    uploader: f({\n      ...routerInputConfig,\n      blob: {\n        acl,\n        maxFileCount: 1,\n        maxFileSize: '512MB',\n        ...('blob' in routerInputConfig ? routerInputConfig.blob : {}),\n      },\n    })\n      .middleware(async ({ req: rawReq }) => {\n        const req = rawReq as PayloadRequest\n\n        const collectionSlug = req.searchParams.get('collectionSlug')\n\n        if (!collectionSlug) {\n          throw new APIError('No payload was provided')\n        }\n\n        if (!(await access({ collectionSlug, req }))) {\n          throw new Forbidden()\n        }\n\n        return {}\n      })\n      .onUploadComplete(() => {}),\n  } satisfies FileRouter\n\n  const { POST } = createRouteHandler({ config: { token }, router: uploadRouter })\n\n  return async (req) => {\n    return POST(req)\n  }\n}\n"],"names":["APIError","Forbidden","defaultAccess","req","user","createRouteHandler","createUploadthing","getClientUploadRoute","access","acl","routerInputConfig","token","f","uploadRouter","uploader","blob","maxFileCount","maxFileSize","middleware","rawReq","collectionSlug","searchParams","get","onUploadComplete","POST","config","router"],"mappings":"AAAA,SACEA,QAAQ,EACRC,SAAS,QAIJ,UAAS;AAYhB,MAAMC,gBAAgC,CAAC,EAAEC,GAAG,EAAE,GAAK,CAAC,CAACA,IAAIC,IAAI;AAI7D,SAASC,kBAAkB,QAAQ,mBAAkB;AACrD,SAASC,iBAAiB,QAAQ,qBAAoB;AAItD,OAAO,MAAMC,uBAAuB,CAAC,EACnCC,SAASN,aAAa,EACtBO,GAAG,EACHC,oBAAoB,CAAC,CAAC,EACtBC,KAAK,EACA;IACL,MAAMC,IAAIN;IAEV,MAAMO,eAAe;QACnBC,UAAUF,EAAE;YACV,GAAGF,iBAAiB;YACpBK,MAAM;gBACJN;gBACAO,cAAc;gBACdC,aAAa;gBACb,GAAI,UAAUP,oBAAoBA,kBAAkBK,IAAI,GAAG,CAAC,CAAC;YAC/D;QACF,GACGG,UAAU,CAAC,OAAO,EAAEf,KAAKgB,MAAM,EAAE;YAChC,MAAMhB,MAAMgB;YAEZ,MAAMC,iBAAiBjB,IAAIkB,YAAY,CAACC,GAAG,CAAC;YAE5C,IAAI,CAACF,gBAAgB;gBACnB,MAAM,IAAIpB,SAAS;YACrB;YAEA,IAAI,CAAE,MAAMQ,OAAO;gBAAEY;gBAAgBjB;YAAI,IAAK;gBAC5C,MAAM,IAAIF;YACZ;YAEA,OAAO,CAAC;QACV,GACCsB,gBAAgB,CAAC,KAAO;IAC7B;IAEA,MAAM,EAAEC,IAAI,EAAE,GAAGnB,mBAAmB;QAAEoB,QAAQ;YAAEd;QAAM;QAAGe,QAAQb;IAAa;IAE9E,OAAO,OAAOV;QACZ,OAAOqB,KAAKrB;IACd;AACF,EAAC"}