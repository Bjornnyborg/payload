{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  Adapter,\n  ClientUploadsAccess,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { Config, Field, Plugin, UploadCollectionSlug } from 'payload'\nimport type { createUploadthing } from 'uploadthing/server'\nimport type { UTApiOptions } from 'uploadthing/types'\n\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\nimport { initClientUploads } from '@payloadcms/plugin-cloud-storage/utilities'\nimport { UTApi } from 'uploadthing/server'\n\nimport { generateURL } from './generateURL.js'\nimport { getClientUploadRoute } from './getClientUploadRoute.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\n\nexport type FileRouterInputConfig = Parameters<ReturnType<typeof createUploadthing>>[0]\n\nexport type UploadthingStorageOptions = {\n  /**\n   * Do uploads directly on the client, to bypass limits on Vercel.\n   */\n  clientUploads?:\n    | {\n        access?: ClientUploadsAccess\n        routerInputConfig?: FileRouterInputConfig\n      }\n    | boolean\n\n  /**\n   * Collection options to apply the adapter to.\n   */\n  collections: Partial<Record<UploadCollectionSlug, Omit<CollectionOptions, 'adapter'> | true>>\n\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n\n  /**\n   * Uploadthing Options\n   */\n  options: {\n    /**\n     * @default 'public-read'\n     */\n    acl?: ACL\n  } & UTApiOptions\n}\n\ntype UploadthingPlugin = (uploadthingStorageOptions: UploadthingStorageOptions) => Plugin\n\n/** NOTE: not synced with uploadthing's internal types. Need to modify if more options added */\nexport type ACL = 'private' | 'public-read'\n\nexport const uploadthingStorage: UploadthingPlugin =\n  (uploadthingStorageOptions: UploadthingStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    const isPluginDisabled = uploadthingStorageOptions.enabled === false\n\n    initClientUploads({\n      clientHandler: '@payloadcms/storage-uploadthing/client#UploadthingClientUploadHandler',\n      collections: uploadthingStorageOptions.collections,\n      config: incomingConfig,\n      enabled: !isPluginDisabled && Boolean(uploadthingStorageOptions.clientUploads),\n      serverHandler: getClientUploadRoute({\n        access:\n          typeof uploadthingStorageOptions.clientUploads === 'object'\n            ? uploadthingStorageOptions.clientUploads.access\n            : undefined,\n        acl: uploadthingStorageOptions.options.acl || 'public-read',\n        routerInputConfig:\n          typeof uploadthingStorageOptions.clientUploads === 'object'\n            ? uploadthingStorageOptions.clientUploads.routerInputConfig\n            : undefined,\n        token: uploadthingStorageOptions.options.token,\n      }),\n      serverHandlerPath: '/storage-uploadthing-client-upload-route',\n    })\n\n    if (isPluginDisabled) {\n      return incomingConfig\n    }\n\n    // Default ACL to public-read\n    if (!uploadthingStorageOptions.options.acl) {\n      uploadthingStorageOptions.options.acl = 'public-read'\n    }\n\n    const adapter = uploadthingInternal(uploadthingStorageOptions)\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      uploadthingStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n\n          // Disable payload access control if the ACL is public-read or not set\n          // ...(uploadthingStorageOptions.options.acl === 'public-read'\n          //   ? { disablePayloadAccessControl: true }\n          //   : {}),\n\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction uploadthingInternal(options: UploadthingStorageOptions): Adapter {\n  const fields: Field[] = [\n    {\n      name: '_key',\n      type: 'text',\n      admin: {\n        hidden: true,\n      },\n    },\n  ]\n\n  return (): GeneratedAdapter => {\n    const {\n      clientUploads,\n      options: { acl = 'public-read', ...utOptions },\n    } = options\n\n    const utApi = new UTApi(utOptions)\n\n    return {\n      name: 'uploadthing',\n      clientUploads,\n      fields,\n      generateURL,\n      handleDelete: getHandleDelete({ utApi }),\n      handleUpload: getHandleUpload({ acl, utApi }),\n      staticHandler: getHandler({ utApi }),\n    }\n  }\n}\n"],"names":["cloudStoragePlugin","initClientUploads","UTApi","generateURL","getClientUploadRoute","getHandleDelete","getHandleUpload","getHandler","uploadthingStorage","uploadthingStorageOptions","incomingConfig","isPluginDisabled","enabled","clientHandler","collections","config","Boolean","clientUploads","serverHandler","access","undefined","acl","options","routerInputConfig","token","serverHandlerPath","adapter","uploadthingInternal","collectionsWithAdapter","Object","entries","reduce","acc","slug","collOptions","map","collection","upload","disableLocalStorage","fields","name","type","admin","hidden","utOptions","utApi","handleDelete","handleUpload","staticHandler"],"mappings":"AAWA,SAASA,kBAAkB,QAAQ,mCAAkC;AACrE,SAASC,iBAAiB,QAAQ,6CAA4C;AAC9E,SAASC,KAAK,QAAQ,qBAAoB;AAE1C,SAASC,WAAW,QAAQ,mBAAkB;AAC9C,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,UAAU,QAAQ,qBAAoB;AA2C/C,OAAO,MAAMC,qBACX,CAACC,4BACD,CAACC;QACC,MAAMC,mBAAmBF,0BAA0BG,OAAO,KAAK;QAE/DX,kBAAkB;YAChBY,eAAe;YACfC,aAAaL,0BAA0BK,WAAW;YAClDC,QAAQL;YACRE,SAAS,CAACD,oBAAoBK,QAAQP,0BAA0BQ,aAAa;YAC7EC,eAAed,qBAAqB;gBAClCe,QACE,OAAOV,0BAA0BQ,aAAa,KAAK,WAC/CR,0BAA0BQ,aAAa,CAACE,MAAM,GAC9CC;gBACNC,KAAKZ,0BAA0Ba,OAAO,CAACD,GAAG,IAAI;gBAC9CE,mBACE,OAAOd,0BAA0BQ,aAAa,KAAK,WAC/CR,0BAA0BQ,aAAa,CAACM,iBAAiB,GACzDH;gBACNI,OAAOf,0BAA0Ba,OAAO,CAACE,KAAK;YAChD;YACAC,mBAAmB;QACrB;QAEA,IAAId,kBAAkB;YACpB,OAAOD;QACT;QAEA,6BAA6B;QAC7B,IAAI,CAACD,0BAA0Ba,OAAO,CAACD,GAAG,EAAE;YAC1CZ,0BAA0Ba,OAAO,CAACD,GAAG,GAAG;QAC1C;QAEA,MAAMK,UAAUC,oBAAoBlB;QAEpC,+CAA+C;QAC/C,MAAMmB,yBAAmEC,OAAOC,OAAO,CACrFrB,0BAA0BK,WAAW,EACrCiB,MAAM,CACN,CAACC,KAAK,CAACC,MAAMC,YAAY,GAAM,CAAA;gBAC7B,GAAGF,GAAG;gBACN,CAACC,KAAK,EAAE;oBACN,GAAIC,gBAAgB,OAAO,CAAC,IAAIA,WAAW;oBAE3C,sEAAsE;oBACtE,8DAA8D;oBAC9D,4CAA4C;oBAC5C,WAAW;oBAEXR;gBACF;YACF,CAAA,GACA,CAAC;QAGH,gFAAgF;QAChF,MAAMX,SAAS;YACb,GAAGL,cAAc;YACjBI,aAAa,AAACJ,CAAAA,eAAeI,WAAW,IAAI,EAAE,AAAD,EAAGqB,GAAG,CAAC,CAACC;gBACnD,IAAI,CAACR,sBAAsB,CAACQ,WAAWH,IAAI,CAAC,EAAE;oBAC5C,OAAOG;gBACT;gBAEA,OAAO;oBACL,GAAGA,UAAU;oBACbC,QAAQ;wBACN,GAAI,OAAOD,WAAWC,MAAM,KAAK,WAAWD,WAAWC,MAAM,GAAG,CAAC,CAAC;wBAClEC,qBAAqB;oBACvB;gBACF;YACF;QACF;QAEA,OAAOtC,mBAAmB;YACxBc,aAAac;QACf,GAAGb;IACL,EAAC;AAEH,SAASY,oBAAoBL,OAAkC;IAC7D,MAAMiB,SAAkB;QACtB;YACEC,MAAM;YACNC,MAAM;YACNC,OAAO;gBACLC,QAAQ;YACV;QACF;KACD;IAED,OAAO;QACL,MAAM,EACJ1B,aAAa,EACbK,SAAS,EAAED,MAAM,aAAa,EAAE,GAAGuB,WAAW,EAC/C,GAAGtB;QAEJ,MAAMuB,QAAQ,IAAI3C,MAAM0C;QAExB,OAAO;YACLJ,MAAM;YACNvB;YACAsB;YACApC;YACA2C,cAAczC,gBAAgB;gBAAEwC;YAAM;YACtCE,cAAczC,gBAAgB;gBAAEe;gBAAKwB;YAAM;YAC3CG,eAAezC,WAAW;gBAAEsC;YAAM;QACpC;IACF;AACF"}