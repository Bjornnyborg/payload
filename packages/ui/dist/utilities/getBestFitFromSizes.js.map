{"version":3,"file":"getBestFitFromSizes.js","names":["getBestFitFromSizes","sizes","targetSizeMax","targetSizeMin","thumbnailURL","url","width","bestFit","Object","values","reduce","closest","current","original"],"sources":["../../src/utilities/getBestFitFromSizes.ts"],"sourcesContent":["/**\n * Takes image sizes and a target range and returns the url of the image within that range.\n * If no images fit within the range, it selects the next smallest adequate image, the original,\n * or the largest smaller image if no better fit exists.\n *\n * @param sizes The given FileSizes.\n * @param targetSizeMax The ideal image maximum width. Defaults to 180.\n * @param targetSizeMin The ideal image minimum width. Defaults to 40.\n * @param thumbnailURL The thumbnail url set in config. If passed a url, will return early with it.\n * @param url The url of the original file.\n * @param width The width of the original file.\n * @returns A url of the best fit file.\n */\nexport const getBestFitFromSizes = ({\n  sizes,\n  targetSizeMax = 180,\n  targetSizeMin = 40,\n  thumbnailURL,\n  url,\n  width,\n}: {\n  sizes?: Record<string, { url?: string; width?: number }>\n  targetSizeMax?: number\n  targetSizeMin?: number\n  thumbnailURL?: string\n  url: string\n  width?: number\n}) => {\n  if (thumbnailURL) {\n    return thumbnailURL\n  }\n\n  if (!sizes) {\n    return url\n  }\n\n  const bestFit = Object.values(sizes).reduce<{\n    original?: boolean\n    url?: string\n    width?: number\n  }>(\n    (closest, current) => {\n      if (!current.width || current.width < targetSizeMin) {\n        return closest\n      }\n\n      if (current.width >= targetSizeMin && current.width <= targetSizeMax) {\n        return !closest.width ||\n          current.width < closest.width ||\n          closest.width < targetSizeMin ||\n          closest.width > targetSizeMax\n          ? current\n          : closest\n      }\n\n      if (\n        !closest.width ||\n        (!closest.original && closest.width < targetSizeMin && current.width > closest.width) ||\n        (closest.width > targetSizeMax && current.width < closest.width)\n      ) {\n        return current\n      }\n\n      return closest\n    },\n    { original: true, url, width },\n  )\n\n  return bestFit.url || url\n}\n"],"mappings":"AAAA;;;;;;;;;;;;GAaA,OAAO,MAAMA,mBAAA,GAAsBA,CAAC;EAClCC,KAAK;EACLC,aAAA,GAAgB,GAAG;EACnBC,aAAA,GAAgB,EAAE;EAClBC,YAAY;EACZC,GAAG;EACHC;AAAK,CAQN;EACC,IAAIF,YAAA,EAAc;IAChB,OAAOA,YAAA;EACT;EAEA,IAAI,CAACH,KAAA,EAAO;IACV,OAAOI,GAAA;EACT;EAEA,MAAME,OAAA,GAAUC,MAAA,CAAOC,MAAM,CAACR,KAAA,EAAOS,MAAM,CAKzC,CAACC,OAAA,EAASC,OAAA;IACR,IAAI,CAACA,OAAA,CAAQN,KAAK,IAAIM,OAAA,CAAQN,KAAK,GAAGH,aAAA,EAAe;MACnD,OAAOQ,OAAA;IACT;IAEA,IAAIC,OAAA,CAAQN,KAAK,IAAIH,aAAA,IAAiBS,OAAA,CAAQN,KAAK,IAAIJ,aAAA,EAAe;MACpE,OAAO,CAACS,OAAA,CAAQL,KAAK,IACnBM,OAAA,CAAQN,KAAK,GAAGK,OAAA,CAAQL,KAAK,IAC7BK,OAAA,CAAQL,KAAK,GAAGH,aAAA,IAChBQ,OAAA,CAAQL,KAAK,GAAGJ,aAAA,GACdU,OAAA,GACAD,OAAA;IACN;IAEA,IACE,CAACA,OAAA,CAAQL,KAAK,IACb,CAACK,OAAA,CAAQE,QAAQ,IAAIF,OAAA,CAAQL,KAAK,GAAGH,aAAA,IAAiBS,OAAA,CAAQN,KAAK,GAAGK,OAAA,CAAQL,KAAK,IACnFK,OAAA,CAAQL,KAAK,GAAGJ,aAAA,IAAiBU,OAAA,CAAQN,KAAK,GAAGK,OAAA,CAAQL,KAAK,EAC/D;MACA,OAAOM,OAAA;IACT;IAEA,OAAOD,OAAA;EACT,GACA;IAAEE,QAAA,EAAU;IAAMR,GAAA;IAAKC;EAAM;EAG/B,OAAOC,OAAA,CAAQF,GAAG,IAAIA,GAAA;AACxB","ignoreList":[]}