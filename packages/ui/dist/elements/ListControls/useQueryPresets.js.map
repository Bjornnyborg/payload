{"version":3,"file":"useQueryPresets.js","names":["useModal","getTranslation","transformColumnsToPreferences","transformColumnsToSearchParams","React","Fragment","useCallback","useMemo","toast","useConfig","useListQuery","useTranslation","ConfirmationModal","useDocumentDrawer","useListDrawer","PopupList","PopupListGroupLabel","Translation","confirmDeletePresetModalSlug","queryPresetsSlug","useQueryPresets","activePreset","collectionSlug","queryPresetPermissions","modified","query","refineListData","setModified","setQueryModified","i18n","t","openModal","config","routes","api","apiRoute","getEntityConfig","presetConfig","PresetDocumentDrawer","openDrawer","openDocumentDrawer","id","CreateNewPresetDrawer","closeDrawer","closeCreateNewDrawer","openCreateNewDrawer","filterOptions","relatedCollection","equals","ListDrawer","closeListDrawer","openListDrawer","collectionSlugs","selectedCollection","handlePresetChange","preset","columns","undefined","where","resetQueryPreset","handleDeletePreset","fetch","method","then","res","json","status","success","label","labels","singular","title","errors","forEach","error","message","_err","saveCurrentChanges","body","JSON","stringify","credentials","headers","queryPresetMenuItems","menuItems","_jsx","plural","push","Button","onClick","update","isShared","delete","_jsxs","initialData","onSave","doc","redirectAfterCreate","DeletePresetModal","elements","1","children","i18nKey","variables","confirmingLabel","heading","modalSlug","onConfirm","EditPresetDrawer","onDelete","onDuplicate","hasModifiedPreset","openPresetListDrawer","PresetListDrawer","allowCreate","disableQueryPresets","onSelect","resetPreset"],"sources":["../../../src/elements/ListControls/useQueryPresets.tsx"],"sourcesContent":["import type { CollectionSlug, QueryPreset, SanitizedCollectionPermission } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { transformColumnsToPreferences, transformColumnsToSearchParams } from 'payload/shared'\nimport React, { Fragment, useCallback, useMemo } from 'react'\nimport { toast } from 'sonner'\n\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useListQuery } from '../../providers/ListQuery/context.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { ConfirmationModal } from '../ConfirmationModal/index.js'\nimport { useDocumentDrawer } from '../DocumentDrawer/index.js'\nimport { useListDrawer } from '../ListDrawer/index.js'\nimport { PopupList } from '../Popup/index.js'\nimport { PopupListGroupLabel } from '../Popup/PopupGroupLabel/index.js'\nimport { Translation } from '../Translation/index.js'\n\nconst confirmDeletePresetModalSlug = 'confirm-delete-preset'\n\nconst queryPresetsSlug = 'payload-query-presets'\n\nexport const useQueryPresets = ({\n  activePreset,\n  collectionSlug,\n  queryPresetPermissions,\n}: {\n  activePreset: QueryPreset\n  collectionSlug: CollectionSlug\n  queryPresetPermissions: SanitizedCollectionPermission\n}): {\n  CreateNewPresetDrawer: React.ReactNode\n  DeletePresetModal: React.ReactNode\n  EditPresetDrawer: React.ReactNode\n  hasModifiedPreset: boolean\n  openPresetListDrawer: () => void\n  PresetListDrawer: React.ReactNode\n  queryPresetMenuItems: React.ReactNode[]\n  resetPreset: () => Promise<void>\n} => {\n  const { modified, query, refineListData, setModified: setQueryModified } = useListQuery()\n\n  const { i18n, t } = useTranslation()\n  const { openModal } = useModal()\n\n  const {\n    config: {\n      routes: { api: apiRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const presetConfig = getEntityConfig({ collectionSlug: queryPresetsSlug })\n\n  const [PresetDocumentDrawer, , { openDrawer: openDocumentDrawer }] = useDocumentDrawer({\n    id: activePreset?.id,\n    collectionSlug: queryPresetsSlug,\n  })\n\n  const [\n    CreateNewPresetDrawer,\n    ,\n    { closeDrawer: closeCreateNewDrawer, openDrawer: openCreateNewDrawer },\n  ] = useDocumentDrawer({\n    collectionSlug: queryPresetsSlug,\n  })\n\n  const filterOptions = useMemo(\n    () => ({\n      'payload-query-presets': {\n        relatedCollection: {\n          equals: collectionSlug,\n        },\n      },\n    }),\n    [collectionSlug],\n  )\n\n  const [ListDrawer, , { closeDrawer: closeListDrawer, openDrawer: openListDrawer }] =\n    useListDrawer({\n      collectionSlugs: [queryPresetsSlug],\n      filterOptions,\n      selectedCollection: queryPresetsSlug,\n    })\n\n  const handlePresetChange = useCallback(\n    async (preset: QueryPreset) => {\n      await refineListData(\n        {\n          columns: preset.columns ? transformColumnsToSearchParams(preset.columns) : undefined,\n          preset: preset.id,\n          where: preset.where,\n        },\n        false,\n      )\n    },\n    [refineListData],\n  )\n\n  const resetQueryPreset = useCallback(async () => {\n    await refineListData(\n      {\n        columns: undefined,\n        preset: undefined,\n        where: undefined,\n      },\n      false,\n    )\n  }, [refineListData])\n\n  const handleDeletePreset = useCallback(async () => {\n    try {\n      await fetch(`${apiRoute}/${queryPresetsSlug}/${activePreset.id}`, {\n        method: 'DELETE',\n      }).then(async (res) => {\n        try {\n          const json = await res.json()\n\n          if (res.status < 400) {\n            toast.success(\n              t('general:titleDeleted', {\n                label: getTranslation(presetConfig?.labels?.singular, i18n),\n                title: activePreset.title,\n              }),\n            )\n\n            await resetQueryPreset()\n          } else {\n            if (json.errors) {\n              json.errors.forEach((error) => toast.error(error.message))\n            } else {\n              toast.error(t('error:deletingTitle', { title: activePreset.title }))\n            }\n          }\n        } catch (_err) {\n          toast.error(t('error:deletingTitle', { title: activePreset.title }))\n        }\n      })\n    } catch (_err) {\n      toast.error(t('error:deletingTitle', { title: activePreset.title }))\n    }\n  }, [apiRoute, activePreset?.id, activePreset?.title, t, presetConfig, i18n, resetQueryPreset])\n\n  const saveCurrentChanges = useCallback(async () => {\n    try {\n      await fetch(`${apiRoute}/payload-query-presets/${activePreset.id}`, {\n        body: JSON.stringify({\n          columns: transformColumnsToPreferences(query.columns),\n          where: query.where,\n        }),\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'PATCH',\n      }).then(async (res) => {\n        try {\n          const json = await res.json()\n\n          if (res.status < 400) {\n            toast.success(\n              t('general:updatedLabelSuccessfully', {\n                label: getTranslation(presetConfig?.labels?.singular, i18n),\n              }),\n            )\n\n            setQueryModified(false)\n          } else {\n            if (json.errors) {\n              json.errors.forEach((error) => toast.error(error.message))\n            } else {\n              toast.error(t('error:unknown'))\n            }\n          }\n        } catch (_err) {\n          toast.error(t('error:unknown'))\n        }\n      })\n    } catch (_err) {\n      toast.error(t('error:unknown'))\n    }\n  }, [\n    apiRoute,\n    activePreset?.id,\n    query.columns,\n    query.where,\n    t,\n    presetConfig?.labels?.singular,\n    i18n,\n    setQueryModified,\n  ])\n\n  // Memoize so that components aren't re-rendered on query and column changes\n  const queryPresetMenuItems = useMemo(() => {\n    const menuItems: React.ReactNode[] = [\n      <PopupListGroupLabel\n        key=\"preset-group-label\"\n        label={getTranslation(presetConfig?.labels?.plural, i18n)}\n      />,\n    ]\n\n    if (activePreset && modified) {\n      menuItems.push(\n        <PopupList.Button\n          onClick={async () => {\n            await refineListData(\n              {\n                columns: transformColumnsToSearchParams(activePreset.columns),\n                where: activePreset.where,\n              },\n              false,\n            )\n          }}\n        >\n          {t('general:reset')}\n        </PopupList.Button>,\n      )\n\n      if (queryPresetPermissions.update) {\n        menuItems.push(\n          <PopupList.Button\n            onClick={async () => {\n              await saveCurrentChanges()\n            }}\n          >\n            {activePreset.isShared ? t('general:updateForEveryone') : t('general:save')}\n          </PopupList.Button>,\n        )\n      }\n    }\n\n    menuItems.push(\n      <PopupList.Button\n        onClick={() => {\n          openCreateNewDrawer()\n        }}\n      >\n        {t('general:createNew')}\n      </PopupList.Button>,\n    )\n\n    if (activePreset && queryPresetPermissions?.delete) {\n      menuItems.push(\n        <Fragment>\n          <PopupList.Button onClick={() => openModal(confirmDeletePresetModalSlug)}>\n            {t('general:delete')}\n          </PopupList.Button>\n          <PopupList.Button\n            onClick={() => {\n              openDocumentDrawer()\n            }}\n          >\n            {t('general:edit')}\n          </PopupList.Button>\n        </Fragment>,\n      )\n    }\n\n    return menuItems\n  }, [\n    activePreset,\n    queryPresetPermissions?.delete,\n    queryPresetPermissions?.update,\n    openCreateNewDrawer,\n    openDocumentDrawer,\n    openModal,\n    saveCurrentChanges,\n    t,\n    refineListData,\n    modified,\n    presetConfig?.labels?.plural,\n    i18n,\n  ])\n\n  return {\n    CreateNewPresetDrawer: (\n      <CreateNewPresetDrawer\n        initialData={{\n          columns: transformColumnsToPreferences(query.columns),\n          relatedCollection: collectionSlug,\n          where: query.where,\n        }}\n        onSave={async ({ doc }) => {\n          closeCreateNewDrawer()\n          await handlePresetChange(doc as QueryPreset)\n        }}\n        redirectAfterCreate={false}\n      />\n    ),\n    DeletePresetModal: (\n      <ConfirmationModal\n        body={\n          <Translation\n            elements={{\n              '1': ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"general:aboutToDelete\"\n            t={t}\n            variables={{\n              label: presetConfig?.labels?.singular,\n              title: activePreset?.title,\n            }}\n          />\n        }\n        confirmingLabel={t('general:deleting')}\n        heading={t('general:confirmDeletion')}\n        modalSlug={confirmDeletePresetModalSlug}\n        onConfirm={handleDeletePreset}\n      />\n    ),\n    EditPresetDrawer: (\n      <PresetDocumentDrawer\n        onDelete={() => {\n          // setSelectedPreset(undefined)\n        }}\n        onDuplicate={async ({ doc }) => {\n          await handlePresetChange(doc as QueryPreset)\n        }}\n        onSave={async ({ doc }) => {\n          await handlePresetChange(doc as QueryPreset)\n        }}\n      />\n    ),\n    hasModifiedPreset: modified,\n    openPresetListDrawer: openListDrawer,\n    PresetListDrawer: (\n      <ListDrawer\n        allowCreate={false}\n        disableQueryPresets\n        onSelect={async ({ doc }) => {\n          closeListDrawer()\n          await handlePresetChange(doc as QueryPreset)\n        }}\n      />\n    ),\n    queryPresetMenuItems,\n    resetPreset: resetQueryPreset,\n  }\n}\n"],"mappings":"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","ignoreList":[]}