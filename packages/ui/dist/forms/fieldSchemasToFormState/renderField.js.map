{"version":3,"file":"renderField.js","names":["getTranslation","createClientField","MissingEditorProp","fieldIsHiddenOrDisabled","RenderServerComponent","FieldDescription","WatchCondition","defaultUIFieldComponentKeys","renderField","id","clientFieldSchemaMap","collectionSlug","data","fieldConfig","fieldSchemaMap","fieldState","formState","indexPath","lastRenderedPath","mockRSCs","operation","parentPath","parentSchemaPath","path","permissions","preferences","renderAllFields","req","schemaPath","siblingData","requiresRender","type","clientField","get","defaultIDType","payload","config","db","field","i18n","importMap","clientProps","readOnly","customComponents","includes","serverProps","user","rows","forEach","row","rowIndex","rowLastRenderedPath","rowPath","rowRequiresRender","admin","components","RowLabel","Component","key","rowLabel","labels","singular","String","padStart","rowNumber","blockTypeToMatch","blockType","blockConfig","blocks","blockReferences","find","block","slug","Label","Object","keys","length","description","editor","Error","Field","_jsx","FieldComponent","Description","t","AfterInput","afterInput","BeforeInput","beforeInput"],"sources":["../../../src/forms/fieldSchemasToFormState/renderField.tsx"],"sourcesContent":["import type {\n  ClientComponentProps,\n  ClientField,\n  FieldPaths,\n  FlattenedBlock,\n  ServerComponentProps,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { createClientField, MissingEditorProp } from 'payload'\nimport { fieldIsHiddenOrDisabled } from 'payload/shared'\n\nimport type { RenderFieldMethod } from './types.js'\n\nimport { RenderServerComponent } from '../../elements/RenderServerComponent/index.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir -- need this to reference already existing bundle. Otherwise, bundle size increases., payload/no-imports-from-exports-dir\nimport { FieldDescription, WatchCondition } from '../../exports/client/index.js'\n\nconst defaultUIFieldComponentKeys: Array<'Cell' | 'Description' | 'Field' | 'Filter'> = [\n  'Cell',\n  'Description',\n  'Field',\n  'Filter',\n]\n\nexport const renderField: RenderFieldMethod = ({\n  id,\n  clientFieldSchemaMap,\n  collectionSlug,\n  data,\n  fieldConfig,\n  fieldSchemaMap,\n  fieldState,\n  formState,\n  indexPath,\n  lastRenderedPath,\n  mockRSCs,\n  operation,\n  parentPath,\n  parentSchemaPath,\n  path,\n  permissions,\n  preferences,\n  renderAllFields,\n  req,\n  schemaPath,\n  siblingData,\n}) => {\n  const requiresRender = renderAllFields || !lastRenderedPath || lastRenderedPath !== path\n\n  if (!requiresRender && fieldConfig.type !== 'array' && fieldConfig.type !== 'blocks') {\n    return\n  }\n\n  const clientField = clientFieldSchemaMap\n    ? (clientFieldSchemaMap.get(schemaPath) as ClientField)\n    : createClientField({\n        defaultIDType: req.payload.config.db.defaultIDType,\n        field: fieldConfig,\n        i18n: req.i18n,\n        importMap: req.payload.importMap,\n      })\n\n  const clientProps: ClientComponentProps & Partial<FieldPaths> = {\n    field: clientField,\n    path,\n    permissions,\n    readOnly: typeof permissions === 'boolean' ? !permissions : !permissions?.[operation],\n    schemaPath,\n  }\n\n  if (fieldState?.customComponents) {\n    clientProps.customComponents = fieldState.customComponents\n  }\n\n  // fields with subfields\n  if (['array', 'blocks', 'collapsible', 'group', 'row', 'tabs'].includes(fieldConfig.type)) {\n    clientProps.indexPath = indexPath\n    clientProps.parentPath = parentPath\n    clientProps.parentSchemaPath = parentSchemaPath\n  }\n\n  const serverProps: ServerComponentProps = {\n    id,\n    clientField,\n    clientFieldSchemaMap,\n    data,\n    field: fieldConfig,\n    fieldSchemaMap,\n    permissions,\n    // TODO: Should we pass explicit values? initialValue, value, valid\n    // value and initialValue should be typed\n    collectionSlug,\n    formState,\n    i18n: req.i18n,\n    operation,\n    payload: req.payload,\n    preferences,\n    req,\n    siblingData,\n    user: req.user,\n  }\n\n  switch (fieldConfig.type) {\n    case 'array': {\n      fieldState?.rows?.forEach((row, rowIndex) => {\n        const rowLastRenderedPath = row.lastRenderedPath\n\n        const rowPath = `${path}.${rowIndex}`\n\n        const rowRequiresRender =\n          renderAllFields || !rowLastRenderedPath || rowLastRenderedPath !== rowPath\n\n        if (!rowRequiresRender) {\n          return\n        }\n\n        row.lastRenderedPath = rowPath\n\n        if (fieldConfig.admin?.components && 'RowLabel' in fieldConfig.admin.components) {\n          if (!row.customComponents) {\n            row.customComponents = {}\n          }\n\n          row.customComponents.RowLabel = !mockRSCs\n            ? RenderServerComponent({\n                clientProps,\n                Component: fieldConfig.admin.components.RowLabel,\n                importMap: req.payload.importMap,\n                key: `${rowIndex}`,\n                serverProps: {\n                  ...serverProps,\n                  rowLabel: `${getTranslation(fieldConfig.labels.singular, req.i18n)} ${String(\n                    rowIndex + 1,\n                  ).padStart(2, '0')}`,\n                  rowNumber: rowIndex + 1,\n                },\n              })\n            : 'Mock'\n        }\n      })\n\n      break\n    }\n\n    case 'blocks': {\n      fieldState?.rows?.forEach((row, rowIndex) => {\n        const rowLastRenderedPath = row.lastRenderedPath\n\n        const rowPath = `${path}.${rowIndex}`\n\n        const rowRequiresRender =\n          renderAllFields || !rowLastRenderedPath || rowLastRenderedPath !== rowPath\n\n        if (!rowRequiresRender) {\n          return\n        }\n\n        row.lastRenderedPath = rowPath\n\n        const blockTypeToMatch: string = row.blockType\n\n        const blockConfig =\n          req.payload.blocks[blockTypeToMatch] ??\n          ((fieldConfig.blockReferences ?? fieldConfig.blocks).find(\n            (block) => typeof block !== 'string' && block.slug === blockTypeToMatch,\n          ) as FlattenedBlock | undefined)\n\n        if (blockConfig.admin?.components && 'Label' in blockConfig.admin.components) {\n          if (!fieldState.rows[rowIndex]?.customComponents) {\n            fieldState.rows[rowIndex].customComponents = {}\n          }\n\n          fieldState.rows[rowIndex].customComponents.RowLabel = !mockRSCs\n            ? RenderServerComponent({\n                clientProps,\n                Component: blockConfig.admin.components.Label,\n                importMap: req.payload.importMap,\n                key: `${rowIndex}`,\n                serverProps: {\n                  ...serverProps,\n                  blockType: row.blockType,\n                  rowLabel: `${getTranslation(blockConfig.labels.singular, req.i18n)} ${String(\n                    rowIndex + 1,\n                  ).padStart(2, '0')}`,\n                  rowNumber: rowIndex + 1,\n                },\n              })\n            : 'Mock'\n        }\n      })\n\n      break\n    }\n  }\n\n  if (!requiresRender) {\n    return\n  }\n\n  /**\n   * Set the `lastRenderedPath` equal to the new path of the field, this will prevent it from being rendered again\n   */\n  fieldState.lastRenderedPath = path\n\n  if (fieldIsHiddenOrDisabled(clientField)) {\n    return\n  }\n\n  /**\n   * Only create the `customComponents` object if needed.\n   * This will prevent unnecessary data from being transferred to the client.\n   */\n  if (fieldConfig.admin) {\n    if (\n      (Object.keys(fieldConfig.admin.components || {}).length > 0 ||\n        fieldConfig.type === 'richText' ||\n        ('description' in fieldConfig.admin &&\n          typeof fieldConfig.admin.description === 'function')) &&\n      !fieldState?.customComponents\n    ) {\n      fieldState.customComponents = {}\n    }\n  }\n\n  switch (fieldConfig.type) {\n    case 'richText': {\n      if (!fieldConfig?.editor) {\n        throw new MissingEditorProp(fieldConfig) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n      }\n\n      if (typeof fieldConfig?.editor === 'function') {\n        throw new Error('Attempted to access unsanitized rich text editor.')\n      }\n\n      if (!fieldConfig.admin) {\n        fieldConfig.admin = {}\n      }\n\n      if (!fieldConfig.admin.components) {\n        fieldConfig.admin.components = {}\n      }\n\n      fieldState.customComponents.Field = !mockRSCs ? (\n        <WatchCondition path={path}>\n          {RenderServerComponent({\n            clientProps,\n            Component: fieldConfig.editor.FieldComponent,\n            importMap: req.payload.importMap,\n            serverProps,\n          })}\n        </WatchCondition>\n      ) : (\n        'Mock'\n      )\n\n      break\n    }\n\n    case 'ui': {\n      if (fieldConfig?.admin?.components) {\n        // Render any extra, untyped components\n        for (const key in fieldConfig.admin.components) {\n          if (key in defaultUIFieldComponentKeys) {\n            continue\n          }\n\n          const Component = fieldConfig.admin.components[key]\n\n          fieldState.customComponents[key] = !mockRSCs\n            ? RenderServerComponent({\n                clientProps,\n                Component,\n                importMap: req.payload.importMap,\n                key: `field.admin.components.${key}`,\n                serverProps,\n              })\n            : 'Mock'\n        }\n      }\n      break\n    }\n\n    default: {\n      break\n    }\n  }\n\n  if (fieldConfig.admin) {\n    if (\n      'description' in fieldConfig.admin &&\n      typeof fieldConfig.admin?.description === 'function'\n    ) {\n      fieldState.customComponents.Description = !mockRSCs ? (\n        <FieldDescription\n          description={fieldConfig.admin?.description({\n            i18n: req.i18n,\n            t: req.i18n.t,\n          })}\n          path={path}\n        />\n      ) : (\n        'Mock'\n      )\n    }\n\n    if (fieldConfig.admin?.components) {\n      if ('afterInput' in fieldConfig.admin.components) {\n        fieldState.customComponents.AfterInput = !mockRSCs\n          ? RenderServerComponent({\n              clientProps,\n              Component: fieldConfig.admin.components.afterInput,\n              importMap: req.payload.importMap,\n              key: 'field.admin.components.afterInput',\n              serverProps,\n            })\n          : 'Mock'\n      }\n\n      if ('beforeInput' in fieldConfig.admin.components) {\n        fieldState.customComponents.BeforeInput = !mockRSCs\n          ? RenderServerComponent({\n              clientProps,\n              Component: fieldConfig.admin.components.beforeInput,\n              importMap: req.payload.importMap,\n              key: 'field.admin.components.beforeInput',\n              serverProps,\n            })\n          : 'Mock'\n      }\n\n      if ('Description' in fieldConfig.admin.components) {\n        fieldState.customComponents.Description = !mockRSCs\n          ? RenderServerComponent({\n              clientProps,\n              Component: fieldConfig.admin.components.Description,\n              importMap: req.payload.importMap,\n              key: 'field.admin.components.Description',\n              serverProps,\n            })\n          : 'Mock'\n      }\n\n      if ('Error' in fieldConfig.admin.components) {\n        fieldState.customComponents.Error = !mockRSCs\n          ? RenderServerComponent({\n              clientProps,\n              Component: fieldConfig.admin.components.Error,\n              importMap: req.payload.importMap,\n              key: 'field.admin.components.Error',\n              serverProps,\n            })\n          : 'Mock'\n      }\n\n      if ('Label' in fieldConfig.admin.components) {\n        fieldState.customComponents.Label = !mockRSCs\n          ? RenderServerComponent({\n              clientProps,\n              Component: fieldConfig.admin.components.Label,\n              importMap: req.payload.importMap,\n              key: 'field.admin.components.Label',\n              serverProps,\n            })\n          : 'Mock'\n      }\n\n      if ('Field' in fieldConfig.admin.components) {\n        fieldState.customComponents.Field = !mockRSCs ? (\n          <WatchCondition path={path}>\n            {RenderServerComponent({\n              clientProps,\n              Component: fieldConfig.admin.components.Field,\n              importMap: req.payload.importMap,\n              key: 'field.admin.components.Field',\n              serverProps,\n            })}\n          </WatchCondition>\n        ) : (\n          'Mock'\n        )\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}